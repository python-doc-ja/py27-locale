# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/urllib2.rst:2
msgid ":mod:`urllib2` --- extensible library for opening URLs"
msgstr ""

#: ../../library/urllib2.rst:11
msgid "The :mod:`urllib2` module has been split across several modules in Python 3 named :mod:`urllib.request` and :mod:`urllib.error`. The :term:`2to3` tool will automatically adapt imports when converting your sources to Python 3."
msgstr ""

#: ../../library/urllib2.rst:17
msgid "The :mod:`urllib2` module defines functions and classes which help in opening URLs (mostly HTTP) in a complex world --- basic and digest authentication, redirections, cookies and more."
msgstr ""

#: ../../library/urllib2.rst:23
msgid "The `Requests package <http://requests.readthedocs.org/>`_ is recommended for a higher-level http client interface."
msgstr ""

#: ../../library/urllib2.rst:27
msgid "The :mod:`urllib2` module defines the following functions:"
msgstr ""

#: ../../library/urllib2.rst:32
msgid "Open the URL *url*, which can be either a string or a :class:`Request` object."
msgstr ""

#: ../../library/urllib2.rst:34
msgid "*data* may be a string specifying additional data to send to the server, or ``None`` if no such data is needed.  Currently HTTP requests are the only ones that use *data*; the HTTP request will be a POST instead of a GET when the *data* parameter is provided.  *data* should be a buffer in the standard :mimetype:`application/x-www-form-urlencoded` format.  The :func:`urllib.urlencode` function takes a mapping or sequence of 2-tuples and returns a string in this format. urllib2 module sends HTTP/1.1 requests with ``Connection:close`` header included."
msgstr ""

#: ../../library/urllib2.rst:43
msgid "The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).  This actually only works for HTTP, HTTPS and FTP connections."
msgstr ""

#: ../../library/urllib2.rst:48
msgid "If *context* is specified, it must be a :class:`ssl.SSLContext` instance describing the various SSL options. See :class:`~httplib.HTTPSConnection` for more details."
msgstr ""

#: ../../library/urllib2.rst:52
msgid "The optional *cafile* and *capath* parameters specify a set of trusted CA certificates for HTTPS requests.  *cafile* should point to a single file containing a bundle of CA certificates, whereas *capath* should point to a directory of hashed certificate files.  More information can be found in :meth:`ssl.SSLContext.load_verify_locations`."
msgstr ""

#: ../../library/urllib2.rst:58
msgid "The *cadefault* parameter is ignored."
msgstr ""

#: ../../library/urllib2.rst:60
msgid "This function returns a file-like object with three additional methods:"
msgstr ""

#: ../../library/urllib2.rst:62
msgid ":meth:`geturl` --- return the URL of the resource retrieved, commonly used to determine if a redirect was followed"
msgstr ""

#: ../../library/urllib2.rst:65
msgid ":meth:`info` --- return the meta-information of the page, such as headers, in the form of an :class:`mimetools.Message` instance (see `Quick Reference to HTTP Headers <http://www.cs.tut.fi/~jkorpela/http.html>`_)"
msgstr ""

#: ../../library/urllib2.rst:69
msgid ":meth:`getcode` --- return the HTTP status code of the response."
msgstr ""

#: ../../library/urllib2.rst:71
msgid "Raises :exc:`URLError` on errors."
msgstr ""

#: ../../library/urllib2.rst:73
msgid "Note that ``None`` may be returned if no handler handles the request (though the default installed global :class:`OpenerDirector` uses :class:`UnknownHandler` to ensure this never happens)."
msgstr ""

#: ../../library/urllib2.rst:77
msgid "In addition, if proxy settings are detected (for example, when a ``*_proxy`` environment variable like :envvar:`http_proxy` is set), :class:`ProxyHandler` is default installed and makes sure the requests are handled through the proxy."
msgstr ""

#: ../../library/urllib2.rst:82
#: ../../library/urllib2.rst:483
msgid "*timeout* was added."
msgstr ""

#: ../../library/urllib2.rst:85
msgid "*cafile*, *capath*, *cadefault*, and *context* were added."
msgstr ""

#: ../../library/urllib2.rst:91
msgid "Install an :class:`OpenerDirector` instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call :meth:`OpenerDirector.open` instead of :func:`urlopen`. The code does not check for a real :class:`OpenerDirector`, and any class with the appropriate interface will work."
msgstr ""

#: ../../library/urllib2.rst:100
msgid "Return an :class:`OpenerDirector` instance, which chains the handlers in the order given. *handler*\\s can be either instances of :class:`BaseHandler`, or subclasses of :class:`BaseHandler` (in which case it must be possible to call the constructor without any parameters).  Instances of the following classes will be in front of the *handler*\\s, unless the *handler*\\s contain them, instances of them or subclasses of them: :class:`ProxyHandler` (if proxy settings are detected), :class:`UnknownHandler`, :class:`HTTPHandler`, :class:`HTTPDefaultErrorHandler`, :class:`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`, :class:`HTTPErrorProcessor`."
msgstr ""

#: ../../library/urllib2.rst:111
msgid "If the Python installation has SSL support (i.e., if the :mod:`ssl` module can be imported), :class:`HTTPSHandler` will also be added."
msgstr ""

#: ../../library/urllib2.rst:114
msgid "Beginning in Python 2.3, a :class:`BaseHandler` subclass may also change its :attr:`handler_order` attribute to modify its position in the handlers list."
msgstr ""

#: ../../library/urllib2.rst:118
msgid "The following exceptions are raised as appropriate:"
msgstr ""

#: ../../library/urllib2.rst:123
msgid "The handlers raise this exception (or derived exceptions) when they run into a problem.  It is a subclass of :exc:`IOError`."
msgstr ""

#: ../../library/urllib2.rst:128
msgid "The reason for this error.  It can be a message string or another exception instance (:exc:`socket.error` for remote URLs, :exc:`OSError` for local URLs)."
msgstr ""

#: ../../library/urllib2.rst:135
msgid "Though being an exception (a subclass of :exc:`URLError`), an :exc:`HTTPError` can also function as a non-exceptional file-like return value (the same thing that :func:`urlopen` returns).  This is useful when handling exotic HTTP errors, such as requests for authentication."
msgstr ""

#: ../../library/urllib2.rst:142
msgid "An HTTP status code as defined in `RFC 2616 <http://www.faqs.org/rfcs/rfc2616.html>`_. This numeric value corresponds to a value found in the dictionary of codes as found in :attr:`BaseHTTPServer.BaseHTTPRequestHandler.responses`."
msgstr ""

#: ../../library/urllib2.rst:148
msgid "The reason for this error.  It can be a message string or another exception instance."
msgstr ""

#: ../../library/urllib2.rst:151
msgid "The following classes are provided:"
msgstr ""

#: ../../library/urllib2.rst:156
msgid "This class is an abstraction of a URL request."
msgstr ""

#: ../../library/urllib2.rst:158
msgid "*url* should be a string containing a valid URL."
msgstr ""

#: ../../library/urllib2.rst:160
msgid "*data* may be a string specifying additional data to send to the server, or ``None`` if no such data is needed.  Currently HTTP requests are the only ones that use *data*; the HTTP request will be a POST instead of a GET when the *data* parameter is provided.  *data* should be a buffer in the standard :mimetype:`application/x-www-form-urlencoded` format.  The :func:`urllib.urlencode` function takes a mapping or sequence of 2-tuples and returns a string in this format."
msgstr ""

#: ../../library/urllib2.rst:168
msgid "*headers* should be a dictionary, and will be treated as if :meth:`add_header` was called with each key and value as arguments.  This is often used to \"spoof\" the ``User-Agent`` header, which is used by a browser to identify itself -- some HTTP servers only allow requests coming from common browsers as opposed to scripts.  For example, Mozilla Firefox may identify itself as ``\"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11\"``, while :mod:`urllib2`'s default user agent string is ``\"Python-urllib/2.6\"`` (on Python 2.6)."
msgstr ""

#: ../../library/urllib2.rst:176
msgid "The final two arguments are only of interest for correct handling of third-party HTTP cookies:"
msgstr ""

#: ../../library/urllib2.rst:179
msgid "*origin_req_host* should be the request-host of the origin transaction, as defined by :rfc:`2965`.  It defaults to ``cookielib.request_host(self)``.  This is the host name or IP address of the original request that was initiated by the user.  For example, if the request is for an image in an HTML document, this should be the request-host of the request for the page containing the image."
msgstr ""

#: ../../library/urllib2.rst:185
msgid "*unverifiable* should indicate whether the request is unverifiable, as defined by RFC 2965.  It defaults to ``False``.  An unverifiable request is one whose URL the user did not have the option to approve.  For example, if the request is for an image in an HTML document, and the user had no option to approve the automatic fetching of the image, this should be true."
msgstr ""

#: ../../library/urllib2.rst:194
msgid "The :class:`OpenerDirector` class opens URLs via :class:`BaseHandler`\\ s chained together. It manages the chaining of handlers, and recovery from errors."
msgstr ""

#: ../../library/urllib2.rst:200
msgid "This is the base class for all registered handlers --- and handles only the simple mechanics of registration."
msgstr ""

#: ../../library/urllib2.rst:206
msgid "A class which defines a default handler for HTTP error responses; all responses are turned into :exc:`HTTPError` exceptions."
msgstr ""

#: ../../library/urllib2.rst:212
msgid "A class to handle redirections."
msgstr ""

#: ../../library/urllib2.rst:217
msgid "A class to handle HTTP Cookies."
msgstr ""

#: ../../library/urllib2.rst:222
msgid "Cause requests to go through a proxy. If *proxies* is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables :envvar:`<protocol>_proxy`.  If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry's Internet Settings section, and in a Mac OS X environment proxy information is retrieved from the OS X System Configuration Framework."
msgstr ""

#: ../../library/urllib2.rst:230
msgid "To disable autodetected proxy pass an empty dictionary."
msgstr ""

#: ../../library/urllib2.rst:235
msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings."
msgstr ""

#: ../../library/urllib2.rst:240
msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings. A realm of ``None`` is considered a catch-all realm, which is searched if no other realm fits."
msgstr ""

#: ../../library/urllib2.rst:247
#: ../../library/urllib2.rst:272
msgid "This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. *password_mgr*, if given, should be something that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:`http-password-mgr` for information on the interface that must be supported."
msgstr ""

#: ../../library/urllib2.rst:256
#: ../../library/urllib2.rst:281
msgid "Handle authentication with the remote host. *password_mgr*, if given, should be something that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:`http-password-mgr` for information on the interface that must be supported."
msgstr ""

#: ../../library/urllib2.rst:264
#: ../../library/urllib2.rst:289
msgid "Handle authentication with the proxy. *password_mgr*, if given, should be something that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:`http-password-mgr` for information on the interface that must be supported."
msgstr ""

#: ../../library/urllib2.rst:297
msgid "A class to handle opening of HTTP URLs."
msgstr ""

#: ../../library/urllib2.rst:302
msgid "A class to handle opening of HTTPS URLs. *context* has the same meaning as for :class:`httplib.HTTPSConnection`."
msgstr ""

#: ../../library/urllib2.rst:305
msgid "*context* added."
msgstr ""

#: ../../library/urllib2.rst:311
msgid "Open local files."
msgstr ""

#: ../../library/urllib2.rst:316
msgid "Open FTP URLs."
msgstr ""

#: ../../library/urllib2.rst:321
msgid "Open FTP URLs, keeping a cache of open FTP connections to minimize delays."
msgstr ""

#: ../../library/urllib2.rst:326
msgid "A catch-all class to handle unknown URLs."
msgstr ""

#: ../../library/urllib2.rst:331
#: ../../library/urllib2.rst:931
msgid "Process HTTP error responses."
msgstr ""

#: ../../library/urllib2.rst:337
msgid "Request Objects"
msgstr ""

#: ../../library/urllib2.rst:339
msgid "The following methods describe all of :class:`Request`'s public interface, and so all must be overridden in subclasses."
msgstr ""

#: ../../library/urllib2.rst:345
msgid "Set the :class:`Request` data to *data*.  This is ignored by all handlers except HTTP handlers --- and there it should be a byte string, and will change the request to be ``POST`` rather than ``GET``."
msgstr ""

#: ../../library/urllib2.rst:352
msgid "Return a string indicating the HTTP request method.  This is only meaningful for HTTP requests, and currently always returns ``'GET'`` or ``'POST'``."
msgstr ""

#: ../../library/urllib2.rst:358
msgid "Return whether the instance has a non-\\ ``None`` data."
msgstr ""

#: ../../library/urllib2.rst:363
msgid "Return the instance's data."
msgstr ""

#: ../../library/urllib2.rst:368
msgid "Add another header to the request.  Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server.  Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the *key* collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header."
msgstr ""

#: ../../library/urllib2.rst:379
msgid "Add a header that will not be added to a redirected request."
msgstr ""

#: ../../library/urllib2.rst:386
msgid "Return whether the instance has the named header (checks both regular and unredirected)."
msgstr ""

#: ../../library/urllib2.rst:394
msgid "Return the URL given in the constructor."
msgstr ""

#: ../../library/urllib2.rst:399
msgid "Return the type of the URL --- also known as the scheme."
msgstr ""

#: ../../library/urllib2.rst:404
msgid "Return the host to which a connection will be made."
msgstr ""

#: ../../library/urllib2.rst:409
msgid "Return the selector --- the part of the URL that is sent to the server."
msgstr ""

#: ../../library/urllib2.rst:414
msgid "Return the value of the given header. If the header is not present, return the default value."
msgstr ""

#: ../../library/urllib2.rst:420
msgid "Return a list of tuples (header_name, header_value) of the Request headers."
msgstr ""

#: ../../library/urllib2.rst:425
msgid "Prepare the request by connecting to a proxy server. The *host* and *type* will replace those of the instance, and the instance's selector will be the original URL given in the constructor."
msgstr ""

#: ../../library/urllib2.rst:432
msgid "Return the request-host of the origin transaction, as defined by :rfc:`2965`. See the documentation for the :class:`Request` constructor."
msgstr ""

#: ../../library/urllib2.rst:438
msgid "Return whether the request is unverifiable, as defined by RFC 2965. See the documentation for the :class:`Request` constructor."
msgstr ""

#: ../../library/urllib2.rst:445
msgid "OpenerDirector Objects"
msgstr ""

#: ../../library/urllib2.rst:447
msgid ":class:`OpenerDirector` instances have the following methods:"
msgstr ""

#: ../../library/urllib2.rst:452
msgid "*handler* should be an instance of :class:`BaseHandler`.  The following methods are searched, and added to the possible chains (note that HTTP errors are a special case)."
msgstr ""

#: ../../library/urllib2.rst:456
msgid ":samp:`{protocol}_open` --- signal that the handler knows how to open *protocol* URLs."
msgstr ""

#: ../../library/urllib2.rst:459
msgid ":samp:`http_error_{type}` --- signal that the handler knows how to handle HTTP errors with HTTP error code *type*."
msgstr ""

#: ../../library/urllib2.rst:462
msgid ":samp:`{protocol}_error` --- signal that the handler knows how to handle errors from (non-\\ ``http``) *protocol*."
msgstr ""

#: ../../library/urllib2.rst:465
msgid ":samp:`{protocol}_request` --- signal that the handler knows how to pre-process *protocol* requests."
msgstr ""

#: ../../library/urllib2.rst:468
msgid ":samp:`{protocol}_response` --- signal that the handler knows how to post-process *protocol* responses."
msgstr ""

#: ../../library/urllib2.rst:474
msgid "Open the given *url* (which can be a request object or a string), optionally passing the given *data*. Arguments, return values and exceptions raised are the same as those of :func:`urlopen` (which simply calls the :meth:`open` method on the currently installed global :class:`OpenerDirector`).  The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS and FTP connections)."
msgstr ""

#: ../../library/urllib2.rst:489
msgid "Handle an error of the given protocol.  This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific).  The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the :meth:`http_error_\\*` methods of the handler classes."
msgstr ""

#: ../../library/urllib2.rst:495
msgid "Return values and exceptions raised are the same as those of :func:`urlopen`."
msgstr ""

#: ../../library/urllib2.rst:497
msgid "OpenerDirector objects open URLs in three stages:"
msgstr ""

#: ../../library/urllib2.rst:499
msgid "The order in which these methods are called within each stage is determined by sorting the handler instances."
msgstr ""

#: ../../library/urllib2.rst:502
msgid "Every handler with a method named like :samp:`{protocol}_request` has that method called to pre-process the request."
msgstr ""

#: ../../library/urllib2.rst:505
msgid "Handlers with a method named like :samp:`{protocol}_open` are called to handle the request. This stage ends when a handler either returns a non-\\ :const:`None` value (ie. a response), or raises an exception (usually :exc:`URLError`). Exceptions are allowed to propagate."
msgstr ""

#: ../../library/urllib2.rst:510
msgid "In fact, the above algorithm is first tried for methods named :meth:`default_open`.  If all such methods return :const:`None`, the algorithm is repeated for methods named like :samp:`{protocol}_open`.  If all such methods return :const:`None`, the algorithm is repeated for methods named :meth:`unknown_open`."
msgstr ""

#: ../../library/urllib2.rst:516
msgid "Note that the implementation of these methods may involve calls of the parent :class:`OpenerDirector` instance's :meth:`~OpenerDirector.open` and :meth:`~OpenerDirector.error` methods."
msgstr ""

#: ../../library/urllib2.rst:520
msgid "Every handler with a method named like :samp:`{protocol}_response` has that method called to post-process the response."
msgstr ""

#: ../../library/urllib2.rst:527
msgid "BaseHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:529
msgid ":class:`BaseHandler` objects provide a couple of methods that are directly useful, and others that are meant to be used by derived classes.  These are intended for direct use:"
msgstr ""

#: ../../library/urllib2.rst:536
msgid "Add a director as parent."
msgstr ""

#: ../../library/urllib2.rst:541
msgid "Remove any parents."
msgstr ""

#: ../../library/urllib2.rst:543
msgid "The following attributes and methods should only be used by classes derived from :class:`BaseHandler`."
msgstr ""

#: ../../library/urllib2.rst:548
msgid "The convention has been adopted that subclasses defining :meth:`protocol_request` or :meth:`protocol_response` methods are named :class:`\\*Processor`; all others are named :class:`\\*Handler`."
msgstr ""

#: ../../library/urllib2.rst:555
msgid "A valid :class:`OpenerDirector`, which can be used to open using a different protocol, or handle errors."
msgstr ""

#: ../../library/urllib2.rst:561
msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to catch all URLs."
msgstr ""

#: ../../library/urllib2.rst:564
msgid "This method, if implemented, will be called by the parent :class:`OpenerDirector`.  It should return a file-like object as described in the return value of the :meth:`open` of :class:`OpenerDirector`, or ``None``. It should raise :exc:`URLError`, unless a truly exceptional thing happens (for example, :exc:`MemoryError` should not be mapped to :exc:`URLError`)."
msgstr ""

#: ../../library/urllib2.rst:570
msgid "This method will be called before any protocol-specific open method."
msgstr ""

#: ../../library/urllib2.rst:576
#: ../../library/urllib2.rst:627
#: ../../library/urllib2.rst:640
#: ../../library/urllib2.rst:729
msgid "(\"protocol\" is to be replaced by the protocol name.)"
msgstr ""

#: ../../library/urllib2.rst:578
msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to handle URLs with the given *protocol*."
msgstr ""

#: ../../library/urllib2.rst:581
msgid "This method, if defined, will be called by the parent :class:`OpenerDirector`. Return values should be the same as for  :meth:`default_open`."
msgstr ""

#: ../../library/urllib2.rst:587
msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it."
msgstr ""

#: ../../library/urllib2.rst:591
msgid "This method, if implemented, will be called by the :attr:`parent` :class:`OpenerDirector`.  Return values should be the same as for :meth:`default_open`."
msgstr ""

#: ../../library/urllib2.rst:598
msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors.  It will be called automatically by the  :class:`OpenerDirector` getting the error, and should not normally be called in other circumstances."
msgstr ""

#: ../../library/urllib2.rst:603
msgid "*req* will be a :class:`Request` object, *fp* will be a file-like object with the HTTP error body, *code* will be the three-digit code of the error, *msg* will be the user-visible explanation of the code and *hdrs* will be a mapping object with the headers of the error."
msgstr ""

#: ../../library/urllib2.rst:608
msgid "Return values and exceptions raised should be the same as those of :func:`urlopen`."
msgstr ""

#: ../../library/urllib2.rst:614
msgid "*nnn* should be a three-digit HTTP error code.  This method is also not defined in :class:`BaseHandler`, but will be called, if it exists, on an instance of a subclass, when an HTTP error with code *nnn* occurs."
msgstr ""

#: ../../library/urllib2.rst:618
msgid "Subclasses should override this method to handle specific HTTP errors."
msgstr ""

#: ../../library/urllib2.rst:620
msgid "Arguments, return values and exceptions raised should be the same as for :meth:`http_error_default`."
msgstr ""

#: ../../library/urllib2.rst:629
msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to pre-process requests of the given *protocol*."
msgstr ""

#: ../../library/urllib2.rst:632
msgid "This method, if defined, will be called by the parent :class:`OpenerDirector`. *req* will be a :class:`Request` object. The return value should be a :class:`Request` object."
msgstr ""

#: ../../library/urllib2.rst:642
msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to post-process responses of the given *protocol*."
msgstr ""

#: ../../library/urllib2.rst:645
msgid "This method, if defined, will be called by the parent :class:`OpenerDirector`. *req* will be a :class:`Request` object. *response* will be an object implementing the same interface as the return value of :func:`urlopen`.  The return value should implement the same interface as the return value of :func:`urlopen`."
msgstr ""

#: ../../library/urllib2.rst:655
msgid "HTTPRedirectHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:659
msgid "Some HTTP redirections require action from this module's client code.  If this is the case, :exc:`HTTPError` is raised.  See :rfc:`2616` for details of the precise meanings of the various redirection codes."
msgstr ""

#: ../../library/urllib2.rst:666
msgid "Return a :class:`Request` or ``None`` in response to a redirect. This is called by the default implementations of the :meth:`http_error_30\\*` methods when a redirection is received from the server.  If a redirection should take place, return a new :class:`Request` to allow :meth:`http_error_30\\*` to perform the redirect to *newurl*.  Otherwise, raise :exc:`HTTPError` if no other handler should try to handle this URL, or return ``None`` if you can't but another handler might."
msgstr ""

#: ../../library/urllib2.rst:676
msgid "The default implementation of this method does not strictly follow :rfc:`2616`, which says that 301 and 302 responses to ``POST`` requests must not be automatically redirected without confirmation by the user.  In reality, browsers do allow automatic redirection of these responses, changing the POST to a ``GET``, and the default implementation reproduces this behavior."
msgstr ""

#: ../../library/urllib2.rst:685
msgid "Redirect to the ``Location:`` or ``URI:`` URL.  This method is called by the parent :class:`OpenerDirector` when getting an HTTP 'moved permanently' response."
msgstr ""

#: ../../library/urllib2.rst:691
msgid "The same as :meth:`http_error_301`, but called for the 'found' response."
msgstr ""

#: ../../library/urllib2.rst:696
msgid "The same as :meth:`http_error_301`, but called for the 'see other' response."
msgstr ""

#: ../../library/urllib2.rst:701
msgid "The same as :meth:`http_error_301`, but called for the 'temporary redirect' response."
msgstr ""

#: ../../library/urllib2.rst:708
msgid "HTTPCookieProcessor Objects"
msgstr ""

#: ../../library/urllib2.rst:712
msgid ":class:`HTTPCookieProcessor` instances have one attribute:"
msgstr ""

#: ../../library/urllib2.rst:717
msgid "The :class:`cookielib.CookieJar` in which cookies are stored."
msgstr ""

#: ../../library/urllib2.rst:723
msgid "ProxyHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:731
msgid "The :class:`ProxyHandler` will have a method :samp:`{protocol}_open` for every *protocol* which has a proxy in the *proxies* dictionary given in the constructor.  The method will modify requests to go through the proxy, by calling ``request.set_proxy()``, and call the next handler in the chain to actually execute the protocol."
msgstr ""

#: ../../library/urllib2.rst:741
msgid "HTTPPasswordMgr Objects"
msgstr ""

#: ../../library/urllib2.rst:743
msgid "These methods are available on :class:`HTTPPasswordMgr` and :class:`HTTPPasswordMgrWithDefaultRealm` objects."
msgstr ""

#: ../../library/urllib2.rst:749
msgid "*uri* can be either a single URI, or a sequence of URIs. *realm*, *user* and *passwd* must be strings. This causes ``(user, passwd)`` to be used as authentication tokens when authentication for *realm* and a super-URI of any of the given URIs is given."
msgstr ""

#: ../../library/urllib2.rst:757
msgid "Get user/password for given realm and URI, if any.  This method will return ``(None, None)`` if there is no matching user/password."
msgstr ""

#: ../../library/urllib2.rst:760
msgid "For :class:`HTTPPasswordMgrWithDefaultRealm` objects, the realm ``None`` will be searched if the given *realm* has no matching user/password."
msgstr ""

#: ../../library/urllib2.rst:767
msgid "AbstractBasicAuthHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:772
msgid "Handle an authentication request by getting a user/password pair, and re-trying the request.  *authreq* should be the name of the header where the information about the realm is included in the request, *host* specifies the URL and path to authenticate for, *req* should be the (failed) :class:`Request` object, and *headers* should be the error headers."
msgstr ""

#: ../../library/urllib2.rst:778
msgid "*host* is either an authority (e.g. ``\"python.org\"``) or a URL containing an authority component (e.g. ``\"http://python.org/\"``). In either case, the authority must not contain a userinfo component (so, ``\"python.org\"`` and ``\"python.org:80\"`` are fine, ``\"joe:password@python.org\"`` is not)."
msgstr ""

#: ../../library/urllib2.rst:787
msgid "HTTPBasicAuthHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:792
#: ../../library/urllib2.rst:803
#: ../../library/urllib2.rst:828
#: ../../library/urllib2.rst:839
msgid "Retry the request with authentication information, if available."
msgstr ""

#: ../../library/urllib2.rst:798
msgid "ProxyBasicAuthHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:809
msgid "AbstractDigestAuthHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:814
msgid "*authreq* should be the name of the header where the information about the realm is included in the request, *host* should be the host to authenticate to, *req* should be the (failed) :class:`Request` object, and *headers* should be the error headers."
msgstr ""

#: ../../library/urllib2.rst:823
msgid "HTTPDigestAuthHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:834
msgid "ProxyDigestAuthHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:845
msgid "HTTPHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:850
msgid "Send an HTTP request, which can be either GET or POST, depending on ``req.has_data()``."
msgstr ""

#: ../../library/urllib2.rst:857
msgid "HTTPSHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:862
msgid "Send an HTTPS request, which can be either GET or POST, depending on ``req.has_data()``."
msgstr ""

#: ../../library/urllib2.rst:869
msgid "FileHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:874
msgid "Open the file locally, if there is no host name, or the host name is ``'localhost'``. Change the protocol to ``ftp`` otherwise, and retry opening it using :attr:`parent`."
msgstr ""

#: ../../library/urllib2.rst:882
msgid "FTPHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:887
msgid "Open the FTP file indicated by *req*. The login is always done with empty username and password."
msgstr ""

#: ../../library/urllib2.rst:894
msgid "CacheFTPHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:896
msgid ":class:`CacheFTPHandler` objects are :class:`FTPHandler` objects with the following additional methods:"
msgstr ""

#: ../../library/urllib2.rst:902
msgid "Set timeout of connections to *t* seconds."
msgstr ""

#: ../../library/urllib2.rst:907
msgid "Set maximum number of cached connections to *m*."
msgstr ""

#: ../../library/urllib2.rst:913
msgid "UnknownHandler Objects"
msgstr ""

#: ../../library/urllib2.rst:918
msgid "Raise a :exc:`URLError` exception."
msgstr ""

#: ../../library/urllib2.rst:924
msgid "HTTPErrorProcessor Objects"
msgstr ""

#: ../../library/urllib2.rst:933
msgid "For 200 error codes, the response object is returned immediately."
msgstr ""

#: ../../library/urllib2.rst:935
msgid "For non-200 error codes, this simply passes the job on to the :samp:`{protocol}_error_code` handler methods, via :meth:`OpenerDirector.error`.  Eventually, :class:`urllib2.HTTPDefaultErrorHandler` will raise an :exc:`HTTPError` if no other handler handles the error."
msgstr ""

#: ../../library/urllib2.rst:943
msgid "Process HTTPS error responses."
msgstr ""

#: ../../library/urllib2.rst:945
msgid "The behavior is same as :meth:`http_response`."
msgstr ""

#: ../../library/urllib2.rst:951
msgid "Examples"
msgstr ""

#: ../../library/urllib2.rst:953
msgid "This example gets the python.org main page and displays the first 100 bytes of it::"
msgstr ""

#: ../../library/urllib2.rst:962
msgid "Here we are sending a data-stream to the stdin of a CGI and reading the data it returns to us. Note that this example will only work when the Python installation supports SSL. ::"
msgstr ""

#: ../../library/urllib2.rst:973
msgid "The code for the sample CGI used in the above example is::"
msgstr ""

#: ../../library/urllib2.rst:980
msgid "Use of Basic HTTP Authentication::"
msgstr ""

#: ../../library/urllib2.rst:994
msgid ":func:`build_opener` provides many handlers by default, including a :class:`ProxyHandler`.  By default, :class:`ProxyHandler` uses the environment variables named ``<scheme>_proxy``, where ``<scheme>`` is the URL scheme involved.  For example, the :envvar:`http_proxy` environment variable is read to obtain the HTTP proxy's URL."
msgstr ""

#: ../../library/urllib2.rst:1000
msgid "This example replaces the default :class:`ProxyHandler` with one that uses programmatically-supplied proxy URLs, and adds proxy authorization support with :class:`ProxyBasicAuthHandler`. ::"
msgstr ""

#: ../../library/urllib2.rst:1012
msgid "Adding HTTP headers:"
msgstr ""

#: ../../library/urllib2.rst:1014
msgid "Use the *headers* argument to the :class:`Request` constructor, or::"
msgstr ""

#: ../../library/urllib2.rst:1021
msgid ":class:`OpenerDirector` automatically adds a :mailheader:`User-Agent` header to every :class:`Request`.  To change this::"
msgstr ""

#: ../../library/urllib2.rst:1029
msgid "Also, remember that a few standard headers (:mailheader:`Content-Length`, :mailheader:`Content-Type` and :mailheader:`Host`) are added when the :class:`Request` is passed to :func:`urlopen` (or :meth:`OpenerDirector.open`)."
msgstr ""

