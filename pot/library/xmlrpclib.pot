# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/xmlrpclib.rst:2
msgid ":mod:`xmlrpclib` --- XML-RPC client access"
msgstr ""

#: ../../library/xmlrpclib.rst:10
msgid "The :mod:`xmlrpclib` module has been renamed to :mod:`xmlrpc.client` in Python 3.  The :term:`2to3` tool will automatically adapt imports when converting your sources to Python 3."
msgstr ""

#: ../../library/xmlrpclib.rst:20
msgid "**Source code:** :source:`Lib/xmlrpclib.py`"
msgstr ""

#: ../../library/xmlrpclib.rst:24
msgid "XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a transport.  With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data.  This module supports writing XML-RPC client code; it handles all the details of translating between conformable Python objects and XML on the wire."
msgstr ""

#: ../../library/xmlrpclib.rst:33
msgid "The :mod:`xmlrpclib` module is not secure against maliciously constructed data.  If you need to parse untrusted or unauthenticated data see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../../library/xmlrpclib.rst:39
msgid "For https URIs, :mod:`xmlrpclib` now performs all the necessary certificate and hostname checks by default"
msgstr ""

#: ../../library/xmlrpclib.rst:44
msgid "A :class:`ServerProxy` instance is an object that manages communication with a remote XML-RPC server.  The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server.  The optional second argument is a transport factory instance; by default it is an internal :class:`SafeTransport` instance for https: URLs and an internal HTTP :class:`Transport` instance otherwise.  The optional third argument is an encoding, by default UTF-8. The optional fourth argument is a debugging flag. If *allow_none* is true,  the Python constant ``None`` will be translated into XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This is a commonly-used extension to the XML-RPC specification, but isn't supported by all clients and servers; see http://ontosys.com/xml-rpc/extensions.php for a description.  The *use_datetime* flag can be used to cause date/time values to be presented as :class:`datetime.datetime` objects; this is false by default. :class:`datetime.datetime` objects may be passed to calls."
msgstr ""

#: ../../library/xmlrpclib.rst:59
msgid "Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: ``http://user:pass@host:port/path``.  The ``user:pass`` portion will be base64-encoded as an HTTP 'Authorization' header, and sent to the remote server as part of the connection process when invoking an XML-RPC method.  You only need to use this if the remote server requires a Basic Authentication user and password. If an HTTPS url is provided, *context* may be :class:`ssl.SSLContext` and configures the SSL settings of the underlying HTTPS connection."
msgstr ""

#: ../../library/xmlrpclib.rst:68
msgid "The returned instance is a proxy object with methods that can be used to invoke corresponding RPC calls on the remote server.  If the remote server supports the introspection API, the proxy can also be used to query the remote server for the methods it supports (service discovery) and fetch other server-associated metadata."
msgstr ""

#: ../../library/xmlrpclib.rst:74
msgid ":class:`ServerProxy` instance methods take Python basic types and objects as arguments and return Python basic types and classes.  Types that are conformable (e.g. that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):"
msgstr ""

#: ../../library/xmlrpclib.rst:80
msgid "Name"
msgstr ""

#: ../../library/xmlrpclib.rst:80
msgid "Meaning"
msgstr ""

#: ../../library/xmlrpclib.rst:82
msgid ":const:`boolean`"
msgstr ""

#: ../../library/xmlrpclib.rst:82
msgid "The :const:`True` and :const:`False` constants"
msgstr ""

#: ../../library/xmlrpclib.rst:85
msgid ":const:`integers`"
msgstr ""

#: ../../library/xmlrpclib.rst:85
#: ../../library/xmlrpclib.rst:87
#: ../../library/xmlrpclib.rst:89
msgid "Pass in directly"
msgstr ""

#: ../../library/xmlrpclib.rst:87
msgid ":const:`floating-point numbers`"
msgstr ""

#: ../../library/xmlrpclib.rst:89
msgid ":const:`strings`"
msgstr ""

#: ../../library/xmlrpclib.rst:91
msgid ":const:`arrays`"
msgstr ""

#: ../../library/xmlrpclib.rst:91
msgid "Any Python sequence type containing conformable elements. Arrays are returned as lists"
msgstr ""

#: ../../library/xmlrpclib.rst:95
msgid ":const:`structures`"
msgstr ""

#: ../../library/xmlrpclib.rst:95
msgid "A Python dictionary. Keys must be strings, values may be any conformable type. Objects of user-defined classes can be passed in; only their *__dict__* attribute is transmitted."
msgstr ""

#: ../../library/xmlrpclib.rst:101
msgid ":const:`dates`"
msgstr ""

#: ../../library/xmlrpclib.rst:101
msgid "in seconds since the epoch (pass in an instance of the :class:`DateTime` class) or a :class:`datetime.datetime` instance."
msgstr ""

#: ../../library/xmlrpclib.rst:105
msgid ":const:`binary data`"
msgstr ""

#: ../../library/xmlrpclib.rst:105
msgid "pass in an instance of the :class:`Binary` wrapper class"
msgstr ""

#: ../../library/xmlrpclib.rst:109
msgid "This is the full set of data types supported by XML-RPC.  Method calls may also raise a special :exc:`Fault` instance, used to signal XML-RPC server errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a base class called :exc:`Error`.  Note that even though starting with Python 2.2 you can subclass built-in types, the xmlrpclib module currently does not marshal instances of such subclasses."
msgstr ""

#: ../../library/xmlrpclib.rst:117
msgid "When passing strings, characters special to XML such as ``<``, ``>``, and ``&`` will be automatically escaped.  However, it's the caller's responsibility to ensure that the string is free of characters that aren't allowed in XML, such as the control characters with ASCII values between 0 and 31 (except, of course, tab, newline and carriage return); failing to do this will result in an XML-RPC request that isn't well-formed XML.  If you have to pass arbitrary strings via XML-RPC, use the :class:`Binary` wrapper class described below."
msgstr ""

#: ../../library/xmlrpclib.rst:125
msgid ":class:`Server` is retained as an alias for :class:`ServerProxy` for backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""

#: ../../library/xmlrpclib.rst:128
#: ../../library/xmlrpclib.rst:543
msgid "The *use_datetime* flag was added."
msgstr ""

#: ../../library/xmlrpclib.rst:131
msgid "Instances of :term:`new-style class`\\es can be passed in if they have an *__dict__* attribute and don't have a base class that is marshalled in a special way."
msgstr ""

#: ../../library/xmlrpclib.rst:136
msgid "Added the *context* argument."
msgstr ""

#: ../../library/xmlrpclib.rst:144
msgid "`XML-RPC HOWTO <http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:143
msgid "A good description of XML-RPC operation and client software in several languages. Contains pretty much everything an XML-RPC client developer needs to know."
msgstr ""

#: ../../library/xmlrpclib.rst:147
msgid "`XML-RPC Introspection <http://xmlrpc-c.sourceforge.net/introspection.html>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:147
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr ""

#: ../../library/xmlrpclib.rst:150
msgid "`XML-RPC Specification <http://www.xmlrpc.com/spec>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:150
msgid "The official specification."
msgstr ""

#: ../../library/xmlrpclib.rst:155
msgid "`Unofficial XML-RPC Errata <http://effbot.org/zone/xmlrpc-errata.htm>`_"
msgstr ""

#: ../../library/xmlrpclib.rst:153
msgid "Fredrik Lundh's \"unofficial errata, intended to clarify certain details in the XML-RPC specification, as well as hint at 'best practices' to use when designing your own XML-RPC implementations.\""
msgstr ""

#: ../../library/xmlrpclib.rst:161
msgid "ServerProxy Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:163
msgid "A :class:`ServerProxy` instance has a method corresponding to each remote procedure call accepted by the XML-RPC server.  Calling the method performs an RPC, dispatched by both name and argument signature (e.g. the same method name can be overloaded with multiple argument signatures).  The RPC finishes by returning a value, which may be either returned data in a conformant type or a :class:`Fault` or :class:`ProtocolError` object indicating an error."
msgstr ""

#: ../../library/xmlrpclib.rst:170
msgid "Servers that support the XML introspection API support some common methods grouped under the reserved :attr:`system` attribute:"
msgstr ""

#: ../../library/xmlrpclib.rst:176
msgid "This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server."
msgstr ""

#: ../../library/xmlrpclib.rst:182
msgid "This method takes one parameter, the name of a method implemented by the XML-RPC server. It returns an array of possible signatures for this method. A signature is an array of types. The first of these types is the return type of the method, the rest are parameters."
msgstr ""

#: ../../library/xmlrpclib.rst:187
msgid "Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton."
msgstr ""

#: ../../library/xmlrpclib.rst:190
msgid "Signatures themselves are restricted to the top level parameters expected by a method. For instance if a method expects one array of structs as a parameter, and it returns a string, its signature is simply \"string, array\". If it expects three integers and returns a string, its signature is \"string, int, int, int\"."
msgstr ""

#: ../../library/xmlrpclib.rst:195
msgid "If no signature is defined for the method, a non-array value is returned. In Python this means that the type of the returned  value will be something other than list."
msgstr ""

#: ../../library/xmlrpclib.rst:202
msgid "This method takes one parameter, the name of a method implemented by the XML-RPC server.  It returns a documentation string describing the use of that method. If no such string is available, an empty string is returned. The documentation string may contain HTML markup."
msgstr ""

#: ../../library/xmlrpclib.rst:211
msgid "Boolean Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:213
msgid "This class may be initialized from any Python value; the instance returned depends only on its truth value.  It supports various Python operators through :meth:`__cmp__`, :meth:`__repr__`, :meth:`__int__`, and :meth:`__nonzero__` methods, all implemented in the obvious ways."
msgstr ""

#: ../../library/xmlrpclib.rst:218
msgid "It also has the following method, supported mainly for internal use by the unmarshalling code:"
msgstr ""

#: ../../library/xmlrpclib.rst:224
msgid "Write the XML-RPC encoding of this Boolean item to the out stream object."
msgstr ""

#: ../../library/xmlrpclib.rst:226
#: ../../library/xmlrpclib.rst:271
msgid "A working example follows. The server code::"
msgstr ""

#: ../../library/xmlrpclib.rst:239
#: ../../library/xmlrpclib.rst:286
#: ../../library/xmlrpclib.rst:392
#: ../../library/xmlrpclib.rst:498
msgid "The client code for the preceding server::"
msgstr ""

#: ../../library/xmlrpclib.rst:250
msgid "DateTime Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:252
msgid "This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It has the following methods, supported mainly for internal use by the marshalling/unmarshalling code:"
msgstr ""

#: ../../library/xmlrpclib.rst:260
msgid "Accept a string as the instance's new time value."
msgstr ""

#: ../../library/xmlrpclib.rst:265
msgid "Write the XML-RPC encoding of this :class:`DateTime` item to the *out* stream object."
msgstr ""

#: ../../library/xmlrpclib.rst:268
msgid "It also supports certain of Python's built-in operators through  :meth:`__cmp__` and :meth:`__repr__` methods."
msgstr ""

#: ../../library/xmlrpclib.rst:301
msgid "Binary Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:303
msgid "This class may be initialized from string data (which may include NULs). The primary access to the content of a :class:`Binary` object is provided by an attribute:"
msgstr ""

#: ../../library/xmlrpclib.rst:310
msgid "The binary data encapsulated by the :class:`Binary` instance.  The data is provided as an 8-bit string."
msgstr ""

#: ../../library/xmlrpclib.rst:313
msgid ":class:`Binary` objects have the following methods, supported mainly for internal use by the marshalling/unmarshalling code:"
msgstr ""

#: ../../library/xmlrpclib.rst:319
msgid "Accept a base64 string and decode it as the instance's new data."
msgstr ""

#: ../../library/xmlrpclib.rst:324
msgid "Write the XML-RPC base 64 encoding of this binary item to the out stream object."
msgstr ""

#: ../../library/xmlrpclib.rst:326
msgid "The encoded data will have newlines every 76 characters as per `RFC 2045 section 6.8 <http://tools.ietf.org/html/rfc2045#section-6.8>`_, which was the de facto standard base64 specification when the XML-RPC spec was written."
msgstr ""

#: ../../library/xmlrpclib.rst:331
msgid "It also supports certain of Python's built-in operators through a :meth:`__cmp__` method."
msgstr ""

#: ../../library/xmlrpclib.rst:334
msgid "Example usage of the binary objects.  We're going to transfer an image over XMLRPC::"
msgstr ""

#: ../../library/xmlrpclib.rst:350
msgid "The client gets the image and saves it to a file::"
msgstr ""

#: ../../library/xmlrpclib.rst:361
msgid "Fault Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:363
msgid "A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. Fault objects have the following attributes:"
msgstr ""

#: ../../library/xmlrpclib.rst:369
msgid "A string indicating the fault type."
msgstr ""

#: ../../library/xmlrpclib.rst:374
msgid "A string containing a diagnostic message associated with the fault."
msgstr ""

#: ../../library/xmlrpclib.rst:376
msgid "In the following example we're going to intentionally cause a :exc:`Fault` by returning a complex type object.  The server code::"
msgstr ""

#: ../../library/xmlrpclib.rst:409
msgid "ProtocolError Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:411
msgid "A :class:`ProtocolError` object describes a protocol error in the underlying transport layer (such as a 404 'not found' error if the server named by the URI does not exist).  It has the following attributes:"
msgstr ""

#: ../../library/xmlrpclib.rst:418
msgid "The URI or URL that triggered the error."
msgstr ""

#: ../../library/xmlrpclib.rst:423
msgid "The error code."
msgstr ""

#: ../../library/xmlrpclib.rst:428
msgid "The error message or diagnostic string."
msgstr ""

#: ../../library/xmlrpclib.rst:433
msgid "A string containing the headers of the HTTP/HTTPS request that triggered the error."
msgstr ""

#: ../../library/xmlrpclib.rst:436
msgid "In the following example we're going to intentionally cause a :exc:`ProtocolError` by providing an URI that doesn't point to an XMLRPC server::"
msgstr ""

#: ../../library/xmlrpclib.rst:454
msgid "MultiCall Objects"
msgstr ""

#: ../../library/xmlrpclib.rst:458
msgid "The :class:`MultiCall` object provides a way to encapsulate multiple calls to a remote server into a single request [#]_."
msgstr ""

#: ../../library/xmlrpclib.rst:464
msgid "Create an object used to boxcar method calls. *server* is the eventual target of the call. Calls can be made to the result object, but they will immediately return ``None``, and only store the call name and parameters in the :class:`MultiCall` object. Calling the object itself causes all stored calls to be transmitted as a single ``system.multicall`` request. The result of this call is a :term:`generator`; iterating over this generator yields the individual results."
msgstr ""

#: ../../library/xmlrpclib.rst:472
msgid "A usage example of this class follows.  The server code ::"
msgstr ""

#: ../../library/xmlrpclib.rst:514
msgid "Convenience Functions"
msgstr ""

#: ../../library/xmlrpclib.rst:519
msgid "Convert any Python value to one of the XML-RPC Boolean constants, ``True`` or ``False``."
msgstr ""

#: ../../library/xmlrpclib.rst:525
msgid "Convert *params* into an XML-RPC request. or into a response if *methodresponse* is true. *params* can be either a tuple of arguments or an instance of the :exc:`Fault` exception class.  If *methodresponse* is true, only a single value can be returned, meaning that *params* must be of length 1. *encoding*, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python's :const:`None` value cannot be used in standard XML-RPC; to allow using it via an extension,  provide a true value for *allow_none*."
msgstr ""

#: ../../library/xmlrpclib.rst:536
msgid "Convert an XML-RPC request or response into Python objects, a ``(params, methodname)``.  *params* is a tuple of argument; *methodname* is a string, or ``None`` if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a :exc:`Fault` exception. The *use_datetime* flag can be used to cause date/time values to be presented as :class:`datetime.datetime` objects; this is false by default."
msgstr ""

#: ../../library/xmlrpclib.rst:550
msgid "Example of Client Usage"
msgstr ""

#: ../../library/xmlrpclib.rst:567
msgid "To access an XML-RPC server through a proxy, you need to define  a custom transport.  The following example shows how:"
msgstr ""

#: ../../library/xmlrpclib.rst:595
msgid "Example of Client and Server Usage"
msgstr ""

#: ../../library/xmlrpclib.rst:597
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ""

#: ../../library/xmlrpclib.rst:601
msgid "Footnotes"
msgstr ""

#: ../../library/xmlrpclib.rst:602
msgid "This approach has been first presented in `a discussion on xmlrpc.com <http://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic>`_."
msgstr ""

