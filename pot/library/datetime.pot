# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ""

#: ../../library/datetime.rst:14
msgid "The :mod:`datetime` module supplies classes for manipulating dates and times in both simple and complex ways.  While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation. For related functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""

#: ../../library/datetime.rst:20
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr ""

#: ../../library/datetime.rst:22
msgid "An aware object has sufficient knowledge of applicable algorithmic and political time adjustments, such as time zone and daylight saving time information, to locate itself relative to other aware objects.  An aware object is used to represent a specific moment in time that is not open to interpretation [#]_."
msgstr ""

#: ../../library/datetime.rst:28
msgid "A naive object does not contain enough information to unambiguously locate itself relative to other date/time objects.  Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it's up to the program whether a particular number represents metres, miles, or mass.  Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality."
msgstr ""

#: ../../library/datetime.rst:35
msgid "For applications requiring aware objects, :class:`.datetime` and :class:`.time` objects have an optional time zone information attribute, :attr:`tzinfo`, that can be set to an instance of a subclass of the abstract :class:`tzinfo` class. These :class:`tzinfo` objects capture information about the offset from UTC time, the time zone name, and whether Daylight Saving Time is in effect.  Note that no concrete :class:`tzinfo` classes are supplied by the :mod:`datetime` module.  Supporting timezones at whatever level of detail is required is up to the application.  The rules for time adjustment across the world are more political than rational, and there is no standard suitable for every application."
msgstr ""

#: ../../library/datetime.rst:46
msgid "The :mod:`datetime` module exports the following constants:"
msgstr ""

#: ../../library/datetime.rst:50
msgid "The smallest year number allowed in a :class:`date` or :class:`.datetime` object. :const:`MINYEAR` is ``1``."
msgstr ""

#: ../../library/datetime.rst:56
msgid "The largest year number allowed in a :class:`date` or :class:`.datetime` object. :const:`MAXYEAR` is ``9999``."
msgstr ""

#: ../../library/datetime.rst:63
msgid "Module :mod:`calendar`"
msgstr ""

#: ../../library/datetime.rst:63
msgid "General calendar related functions."
msgstr ""

#: ../../library/datetime.rst:65
msgid "Module :mod:`time`"
msgstr ""

#: ../../library/datetime.rst:66
msgid "Time access and conversions."
msgstr ""

#: ../../library/datetime.rst:70
msgid "Available Types"
msgstr ""

#: ../../library/datetime.rst:75
msgid "An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :attr:`day`."
msgstr ""

#: ../../library/datetime.rst:83
msgid "An idealized time, independent of any particular day, assuming that every day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`tzinfo`."
msgstr ""

#: ../../library/datetime.rst:92
msgid "A combination of a date and a time. Attributes: :attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`tzinfo`."
msgstr ""

#: ../../library/datetime.rst:100
msgid "A duration expressing the difference between two :class:`date`, :class:`.time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""

#: ../../library/datetime.rst:106
msgid "An abstract base class for time zone information objects.  These are used by the :class:`.datetime` and :class:`.time` classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time)."
msgstr ""

#: ../../library/datetime.rst:111
msgid "Objects of these types are immutable."
msgstr ""

#: ../../library/datetime.rst:113
msgid "Objects of the :class:`date` type are always naive."
msgstr ""

#: ../../library/datetime.rst:115
msgid "An object of type :class:`.time` or :class:`.datetime` may be naive or aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not ``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d.tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo.utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` does not return ``None``.  Otherwise, *t* is naive."
msgstr ""

#: ../../library/datetime.rst:123
msgid "The distinction between naive and aware doesn't apply to :class:`timedelta` objects."
msgstr ""

#: ../../library/datetime.rst:126
msgid "Subclass relationships::"
msgstr ""

#: ../../library/datetime.rst:139
msgid ":class:`timedelta` Objects"
msgstr ""

#: ../../library/datetime.rst:141
msgid "A :class:`timedelta` object represents a duration, the difference between two dates or times."
msgstr ""

#: ../../library/datetime.rst:146
msgid "All arguments are optional and default to ``0``.  Arguments may be ints, longs, or floats, and may be positive or negative."
msgstr ""

#: ../../library/datetime.rst:149
msgid "Only *days*, *seconds* and *microseconds* are stored internally.  Arguments are converted to those units:"
msgstr ""

#: ../../library/datetime.rst:152
msgid "A millisecond is converted to 1000 microseconds."
msgstr ""

#: ../../library/datetime.rst:153
msgid "A minute is converted to 60 seconds."
msgstr ""

#: ../../library/datetime.rst:154
msgid "An hour is converted to 3600 seconds."
msgstr ""

#: ../../library/datetime.rst:155
msgid "A week is converted to 7 days."
msgstr ""

#: ../../library/datetime.rst:157
msgid "and days, seconds and microseconds are then normalized so that the representation is unique, with"
msgstr ""

#: ../../library/datetime.rst:160
msgid "``0 <= microseconds < 1000000``"
msgstr ""

#: ../../library/datetime.rst:161
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr ""

#: ../../library/datetime.rst:162
msgid "``-999999999 <= days <= 999999999``"
msgstr ""

#: ../../library/datetime.rst:164
msgid "If any argument is a float and there are fractional microseconds, the fractional microseconds left over from all arguments are combined and their sum is rounded to the nearest microsecond.  If no argument is a float, the conversion and normalization processes are exact (no information is lost)."
msgstr ""

#: ../../library/datetime.rst:169
msgid "If the normalized value of days lies outside the indicated range, :exc:`OverflowError` is raised."
msgstr ""

#: ../../library/datetime.rst:172
msgid "Note that normalization of negative values may be surprising at first. For example,"
msgstr ""

#: ../../library/datetime.rst:181
msgid "Class attributes are:"
msgstr ""

#: ../../library/datetime.rst:185
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""

#: ../../library/datetime.rst:190
msgid "The most positive :class:`timedelta` object, ``timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""

#: ../../library/datetime.rst:196
msgid "The smallest possible difference between non-equal :class:`timedelta` objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../library/datetime.rst:199
msgid "Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. ``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:202
#: ../../library/datetime.rst:405
#: ../../library/datetime.rst:760
#: ../../library/datetime.rst:1212
msgid "Instance attributes (read-only):"
msgstr ""

#: ../../library/datetime.rst:205
msgid "Attribute"
msgstr ""

#: ../../library/datetime.rst:205
msgid "Value"
msgstr ""

#: ../../library/datetime.rst:207
msgid "``days``"
msgstr ""

#: ../../library/datetime.rst:207
msgid "Between -999999999 and 999999999 inclusive"
msgstr ""

#: ../../library/datetime.rst:209
msgid "``seconds``"
msgstr ""

#: ../../library/datetime.rst:209
msgid "Between 0 and 86399 inclusive"
msgstr ""

#: ../../library/datetime.rst:211
msgid "``microseconds``"
msgstr ""

#: ../../library/datetime.rst:211
msgid "Between 0 and 999999 inclusive"
msgstr ""

#: ../../library/datetime.rst:214
#: ../../library/datetime.rst:422
#: ../../library/datetime.rst:803
#: ../../library/datetime.rst:1240
msgid "Supported operations:"
msgstr ""

#: ../../library/datetime.rst:219
#: ../../library/datetime.rst:425
#: ../../library/datetime.rst:806
msgid "Operation"
msgstr ""

#: ../../library/datetime.rst:219
#: ../../library/datetime.rst:425
#: ../../library/datetime.rst:806
msgid "Result"
msgstr ""

#: ../../library/datetime.rst:221
msgid "``t1 = t2 + t3``"
msgstr ""

#: ../../library/datetime.rst:221
msgid "Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are true. (1)"
msgstr ""

#: ../../library/datetime.rst:224
msgid "``t1 = t2 - t3``"
msgstr ""

#: ../../library/datetime.rst:224
msgid "Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* + *t3* are true. (1)"
msgstr ""

#: ../../library/datetime.rst:228
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr ""

#: ../../library/datetime.rst:228
msgid "Delta multiplied by an integer or long. Afterwards *t1* // i == *t2* is true, provided ``i != 0``."
msgstr ""

#: ../../library/datetime.rst:232
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr ""

#: ../../library/datetime.rst:235
msgid "``t1 = t2 // i``"
msgstr ""

#: ../../library/datetime.rst:235
msgid "The floor is computed and the remainder (if any) is thrown away. (3)"
msgstr ""

#: ../../library/datetime.rst:238
msgid "``+t1``"
msgstr ""

#: ../../library/datetime.rst:238
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

#: ../../library/datetime.rst:241
msgid "``-t1``"
msgstr ""

#: ../../library/datetime.rst:241
msgid "equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1.microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

#: ../../library/datetime.rst:245
msgid "``abs(t)``"
msgstr ""

#: ../../library/datetime.rst:245
msgid "equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. (2)"
msgstr ""

#: ../../library/datetime.rst:248
msgid "``str(t)``"
msgstr ""

#: ../../library/datetime.rst:248
msgid "Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is negative for negative ``t``. (5)"
msgstr ""

#: ../../library/datetime.rst:252
msgid "``repr(t)``"
msgstr ""

#: ../../library/datetime.rst:252
msgid "Returns a string in the form ``datetime.timedelta(D[, S[, U]])``, where D is negative for negative ``t``. (5)"
msgstr ""

#: ../../library/datetime.rst:257
#: ../../library/datetime.rst:439
#: ../../library/datetime.rst:1716
msgid "Notes:"
msgstr ""

#: ../../library/datetime.rst:260
msgid "This is exact, but may overflow."
msgstr ""

#: ../../library/datetime.rst:263
msgid "This is exact, and cannot overflow."
msgstr ""

#: ../../library/datetime.rst:266
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr ""

#: ../../library/datetime.rst:269
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:272
msgid "String representations of :class:`timedelta` objects are normalized similarly to their internal representation.  This leads to somewhat unusual results for negative timedeltas.  For example:"
msgstr ""

#: ../../library/datetime.rst:281
msgid "In addition to the operations listed above :class:`timedelta` objects support certain additions and subtractions with :class:`date` and :class:`.datetime` objects (see below)."
msgstr ""

#: ../../library/datetime.rst:285
msgid "Comparisons of :class:`timedelta` objects are supported with the :class:`timedelta` object representing the smaller duration considered to be the smaller timedelta. In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a :class:`timedelta` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:293
msgid ":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), support efficient pickling, and in Boolean contexts, a :class:`timedelta` object is considered to be true if and only if it isn't equal to ``timedelta(0)``."
msgstr ""

#: ../../library/datetime.rst:297
#: ../../library/datetime.rst:472
#: ../../library/datetime.rst:875
#: ../../library/datetime.rst:1263
msgid "Instance methods:"
msgstr ""

#: ../../library/datetime.rst:301
msgid "Return the total number of seconds contained in the duration. Equivalent to ``(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6`` computed with true division enabled."
msgstr ""

#: ../../library/datetime.rst:305
msgid "Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy."
msgstr ""

#: ../../library/datetime.rst:311
msgid "Example usage:"
msgstr ""

#: ../../library/datetime.rst:337
msgid ":class:`date` Objects"
msgstr ""

#: ../../library/datetime.rst:339
msgid "A :class:`date` object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.  January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on.  This matches the definition of the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book Calendrical Calculations, where it's the base calendar for all computations.  See the book for algorithms for converting between proleptic Gregorian ordinals and many other calendar systems."
msgstr ""

#: ../../library/datetime.rst:351
msgid "All arguments are required.  Arguments may be ints or longs, in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:354
#: ../../library/datetime.rst:639
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr ""

#: ../../library/datetime.rst:355
#: ../../library/datetime.rst:640
msgid "``1 <= month <= 12``"
msgstr ""

#: ../../library/datetime.rst:356
#: ../../library/datetime.rst:641
msgid "``1 <= day <= number of days in the given month and year``"
msgstr ""

#: ../../library/datetime.rst:358
#: ../../library/datetime.rst:647
msgid "If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/datetime.rst:361
#: ../../library/datetime.rst:649
msgid "Other constructors, all class methods:"
msgstr ""

#: ../../library/datetime.rst:365
msgid "Return the current local date.  This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr ""

#: ../../library/datetime.rst:371
msgid "Return the local date corresponding to the POSIX timestamp, such as is returned by :func:`time.time`.  This may raise :exc:`ValueError`, if the timestamp is out of the range of values supported by the platform C :c:func:`localtime` function. It's common for this to be restricted to years from 1970 through 2038.  Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by :meth:`fromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:381
msgid "Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: ../../library/datetime.rst:387
#: ../../library/datetime.rst:740
#: ../../library/datetime.rst:1192
msgid "Class attributes:"
msgstr ""

#: ../../library/datetime.rst:391
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

#: ../../library/datetime.rst:396
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

#: ../../library/datetime.rst:401
msgid "The smallest possible difference between non-equal date objects, ``timedelta(days=1)``."
msgstr ""

#: ../../library/datetime.rst:409
#: ../../library/datetime.rst:764
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../../library/datetime.rst:414
#: ../../library/datetime.rst:769
msgid "Between 1 and 12 inclusive."
msgstr ""

#: ../../library/datetime.rst:419
#: ../../library/datetime.rst:774
msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

#: ../../library/datetime.rst:427
msgid "``date2 = date1 + timedelta``"
msgstr ""

#: ../../library/datetime.rst:427
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr ""

#: ../../library/datetime.rst:430
msgid "``date2 = date1 - timedelta``"
msgstr ""

#: ../../library/datetime.rst:430
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""

#: ../../library/datetime.rst:433
msgid "``timedelta = date1 - date2``"
msgstr ""

#: ../../library/datetime.rst:433
#: ../../library/datetime.rst:812
#: ../../library/datetime.rst:1668
msgid "\\(3)"
msgstr ""

#: ../../library/datetime.rst:435
msgid "``date1 < date2``"
msgstr ""

#: ../../library/datetime.rst:435
msgid "*date1* is considered less than *date2* when *date1* precedes *date2* in time. (4)"
msgstr ""

#: ../../library/datetime.rst:442
msgid "*date2* is moved forward in time if ``timedelta.days > 0``, or backward if ``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. ``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:`OverflowError` is raised if ``date2.year`` would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: ../../library/datetime.rst:449
msgid "This isn't quite equivalent to date1 + (-timedelta), because -timedelta in isolation can overflow in cases where date1 - timedelta does not. ``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

#: ../../library/datetime.rst:454
msgid "This is exact, and cannot overflow.  timedelta.seconds and timedelta.microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../../library/datetime.rst:458
msgid "In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2.toordinal()``. In order to stop comparison from falling back to the default scheme of comparing object addresses, date comparison normally raises :exc:`TypeError` if the other comparand isn't also a :class:`date` object. However, ``NotImplemented`` is returned instead if the other comparand has a :meth:`timetuple` attribute.  This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a :class:`date` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:469
msgid "Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""

#: ../../library/datetime.rst:476
msgid "Return a date with the same value, except for those parameters given new values by whichever keyword arguments are specified.  For example, if ``d == date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

#: ../../library/datetime.rst:483
msgid "Return a :class:`time.struct_time` such as returned by :func:`time.localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day number within the current year starting with ``1`` for January 1st."
msgstr ""

#: ../../library/datetime.rst:493
msgid "Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: ../../library/datetime.rst:500
msgid "Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :meth:`isoweekday`."
msgstr ""

#: ../../library/datetime.rst:507
msgid "Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../../library/datetime.rst:514
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""

#: ../../library/datetime.rst:516
msgid "The ISO calendar is a widely used variant of the Gregorian calendar. See http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good explanation."
msgstr ""

#: ../../library/datetime.rst:520
msgid "The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday.  The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year."
msgstr ""

#: ../../library/datetime.rst:525
msgid "For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that ``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4).isocalendar() == (2004, 1, 7)``."
msgstr ""

#: ../../library/datetime.rst:533
msgid "Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""

#: ../../library/datetime.rst:539
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""

#: ../../library/datetime.rst:544
msgid "Return a string representing the date, for example ``date(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:`date.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../../library/datetime.rst:553
msgid "Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. For a complete list of formatting directives, see section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:561
msgid "Same as :meth:`.date.strftime`. This makes it possible to specify format string for a :class:`.date` object when using :meth:`str.format`. See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:566
msgid "Example of counting days to an event::"
msgstr ""

#: ../../library/datetime.rst:584
msgid "Example of working with :class:`date`:"
msgstr ""

#: ../../library/datetime.rst:623
msgid ":class:`.datetime` Objects"
msgstr ""

#: ../../library/datetime.rst:625
msgid "A :class:`.datetime` object is a single object containing all the information from a :class:`date` object and a :class:`.time` object.  Like a :class:`date` object, :class:`.datetime` assumes the current Gregorian calendar extended in both directions; like a time object, :class:`.datetime` assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""

#: ../../library/datetime.rst:631
msgid "Constructor:"
msgstr ""

#: ../../library/datetime.rst:635
msgid "The year, month and day arguments are required.  *tzinfo* may be ``None``, or an instance of a :class:`tzinfo` subclass.  The remaining arguments may be ints or longs, in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:642
#: ../../library/datetime.rst:1184
msgid "``0 <= hour < 24``"
msgstr ""

#: ../../library/datetime.rst:643
#: ../../library/datetime.rst:1185
msgid "``0 <= minute < 60``"
msgstr ""

#: ../../library/datetime.rst:644
#: ../../library/datetime.rst:1186
msgid "``0 <= second < 60``"
msgstr ""

#: ../../library/datetime.rst:645
msgid "``0 <= microsecond < 1000000``"
msgstr ""

#: ../../library/datetime.rst:653
msgid "Return the current local datetime, with :attr:`tzinfo` ``None``. This is equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:`now`, :meth:`fromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:660
msgid "Return the current local date and time.  If optional argument *tz* is ``None`` or not specified, this is like :meth:`today`, but, if possible, supplies more precision than can be gotten from going through a :func:`time.time` timestamp (for example, this may be possible on platforms supplying the C :c:func:`gettimeofday` function)."
msgstr ""

#: ../../library/datetime.rst:666
msgid "Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the current date and time are converted to *tz*'s time zone.  In this case the result is equivalent to ``tz.fromutc(datetime.utcnow().replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""

#: ../../library/datetime.rst:674
msgid "Return the current UTC date and time, with :attr:`tzinfo` ``None``. This is like :meth:`now`, but returns the current UTC date and time, as a naive :class:`.datetime` object. See also :meth:`now`."
msgstr ""

#: ../../library/datetime.rst:681
msgid "Return the local date and time corresponding to the POSIX timestamp, such as is returned by :func:`time.time`. If optional argument *tz* is ``None`` or not specified, the timestamp is converted to the platform's local date and time, and the returned :class:`.datetime` object is naive."
msgstr ""

#: ../../library/datetime.rst:686
msgid "Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the timestamp is converted to *tz*'s time zone.  In this case the result is equivalent to ``tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""

#: ../../library/datetime.rst:691
msgid ":meth:`fromtimestamp` may raise :exc:`ValueError`, if the timestamp is out of the range of values supported by the platform C :c:func:`localtime` or :c:func:`gmtime` functions.  It's common for this to be restricted to years in 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by :meth:`fromtimestamp`, and then it's possible to have two timestamps differing by a second that yield identical :class:`.datetime` objects. See also :meth:`utcfromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:702
msgid "Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, with :attr:`tzinfo` ``None``. This may raise :exc:`ValueError`, if the timestamp is out of the range of values supported by the platform C :c:func:`gmtime` function. It's common for this to be restricted to years in 1970 through 2038. See also :meth:`fromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:711
msgid "Return the :class:`.datetime` corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, minute, second and microsecond of the result are all 0, and :attr:`tzinfo` is ``None``."
msgstr ""

#: ../../library/datetime.rst:719
msgid "Return a new :class:`.datetime` object whose date components are equal to the given :class:`date` object's, and whose time components and :attr:`tzinfo` attributes are equal to the given :class:`.time` object's. For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d.timetz())``.  If date is a :class:`.datetime` object, its time components and :attr:`tzinfo` attributes are ignored."
msgstr ""

#: ../../library/datetime.rst:730
msgid "Return a :class:`.datetime` corresponding to *date_string*, parsed according to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format can't be parsed by :func:`time.strptime` or if it returns a value which isn't a time tuple. For a complete list of formatting directives, see section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:744
msgid "The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:750
msgid "The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:756
msgid "The smallest possible difference between non-equal :class:`.datetime` objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../library/datetime.rst:779
#: ../../library/datetime.rst:1216
msgid "In ``range(24)``."
msgstr ""

#: ../../library/datetime.rst:784
#: ../../library/datetime.rst:789
#: ../../library/datetime.rst:1221
#: ../../library/datetime.rst:1226
msgid "In ``range(60)``."
msgstr ""

#: ../../library/datetime.rst:794
#: ../../library/datetime.rst:1231
msgid "In ``range(1000000)``."
msgstr ""

#: ../../library/datetime.rst:799
msgid "The object passed as the *tzinfo* argument to the :class:`.datetime` constructor, or ``None`` if none was passed."
msgstr ""

#: ../../library/datetime.rst:808
msgid "``datetime2 = datetime1 + timedelta``"
msgstr ""

#: ../../library/datetime.rst:808
#: ../../library/datetime.rst:1620
#: ../../library/datetime.rst:1625
#: ../../library/datetime.rst:1637
#: ../../library/datetime.rst:1642
#: ../../library/datetime.rst:1701
#: ../../library/datetime.rst:1706
#: ../../library/datetime.rst:1710
msgid "\\(1)"
msgstr ""

#: ../../library/datetime.rst:810
msgid "``datetime2 = datetime1 - timedelta``"
msgstr ""

#: ../../library/datetime.rst:810
msgid "\\(2)"
msgstr ""

#: ../../library/datetime.rst:812
msgid "``timedelta = datetime1 - datetime2``"
msgstr ""

#: ../../library/datetime.rst:814
msgid "``datetime1 < datetime2``"
msgstr ""

#: ../../library/datetime.rst:814
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr ""

#: ../../library/datetime.rst:819
msgid "datetime2 is a duration of timedelta removed from datetime1, moving forward in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  The result has the same :attr:`tzinfo` attribute as the input datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`. Note that no time zone adjustments are done even if the input is an aware object."
msgstr ""

#: ../../library/datetime.rst:828
msgid "Computes the datetime2 such that datetime2 + timedelta == datetime1. As for addition, the result has the same :attr:`tzinfo` attribute as the input datetime, and no time zone adjustments are done even if the input is aware. This isn't quite equivalent to datetime1 + (-timedelta), because -timedelta in isolation can overflow in cases where datetime1 - timedelta does not."
msgstr ""

#: ../../library/datetime.rst:835
msgid "Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined only if both operands are naive, or if both are aware.  If one is aware and the other is naive, :exc:`TypeError` is raised."
msgstr ""

#: ../../library/datetime.rst:839
msgid "If both are naive, or both are aware and have the same :attr:`tzinfo` attribute, the :attr:`tzinfo` attributes are ignored, and the result is a :class:`timedelta` object *t* such that ``datetime2 + t == datetime1``.  No time zone adjustments are done in this case."
msgstr ""

#: ../../library/datetime.rst:844
msgid "If both are aware and have different :attr:`tzinfo` attributes, ``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())`` except that the implementation never overflows."
msgstr ""

#: ../../library/datetime.rst:850
msgid "*datetime1* is considered less than *datetime2* when *datetime1* precedes *datetime2* in time."
msgstr ""

#: ../../library/datetime.rst:853
msgid "If one comparand is naive and the other is aware, :exc:`TypeError` is raised. If both comparands are aware, and have the same :attr:`tzinfo` attribute, the common :attr:`tzinfo` attribute is ignored and the base datetimes are compared.  If both comparands are aware and have different :attr:`tzinfo` attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from ``self.utcoffset()``)."
msgstr ""

#: ../../library/datetime.rst:862
msgid "In order to stop comparison from falling back to the default scheme of comparing object addresses, datetime comparison normally raises :exc:`TypeError` if the other comparand isn't also a :class:`.datetime` object.  However, ``NotImplemented`` is returned instead if the other comparand has a :meth:`timetuple` attribute.  This hook gives other kinds of date objects a chance at implementing mixed-type comparison.  If not, when a :class:`.datetime` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:872
msgid ":class:`.datetime` objects can be used as dictionary keys. In Boolean contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""

#: ../../library/datetime.rst:879
msgid "Return :class:`date` object with same year, month and day."
msgstr ""

#: ../../library/datetime.rst:884
msgid "Return :class:`.time` object with same hour, minute, second and microsecond. :attr:`tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""

#: ../../library/datetime.rst:890
msgid "Return :class:`.time` object with same hour, minute, second, microsecond, and tzinfo attributes.  See also method :meth:`time`."
msgstr ""

#: ../../library/datetime.rst:896
msgid "Return a datetime with the same attributes, except for those attributes given new values by whichever keyword arguments are specified.  Note that ``tzinfo=None`` can be specified to create a naive datetime from an aware datetime with no conversion of date and time data."
msgstr ""

#: ../../library/datetime.rst:904
msgid "Return a :class:`.datetime` object with new :attr:`tzinfo` attribute *tz*, adjusting the date and time data so the result is the same UTC time as *self*, but in *tz*'s local time."
msgstr ""

#: ../../library/datetime.rst:908
msgid "*tz* must be an instance of a :class:`tzinfo` subclass, and its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  *self* must be aware (``self.tzinfo`` must not be ``None``, and ``self.utcoffset()`` must not return ``None``)."
msgstr ""

#: ../../library/datetime.rst:913
msgid "If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no adjustment of date or time data is performed. Else the result is local time in time zone *tz*, representing the same UTC time as *self*:  after ``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have the same date and time data as ``dt - dt.utcoffset()``. The discussion of class :class:`tzinfo` explains the cases at Daylight Saving Time transition boundaries where this cannot be achieved (an issue only if *tz* models both standard and daylight time)."
msgstr ""

#: ../../library/datetime.rst:922
msgid "If you merely want to attach a time zone object *tz* to a datetime *dt* without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If you merely want to remove the time zone object from an aware datetime *dt* without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:927
msgid "Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

#: ../../library/datetime.rst:942
msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.utcoffset(self)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:950
msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.dst(self)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:958
msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.tzname(self)``, raises an exception if the latter doesn't return ``None`` or a string object,"
msgstr ""

#: ../../library/datetime.rst:965
msgid "Return a :class:`time.struct_time` such as returned by :func:`time.localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day number within the current year starting with ``1`` for January 1st. The :attr:`tm_isdst` flag of the result is set according to the :meth:`dst` method: :attr:`tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

#: ../../library/datetime.rst:978
msgid "If :class:`.datetime` instance *d* is naive, this is the same as ``d.timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what ``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""

#: ../../library/datetime.rst:982
msgid "If *d* is aware, *d* is normalized to UTC time, by subtracting ``d.utcoffset()``, and a :class:`time.struct_time` for the normalized time is returned.  :attr:`tm_isdst` is forced to 0. Note that the result's :attr:`tm_year` member may be :const:`MINYEAR`\\ -1 or :const:`MAXYEAR`\\ +1, if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment spills over a year boundary."
msgstr ""

#: ../../library/datetime.rst:992
msgid "Return the proleptic Gregorian ordinal of the date.  The same as ``self.date().toordinal()``."
msgstr ""

#: ../../library/datetime.rst:998
msgid "Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

#: ../../library/datetime.rst:1004
msgid "Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../../library/datetime.rst:1011
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as ``self.date().isocalendar()``."
msgstr ""

#: ../../library/datetime.rst:1017
msgid "Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

#: ../../library/datetime.rst:1021
msgid "If :meth:`utcoffset` does not return ``None``, a 6-character string is appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""

#: ../../library/datetime.rst:1026
msgid "The optional argument *sep* (default ``'T'``) is a one-character separator, placed between the date and time portions of the result.  For example,"
msgstr ""

#: ../../library/datetime.rst:1039
msgid "For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d.isoformat(' ')``."
msgstr ""

#: ../../library/datetime.rst:1045
msgid "Return a string representing the date and time, for example ``datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../../library/datetime.rst:1054
msgid "Return a string representing the date and time, controlled by an explicit format string.  For a complete list of formatting directives, see section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1061
msgid "Same as :meth:`.datetime.strftime`.  This makes it possible to specify format string for a :class:`.datetime` object when using :meth:`str.format`. See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1066
msgid "Examples of working with datetime objects:"
msgstr ""

#: ../../library/datetime.rst:1113
msgid "Using datetime with tzinfo:"
msgstr ""

#: ../../library/datetime.rst:1173
msgid ":class:`time` Objects"
msgstr ""

#: ../../library/datetime.rst:1175
msgid "A time object represents a (local) time of day, independent of any particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../../library/datetime.rst:1180
msgid "All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :class:`tzinfo` subclass.  The remaining arguments may be ints or longs, in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:1187
msgid "``0 <= microsecond < 1000000``."
msgstr ""

#: ../../library/datetime.rst:1189
msgid "If an argument outside those ranges is given, :exc:`ValueError` is raised.  All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../../library/datetime.rst:1197
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../../library/datetime.rst:1202
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../../library/datetime.rst:1207
msgid "The smallest possible difference between non-equal :class:`.time` objects, ``timedelta(microseconds=1)``, although note that arithmetic on :class:`.time` objects is not supported."
msgstr ""

#: ../../library/datetime.rst:1236
msgid "The object passed as the tzinfo argument to the :class:`.time` constructor, or ``None`` if none was passed."
msgstr ""

#: ../../library/datetime.rst:1242
msgid "comparison of :class:`.time` to :class:`.time`, where *a* is considered less than *b* when *a* precedes *b* in time.  If one comparand is naive and the other is aware, :exc:`TypeError` is raised.  If both comparands are aware, and have the same :attr:`tzinfo` attribute, the common :attr:`tzinfo` attribute is ignored and the base times are compared.  If both comparands are aware and have different :attr:`tzinfo` attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from ``self.utcoffset()``). In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a :class:`.time` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:1254
msgid "hash, use as dict key"
msgstr ""

#: ../../library/datetime.rst:1256
msgid "efficient pickling"
msgstr ""

#: ../../library/datetime.rst:1258
msgid "in Boolean contexts, a :class:`.time` object is considered to be true if and only if, after converting it to minutes and subtracting :meth:`utcoffset` (or ``0`` if that's ``None``), the result is non-zero."
msgstr ""

#: ../../library/datetime.rst:1267
msgid "Return a :class:`.time` with the same value, except for those attributes given new values by whichever keyword arguments are specified.  Note that ``tzinfo=None`` can be specified to create a naive :class:`.time` from an aware :class:`.time`, without conversion of the time data."
msgstr ""

#: ../../library/datetime.rst:1275
msgid "Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm or, if self.microsecond is 0, HH:MM:SS If :meth:`utcoffset` does not return ``None``, a 6-character string is appended, giving the UTC offset in (signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is 0, HH:MM:SS+HH:MM"
msgstr ""

#: ../../library/datetime.rst:1283
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

#: ../../library/datetime.rst:1288
msgid "Return a string representing the time, controlled by an explicit format string. For a complete list of formatting directives, see section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1295
msgid "Same as :meth:`.time.strftime`. This makes it possible to specify format string for a :class:`.time` object when using :meth:`str.format`. See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../library/datetime.rst:1302
msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.utcoffset(None)``, and raises an exception if the latter doesn't return ``None`` or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1310
msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.dst(None)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1318
msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.tzname(None)``, or raises an exception if the latter doesn't return ``None`` or a string object."
msgstr ""

#: ../../library/datetime.rst:1323
msgid "Example:"
msgstr ""

#: ../../library/datetime.rst:1353
msgid ":class:`tzinfo` Objects"
msgstr ""

#: ../../library/datetime.rst:1355
msgid ":class:`tzinfo` is an abstract base class, meaning that this class should not be instantiated directly.  You need to derive a concrete subclass, and (at least) supply implementations of the standard :class:`tzinfo` methods needed by the :class:`.datetime` methods you use.  The :mod:`datetime` module does not supply any concrete subclasses of :class:`tzinfo`."
msgstr ""

#: ../../library/datetime.rst:1361
msgid "An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the constructors for :class:`.datetime` and :class:`.time` objects. The latter objects view their attributes as being in local time, and the :class:`tzinfo` object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them."
msgstr ""

#: ../../library/datetime.rst:1367
msgid "Special requirement for pickling:  A :class:`tzinfo` subclass must have an :meth:`__init__` method that can be called with no arguments, else it can be pickled but possibly not unpickled again.  This is a technical requirement that may be relaxed in the future."
msgstr ""

#: ../../library/datetime.rst:1372
msgid "A concrete subclass of :class:`tzinfo` may need to implement the following methods.  Exactly which methods are needed depends on the uses made of aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""

#: ../../library/datetime.rst:1379
msgid "Return offset of local time from UTC, in minutes east of UTC.  If local time is west of UTC, this should be negative.  Note that this is intended to be the total offset from UTC; for example, if a :class:`tzinfo` object represents both time zone and DST adjustments, :meth:`utcoffset` should return their sum.  If the UTC offset isn't known, return ``None``.  Else the value returned must be a :class:`timedelta` object specifying a whole number of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the magnitude of the offset must be less than one day).  Most implementations of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: ../../library/datetime.rst:1392
msgid "If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return ``None`` either."
msgstr ""

#: ../../library/datetime.rst:1395
msgid "The default implementation of :meth:`utcoffset` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:1401
msgid "Return the daylight saving time (DST) adjustment, in minutes east of UTC, or ``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return the offset as a :class:`timedelta` object (see :meth:`utcoffset` for details). Note that DST offset, if applicable, has already been added to the UTC offset returned by :meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're interested in obtaining DST info separately.  For example, :meth:`datetime.timetuple` calls its :attr:`tzinfo` attribute's :meth:`dst` method to determine how the :attr:`tm_isdst` flag should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing time zones."
msgstr ""

#: ../../library/datetime.rst:1412
msgid "An instance *tz* of a :class:`tzinfo` subclass that models both standard and daylight times must be consistent in this sense:"
msgstr ""

#: ../../library/datetime.rst:1415
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr ""

#: ../../library/datetime.rst:1417
msgid "must return the same result for every :class:`.datetime` *dt* with ``dt.tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields the time zone's \"standard offset\", which should not depend on the date or the time, but only on geographic location.  The implementation of :meth:`datetime.astimezone` relies on this, but cannot detect violations; it's the programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass cannot guarantee this, it may be able to override the default implementation of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` regardless."
msgstr ""

#: ../../library/datetime.rst:1426
msgid "Most implementations of :meth:`dst` will probably look like one of these two::"
msgstr ""

#: ../../library/datetime.rst:1432
msgid "or ::"
msgstr ""

#: ../../library/datetime.rst:1444
msgid "The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:1449
msgid "Return the time zone name corresponding to the :class:`.datetime` object *dt*, as a string. Nothing about string names is defined by the :mod:`datetime` module, and there's no requirement that it mean anything in particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` if a string name isn't known.  Note that this is a method rather than a fixed string primarily because some :class:`tzinfo` subclasses will wish to return different names depending on the specific value of *dt* passed, especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../../library/datetime.rst:1459
msgid "The default implementation of :meth:`tzname` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:1462
msgid "These methods are called by a :class:`.datetime` or :class:`.time` object, in response to their methods of the same names.  A :class:`.datetime` object passes itself as the argument, and a :class:`.time` object passes ``None`` as the argument.  A :class:`tzinfo` subclass's methods should therefore be prepared to accept a *dt* argument of ``None``, or of class :class:`.datetime`."
msgstr ""

#: ../../library/datetime.rst:1468
msgid "When ``None`` is passed, it's up to the class designer to decide the best response.  For example, returning ``None`` is appropriate if the class wishes to say that time objects don't participate in the :class:`tzinfo` protocols.  It may be more useful for ``utcoffset(None)`` to return the standard UTC offset, as there is no other convention for discovering the standard offset."
msgstr ""

#: ../../library/datetime.rst:1474
msgid "When a :class:`.datetime` object is passed in response to a :class:`.datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` methods directly.  The intent is that the :class:`tzinfo` methods interpret *dt* as being in local time, and not need worry about objects in other timezones."
msgstr ""

#: ../../library/datetime.rst:1480
msgid "There is one more :class:`tzinfo` method that a subclass may wish to override:"
msgstr ""

#: ../../library/datetime.rst:1485
msgid "This is called from the default :class:`datetime.astimezone()` implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s date and time data are to be viewed as expressing a UTC time.  The purpose of :meth:`fromutc` is to adjust the date and time data, returning an equivalent datetime in *self*'s local time."
msgstr ""

#: ../../library/datetime.rst:1491
msgid "Most :class:`tzinfo` subclasses should be able to inherit the default :meth:`fromutc` implementation without problems.  It's strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years.  An example of a time zone the default :meth:`fromutc` implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons. The default implementations of :meth:`astimezone` and :meth:`fromutc` may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../../library/datetime.rst:1502
msgid "Skipping code for error cases, the default :meth:`fromutc` implementation acts like::"
msgstr ""

#: ../../library/datetime.rst:1520
msgid "Example :class:`tzinfo` classes:"
msgstr ""

#: ../../library/datetime.rst:1525
msgid "Note that there are unavoidable subtleties twice per year in a :class:`tzinfo` subclass accounting for both standard and daylight time, at the DST transition points.  For concreteness, consider US Eastern (UTC -0500), where EDT begins the minute after 1:59 (EST) on the second Sunday in March, and ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../../library/datetime.rst:1539
msgid "When DST starts (the \"start\" line), the local wall clock leaps from 1:59 to 3:00.  A wall time of the form 2:MM doesn't really make sense on that day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the day DST begins.  In order for :meth:`astimezone` to make this guarantee, the :meth:`rzinfo.dst` method must consider times in the \"missing hour\" (2:MM for Eastern) to be in daylight time."
msgstr ""

#: ../../library/datetime.rst:1546
msgid "When DST ends (the \"end\" line), there's a potentially worse problem: there's an hour that can't be spelled unambiguously in local wall time: the last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC on the day daylight time ends.  The local wall clock leaps from 1:59 (daylight time) back to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by mapping two adjacent UTC hours into the same local hour then.  In the Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted to Eastern.  In order for :meth:`astimezone` to make this guarantee, the :meth:`tzinfo.dst` method must consider times in the \"repeated hour\" to be in standard time.  This is easily arranged, as in the example, by expressing DST switch times in the time zone's standard local time."
msgstr ""

#: ../../library/datetime.rst:1559
msgid "Applications that can't bear such ambiguities should avoid using hybrid :class:`tzinfo` subclasses; there are no ambiguities when using UTC, or any other fixed-offset :class:`tzinfo` subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours))."
msgstr ""

#: ../../library/datetime.rst:1571
msgid "`pytz <https://pypi.python.org/pypi/pytz/>`_"
msgstr ""

#: ../../library/datetime.rst:1567
msgid "The standard library has no :class:`tzinfo` instances, but there exists a third-party library which brings the *IANA timezone database* (also known as the Olson database) to Python: *pytz*."
msgstr ""

#: ../../library/datetime.rst:1571
msgid "*pytz* contains up-to-date information and its usage is recommended."
msgstr ""

#: ../../library/datetime.rst:1577
msgid "`IANA timezone database <http://www.iana.org/time-zones>`_"
msgstr ""

#: ../../library/datetime.rst:1574
msgid "The Time Zone Database (often called tz or zoneinfo) contains code and data that represent the history of local time for many representative locations around the globe. It is updated periodically to reflect changes made by political bodies to time zone boundaries, UTC offsets, and daylight-saving rules."
msgstr ""

#: ../../library/datetime.rst:1583
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ""

#: ../../library/datetime.rst:1585
msgid ":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a ``strftime(format)`` method, to create a string representing the time under the control of an explicit format string.  Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d.timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""

#: ../../library/datetime.rst:1591
msgid "Conversely, the :meth:`datetime.strptime` class method creates a :class:`.datetime` object from a string representing a date and time and a corresponding format string. ``datetime.strptime(date_string, format)`` is equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``."
msgstr ""

#: ../../library/datetime.rst:1596
msgid "For :class:`.time` objects, the format codes for year, month, and day should not be used, as time objects have no such values.  If they're used anyway, ``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""

#: ../../library/datetime.rst:1600
msgid "For :class:`date` objects, the format codes for hours, minutes, seconds, and microseconds should not be used, as :class:`date` objects have no such values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: ../../library/datetime.rst:1604
msgid "The full set of format codes supported varies across platforms, because Python calls the platform C library's :func:`strftime` function, and platform variations are common.  To see the full set of format codes supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""

#: ../../library/datetime.rst:1609
msgid "The following is a list of all the format codes that the C standard (1989 version) requires, and these work on all platforms with a standard C implementation.  Note that the 1999 version of the C standard added additional format codes."
msgstr ""

#: ../../library/datetime.rst:1614
msgid "The exact range of years for which :meth:`strftime` works also varies across platforms.  Regardless of platform, years before 1900 cannot be used."
msgstr ""

#: ../../library/datetime.rst:1618
msgid "Directive"
msgstr ""

#: ../../library/datetime.rst:1618
msgid "Meaning"
msgstr ""

#: ../../library/datetime.rst:1618
msgid "Example"
msgstr ""

#: ../../library/datetime.rst:1618
msgid "Notes"
msgstr ""

#: ../../library/datetime.rst:1620
msgid "``%a``"
msgstr ""

#: ../../library/datetime.rst:1620
msgid "Weekday as locale's abbreviated name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1625
msgid "``%A``"
msgstr ""

#: ../../library/datetime.rst:1625
msgid "Weekday as locale's full name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1630
msgid "``%w``"
msgstr ""

#: ../../library/datetime.rst:1630
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""

#: ../../library/datetime.rst:1630
msgid "0, 1, ..., 6"
msgstr ""

#: ../../library/datetime.rst:1634
msgid "``%d``"
msgstr ""

#: ../../library/datetime.rst:1634
msgid "Day of the month as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1634
msgid "01, 02, ..., 31"
msgstr ""

#: ../../library/datetime.rst:1637
msgid "``%b``"
msgstr ""

#: ../../library/datetime.rst:1637
msgid "Month as locale's abbreviated name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1642
msgid "``%B``"
msgstr ""

#: ../../library/datetime.rst:1642
msgid "Month as locale's full name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1647
msgid "``%m``"
msgstr ""

#: ../../library/datetime.rst:1647
msgid "Month as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1647
#: ../../library/datetime.rst:1659
msgid "01, 02, ..., 12"
msgstr ""

#: ../../library/datetime.rst:1650
msgid "``%y``"
msgstr ""

#: ../../library/datetime.rst:1650
msgid "Year without century as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1650
msgid "00, 01, ..., 99"
msgstr ""

#: ../../library/datetime.rst:1653
msgid "``%Y``"
msgstr ""

#: ../../library/datetime.rst:1653
msgid "Year with century as a decimal number."
msgstr ""

#: ../../library/datetime.rst:1653
msgid "1970, 1988, 2001, 2013"
msgstr ""

#: ../../library/datetime.rst:1656
msgid "``%H``"
msgstr ""

#: ../../library/datetime.rst:1656
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1656
msgid "00, 01, ..., 23"
msgstr ""

#: ../../library/datetime.rst:1659
msgid "``%I``"
msgstr ""

#: ../../library/datetime.rst:1659
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1662
msgid "``%p``"
msgstr ""

#: ../../library/datetime.rst:1662
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../../library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1662
msgid "\\(1), \\(2)"
msgstr ""

#: ../../library/datetime.rst:1665
msgid "``%M``"
msgstr ""

#: ../../library/datetime.rst:1665
msgid "Minute as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1665
#: ../../library/datetime.rst:1668
msgid "00, 01, ..., 59"
msgstr ""

#: ../../library/datetime.rst:1668
msgid "``%S``"
msgstr ""

#: ../../library/datetime.rst:1668
msgid "Second as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1671
msgid "``%f``"
msgstr ""

#: ../../library/datetime.rst:1671
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr ""

#: ../../library/datetime.rst:1671
msgid "000000, 000001, ..., 999999"
msgstr ""

#: ../../library/datetime.rst:1671
msgid "\\(4)"
msgstr ""

#: ../../library/datetime.rst:1675
#: ../../library/datetime.rst:1755
msgid "``%z``"
msgstr ""

#: ../../library/datetime.rst:1675
msgid "UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive)."
msgstr ""

#: ../../library/datetime.rst:1675
msgid "(empty), +0000, -0400, +1030"
msgstr ""

#: ../../library/datetime.rst:1675
msgid "\\(5)"
msgstr ""

#: ../../library/datetime.rst:1679
#: ../../library/datetime.rst:1760
msgid "``%Z``"
msgstr ""

#: ../../library/datetime.rst:1679
msgid "Time zone name (empty string if the object is naive)."
msgstr ""

#: ../../library/datetime.rst:1679
msgid "(empty), UTC, EST, CST"
msgstr ""

#: ../../library/datetime.rst:1682
msgid "``%j``"
msgstr ""

#: ../../library/datetime.rst:1682
msgid "Day of the year as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:1682
msgid "001, 002, ..., 366"
msgstr ""

#: ../../library/datetime.rst:1685
msgid "``%U``"
msgstr ""

#: ../../library/datetime.rst:1685
msgid "Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0."
msgstr ""

#: ../../library/datetime.rst:1685
#: ../../library/datetime.rst:1693
msgid "00, 01, ..., 53"
msgstr ""

#: ../../library/datetime.rst:1685
#: ../../library/datetime.rst:1693
msgid "\\(6)"
msgstr ""

#: ../../library/datetime.rst:1693
msgid "``%W``"
msgstr ""

#: ../../library/datetime.rst:1693
msgid "Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0."
msgstr ""

#: ../../library/datetime.rst:1701
msgid "``%c``"
msgstr ""

#: ../../library/datetime.rst:1701
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1706
msgid "``%x``"
msgstr ""

#: ../../library/datetime.rst:1706
msgid "Locale's appropriate date representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1710
msgid "``%X``"
msgstr ""

#: ../../library/datetime.rst:1710
msgid "Locale's appropriate time representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:1713
msgid "``%%``"
msgstr ""

#: ../../library/datetime.rst:1713
msgid "A literal ``'%'`` character."
msgstr ""

#: ../../library/datetime.rst:1713
msgid "%"
msgstr ""

#: ../../library/datetime.rst:1719
msgid "Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, \"month/day/year\" versus \"day/month/year\"), and the output may contain Unicode characters encoded using the locale's default encoding (for example, if the current locale is ``ja_JP``, the default encoding could be any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` to determine the current locale's encoding)."
msgstr ""

#: ../../library/datetime.rst:1728
msgid "When used with the :meth:`strptime` method, the ``%p`` directive only affects the output hour field if the ``%I`` directive is used to parse the hour."
msgstr ""

#: ../../library/datetime.rst:1732
msgid "Unlike the :mod:`time` module, the :mod:`datetime` module does not support leap seconds."
msgstr ""

#: ../../library/datetime.rst:1736
msgid "``%f`` is an extension to the set of format characters in the C standard (but implemented separately in datetime objects, and therefore always available).  When used with the :meth:`strptime` method, the ``%f`` directive accepts from one to six digits and zero pads on the right."
msgstr ""

#: ../../library/datetime.rst:1744
msgid "For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty strings."
msgstr ""

#: ../../library/datetime.rst:1747
msgid "For an aware object:"
msgstr ""

#: ../../library/datetime.rst:1750
msgid ":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM or -HHMM, where HH is a 2-digit string giving the number of UTC offset hours, and MM is a 2-digit string giving the number of UTC offset minutes.  For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

#: ../../library/datetime.rst:1758
msgid "If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

#: ../../library/datetime.rst:1763
msgid "When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used in calculations when the day of the week and the year are specified."
msgstr ""

#: ../../library/datetime.rst:1768
msgid "Footnotes"
msgstr ""

#: ../../library/datetime.rst:1769
msgid "If, that is, we ignore the effects of Relativity"
msgstr ""

