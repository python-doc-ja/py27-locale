# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ""

#: ../../library/inspect.rst:12
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr ""

#: ../../library/inspect.rst:16
msgid "The :mod:`inspect` module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, tracebacks, frame objects, and code objects.  For example, it can help you examine the contents of a class, retrieve the source code of a method, extract and format the argument list for a function, or get all the information you need to display a detailed traceback."
msgstr ""

#: ../../library/inspect.rst:23
msgid "There are four main kinds of services provided by this module: type checking, getting source code, inspecting classes and functions, and examining the interpreter stack."
msgstr ""

#: ../../library/inspect.rst:31
msgid "Types and members"
msgstr ""

#: ../../library/inspect.rst:33
msgid "The :func:`getmembers` function retrieves the members of an object such as a class or module. The sixteen functions whose names begin with \"is\" are mainly provided as convenient choices for the second argument to :func:`getmembers`. They also help you determine when you can expect to find the following special attributes:"
msgstr ""

#: ../../library/inspect.rst:40
msgid "Type"
msgstr ""

#: ../../library/inspect.rst:40
msgid "Attribute"
msgstr ""

#: ../../library/inspect.rst:40
msgid "Description"
msgstr ""

#: ../../library/inspect.rst:40
msgid "Notes"
msgstr ""

#: ../../library/inspect.rst:42
msgid "module"
msgstr ""

#: ../../library/inspect.rst:42
#: ../../library/inspect.rst:47
#: ../../library/inspect.rst:52
#: ../../library/inspect.rst:68
#: ../../library/inspect.rst:207
msgid "__doc__"
msgstr ""

#: ../../library/inspect.rst:42
#: ../../library/inspect.rst:47
#: ../../library/inspect.rst:52
#: ../../library/inspect.rst:68
#: ../../library/inspect.rst:207
msgid "documentation string"
msgstr ""

#: ../../library/inspect.rst:44
msgid "__file__"
msgstr ""

#: ../../library/inspect.rst:44
msgid "filename (missing for built-in modules)"
msgstr ""

#: ../../library/inspect.rst:47
msgid "class"
msgstr ""

#: ../../library/inspect.rst:49
msgid "__module__"
msgstr ""

#: ../../library/inspect.rst:49
msgid "name of module in which this class was defined"
msgstr ""

#: ../../library/inspect.rst:52
msgid "method"
msgstr ""

#: ../../library/inspect.rst:54
#: ../../library/inspect.rst:70
#: ../../library/inspect.rst:209
msgid "__name__"
msgstr ""

#: ../../library/inspect.rst:54
msgid "name with which this method was defined"
msgstr ""

#: ../../library/inspect.rst:57
msgid "im_class"
msgstr ""

#: ../../library/inspect.rst:57
msgid "class object that asked for this method"
msgstr ""

#: ../../library/inspect.rst:57
msgid "\\(1)"
msgstr ""

#: ../../library/inspect.rst:60
msgid "im_func or __func__"
msgstr ""

#: ../../library/inspect.rst:60
msgid "function object containing implementation of method"
msgstr ""

#: ../../library/inspect.rst:64
msgid "im_self or __self__"
msgstr ""

#: ../../library/inspect.rst:64
msgid "instance to which this method is bound, or ``None``"
msgstr ""

#: ../../library/inspect.rst:68
msgid "function"
msgstr ""

#: ../../library/inspect.rst:70
msgid "name with which this function was defined"
msgstr ""

#: ../../library/inspect.rst:73
msgid "func_code"
msgstr ""

#: ../../library/inspect.rst:73
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""

#: ../../library/inspect.rst:77
msgid "func_defaults"
msgstr ""

#: ../../library/inspect.rst:77
msgid "tuple of any default values for arguments"
msgstr ""

#: ../../library/inspect.rst:80
msgid "func_doc"
msgstr ""

#: ../../library/inspect.rst:80
msgid "(same as __doc__)"
msgstr ""

#: ../../library/inspect.rst:82
msgid "func_globals"
msgstr ""

#: ../../library/inspect.rst:82
msgid "global namespace in which this function was defined"
msgstr ""

#: ../../library/inspect.rst:85
msgid "func_name"
msgstr ""

#: ../../library/inspect.rst:85
msgid "(same as __name__)"
msgstr ""

#: ../../library/inspect.rst:87
msgid "generator"
msgstr ""

#: ../../library/inspect.rst:87
msgid "__iter__"
msgstr ""

#: ../../library/inspect.rst:87
msgid "defined to support iteration over container"
msgstr ""

#: ../../library/inspect.rst:90
msgid "close"
msgstr ""

#: ../../library/inspect.rst:90
msgid "raises new GeneratorExit exception inside the generator to terminate the iteration"
msgstr ""

#: ../../library/inspect.rst:95
msgid "gi_code"
msgstr ""

#: ../../library/inspect.rst:95
msgid "code object"
msgstr ""

#: ../../library/inspect.rst:97
msgid "gi_frame"
msgstr ""

#: ../../library/inspect.rst:97
msgid "frame object or possibly None once the generator has been exhausted"
msgstr ""

#: ../../library/inspect.rst:101
msgid "gi_running"
msgstr ""

#: ../../library/inspect.rst:101
msgid "set to 1 when generator is executing, 0 otherwise"
msgstr ""

#: ../../library/inspect.rst:104
msgid "next"
msgstr ""

#: ../../library/inspect.rst:104
msgid "return the next item from the container"
msgstr ""

#: ../../library/inspect.rst:107
msgid "send"
msgstr ""

#: ../../library/inspect.rst:107
msgid "resumes the generator and \"sends\" a value that becomes the result of the current yield-expression"
msgstr ""

#: ../../library/inspect.rst:112
msgid "throw"
msgstr ""

#: ../../library/inspect.rst:112
msgid "used to raise an exception inside the generator"
msgstr ""

#: ../../library/inspect.rst:116
msgid "traceback"
msgstr ""

#: ../../library/inspect.rst:116
msgid "tb_frame"
msgstr ""

#: ../../library/inspect.rst:116
msgid "frame object at this level"
msgstr ""

#: ../../library/inspect.rst:119
msgid "tb_lasti"
msgstr ""

#: ../../library/inspect.rst:119
#: ../../library/inspect.rst:152
msgid "index of last attempted instruction in bytecode"
msgstr ""

#: ../../library/inspect.rst:122
msgid "tb_lineno"
msgstr ""

#: ../../library/inspect.rst:122
#: ../../library/inspect.rst:155
msgid "current line number in Python source code"
msgstr ""

#: ../../library/inspect.rst:125
msgid "tb_next"
msgstr ""

#: ../../library/inspect.rst:125
msgid "next inner traceback object (called by this level)"
msgstr ""

#: ../../library/inspect.rst:129
msgid "frame"
msgstr ""

#: ../../library/inspect.rst:129
msgid "f_back"
msgstr ""

#: ../../library/inspect.rst:129
msgid "next outer frame object (this frame's caller)"
msgstr ""

#: ../../library/inspect.rst:132
msgid "f_builtins"
msgstr ""

#: ../../library/inspect.rst:132
msgid "builtins namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:135
msgid "f_code"
msgstr ""

#: ../../library/inspect.rst:135
msgid "code object being executed in this frame"
msgstr ""

#: ../../library/inspect.rst:138
msgid "f_exc_traceback"
msgstr ""

#: ../../library/inspect.rst:138
msgid "traceback if raised in this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:141
msgid "f_exc_type"
msgstr ""

#: ../../library/inspect.rst:141
msgid "exception type if raised in this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:145
msgid "f_exc_value"
msgstr ""

#: ../../library/inspect.rst:145
msgid "exception value if raised in this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:149
msgid "f_globals"
msgstr ""

#: ../../library/inspect.rst:149
msgid "global namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:152
msgid "f_lasti"
msgstr ""

#: ../../library/inspect.rst:155
msgid "f_lineno"
msgstr ""

#: ../../library/inspect.rst:158
msgid "f_locals"
msgstr ""

#: ../../library/inspect.rst:158
msgid "local namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:161
msgid "f_restricted"
msgstr ""

#: ../../library/inspect.rst:161
msgid "0 or 1 if frame is in restricted execution mode"
msgstr ""

#: ../../library/inspect.rst:164
msgid "f_trace"
msgstr ""

#: ../../library/inspect.rst:164
msgid "tracing function for this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:167
msgid "code"
msgstr ""

#: ../../library/inspect.rst:167
msgid "co_argcount"
msgstr ""

#: ../../library/inspect.rst:167
msgid "number of arguments (not including \\* or \\*\\* args)"
msgstr ""

#: ../../library/inspect.rst:171
msgid "co_code"
msgstr ""

#: ../../library/inspect.rst:171
msgid "string of raw compiled bytecode"
msgstr ""

#: ../../library/inspect.rst:174
msgid "co_consts"
msgstr ""

#: ../../library/inspect.rst:174
msgid "tuple of constants used in the bytecode"
msgstr ""

#: ../../library/inspect.rst:177
msgid "co_filename"
msgstr ""

#: ../../library/inspect.rst:177
msgid "name of file in which this code object was created"
msgstr ""

#: ../../library/inspect.rst:181
msgid "co_firstlineno"
msgstr ""

#: ../../library/inspect.rst:181
msgid "number of first line in Python source code"
msgstr ""

#: ../../library/inspect.rst:184
msgid "co_flags"
msgstr ""

#: ../../library/inspect.rst:184
msgid "bitmap: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"
msgstr ""

#: ../../library/inspect.rst:188
msgid "co_lnotab"
msgstr ""

#: ../../library/inspect.rst:188
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""

#: ../../library/inspect.rst:192
msgid "co_name"
msgstr ""

#: ../../library/inspect.rst:192
msgid "name with which this code object was defined"
msgstr ""

#: ../../library/inspect.rst:195
msgid "co_names"
msgstr ""

#: ../../library/inspect.rst:195
msgid "tuple of names of local variables"
msgstr ""

#: ../../library/inspect.rst:198
msgid "co_nlocals"
msgstr ""

#: ../../library/inspect.rst:198
msgid "number of local variables"
msgstr ""

#: ../../library/inspect.rst:200
msgid "co_stacksize"
msgstr ""

#: ../../library/inspect.rst:200
msgid "virtual machine stack space required"
msgstr ""

#: ../../library/inspect.rst:203
msgid "co_varnames"
msgstr ""

#: ../../library/inspect.rst:203
msgid "tuple of names of arguments and local variables"
msgstr ""

#: ../../library/inspect.rst:207
msgid "builtin"
msgstr ""

#: ../../library/inspect.rst:209
msgid "original name of this function or method"
msgstr ""

#: ../../library/inspect.rst:212
msgid "__self__"
msgstr ""

#: ../../library/inspect.rst:212
msgid "instance to which a method is bound, or ``None``"
msgstr ""

#: ../../library/inspect.rst:217
msgid "Note:"
msgstr ""

#: ../../library/inspect.rst:220
msgid ":attr:`im_class` used to refer to the class that defined the method."
msgstr ""

#: ../../library/inspect.rst:226
msgid "Return all the members of an object in a list of (name, value) pairs sorted by name.  If the optional *predicate* argument is supplied, only members for which the predicate returns a true value are included."
msgstr ""

#: ../../library/inspect.rst:232
msgid ":func:`getmembers` does not return metaclass attributes when the argument is a class (this behavior is inherited from the :func:`dir` function)."
msgstr ""

#: ../../library/inspect.rst:238
msgid "Return a tuple of values that describe how Python will interpret the file identified by *path* if it is a module, or ``None`` if it would not be identified as a module.  The return tuple is ``(name, suffix, mode, module_type)``, where *name* is the name of the module without the name of any enclosing package, *suffix* is the trailing part of the file name (which may not be a dot-delimited extension), *mode* is the :func:`open` mode that would be used (``'r'`` or ``'rb'``), and *module_type* is an integer giving the type of the module.  *module_type* will have a value which can be compared to the constants defined in the :mod:`imp` module; see the documentation for that module for more information on module types."
msgstr ""

#: ../../library/inspect.rst:249
msgid "Returns a :term:`named tuple` ``ModuleInfo(name, suffix, mode, module_type)``."
msgstr ""

#: ../../library/inspect.rst:256
msgid "Return the name of the module named by the file *path*, without including the names of enclosing packages.  This uses the same algorithm as the interpreter uses when searching for modules.  If the name cannot be matched according to the interpreter's rules, ``None`` is returned."
msgstr ""

#: ../../library/inspect.rst:264
msgid "Return true if the object is a module."
msgstr ""

#: ../../library/inspect.rst:269
msgid "Return true if the object is a class, whether built-in or created in Python code."
msgstr ""

#: ../../library/inspect.rst:275
msgid "Return true if the object is a bound method written in Python."
msgstr ""

#: ../../library/inspect.rst:280
msgid "Return true if the object is a Python function, which includes functions created by a :term:`lambda` expression."
msgstr ""

#: ../../library/inspect.rst:286
msgid "Return true if the object is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:293
msgid "Return true if the object is a generator."
msgstr ""

#: ../../library/inspect.rst:300
msgid "Return true if the object is a traceback."
msgstr ""

#: ../../library/inspect.rst:305
msgid "Return true if the object is a frame."
msgstr ""

#: ../../library/inspect.rst:310
msgid "Return true if the object is a code."
msgstr ""

#: ../../library/inspect.rst:315
msgid "Return true if the object is a built-in function or a bound built-in method."
msgstr ""

#: ../../library/inspect.rst:320
msgid "Return true if the object is a user-defined or built-in function or method."
msgstr ""

#: ../../library/inspect.rst:325
msgid "Return true if the object is an abstract base class."
msgstr ""

#: ../../library/inspect.rst:332
msgid "Return true if the object is a method descriptor, but not if :func:`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are true."
msgstr ""

#: ../../library/inspect.rst:336
msgid "This is new as of Python 2.2, and, for example, is true of ``int.__add__``. An object passing this test has a :attr:`__get__` attribute but not a :attr:`__set__` attribute, but beyond that the set of attributes varies.  :attr:`__name__` is usually sensible, and :attr:`__doc__` often is."
msgstr ""

#: ../../library/inspect.rst:341
msgid "Methods implemented via descriptors that also pass one of the other tests return false from the :func:`ismethoddescriptor` test, simply because the other tests promise more -- you can, e.g., count on having the :attr:`im_func` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""

#: ../../library/inspect.rst:349
msgid "Return true if the object is a data descriptor."
msgstr ""

#: ../../library/inspect.rst:351
msgid "Data descriptors have both a :attr:`__get__` and a :attr:`__set__` attribute. Examples are properties (defined in Python), getsets, and members.  The latter two are defined in C and there are more specific tests available for those types, which is robust across Python implementations.  Typically, data descriptors will also have :attr:`__name__` and :attr:`__doc__` attributes (properties, getsets, and members have both of these attributes), but this is not guaranteed."
msgstr ""

#: ../../library/inspect.rst:364
msgid "Return true if the object is a getset descriptor."
msgstr ""

#: ../../library/inspect.rst:368
msgid "getsets are attributes defined in extension modules via :c:type:`PyGetSetDef` structures.  For Python implementations without such types, this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:377
msgid "Return true if the object is a member descriptor."
msgstr ""

#: ../../library/inspect.rst:381
msgid "Member descriptors are attributes defined in extension modules via :c:type:`PyMemberDef` structures.  For Python implementations without such types, this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:391
msgid "Retrieving source code"
msgstr ""

#: ../../library/inspect.rst:395
msgid "Get the documentation string for an object, cleaned up with :func:`cleandoc`."
msgstr ""

#: ../../library/inspect.rst:400
msgid "Return in a single string any lines of comments immediately preceding the object's source code (for a class, function, or method), or at the top of the Python source file (if the object is a module)."
msgstr ""

#: ../../library/inspect.rst:407
msgid "Return the name of the (text or binary) file in which an object was defined. This will fail with a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:414
msgid "Try to guess which module an object was defined in."
msgstr ""

#: ../../library/inspect.rst:419
msgid "Return the name of the Python source file in which an object was defined.  This will fail with a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:426
msgid "Return a list of source lines and starting line number for an object. The argument may be a module, class, method, function, traceback, frame, or code object.  The source code is returned as a list of the lines corresponding to the object and the line number indicates where in the original source file the first line of code was found.  An :exc:`IOError` is raised if the source code cannot be retrieved."
msgstr ""

#: ../../library/inspect.rst:436
msgid "Return the text of the source code for an object. The argument may be a module, class, method, function, traceback, frame, or code object.  The source code is returned as a single string.  An :exc:`IOError` is raised if the source code cannot be retrieved."
msgstr ""

#: ../../library/inspect.rst:444
msgid "Clean up indentation from docstrings that are indented to line up with blocks of code.  Any whitespace that can be uniformly removed from the second line onwards is removed.  Also, all tabs are expanded to spaces."
msgstr ""

#: ../../library/inspect.rst:454
msgid "Classes and functions"
msgstr ""

#: ../../library/inspect.rst:459
msgid "Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list.  Each entry is a 2-tuple containing a class and a tuple of its base classes.  If the *unique* argument is true, exactly one entry appears in the returned structure for each class in the given list.  Otherwise, classes using multiple inheritance and their descendants will appear multiple times."
msgstr ""

#: ../../library/inspect.rst:470
msgid "Get the names and default values of a Python function's arguments. A tuple of four things is returned: ``(args, varargs, keywords, defaults)``. *args* is a list of the argument names (it may contain nested lists). *varargs* and *keywords* are the names of the ``*`` and ``**`` arguments or ``None``. *defaults* is a tuple of default argument values or None if there are no default arguments; if this tuple has *n* elements, they correspond to the last *n* elements listed in *args*."
msgstr ""

#: ../../library/inspect.rst:478
msgid "Returns a :term:`named tuple` ``ArgSpec(args, varargs, keywords, defaults)``."
msgstr ""

#: ../../library/inspect.rst:485
msgid "Get information about arguments passed into a particular frame. A tuple of four things is returned: ``(args, varargs, keywords, locals)``. *args* is a list of the argument names (it may contain nested lists). *varargs* and *keywords* are the names of the ``*`` and ``**`` arguments or ``None``. *locals* is the locals dictionary of the given frame."
msgstr ""

#: ../../library/inspect.rst:491
msgid "Returns a :term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)``."
msgstr ""

#: ../../library/inspect.rst:498
msgid "Format a pretty argument spec from the four values returned by :func:`getargspec`.  The format\\* arguments are the corresponding optional formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../../library/inspect.rst:505
msgid "Format a pretty argument spec from the four values returned by :func:`getargvalues`.  The format\\* arguments are the corresponding optional formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../../library/inspect.rst:512
msgid "Return a tuple of class cls's base classes, including cls, in method resolution order.  No class appears more than once in this tuple. Note that the method resolution order depends on cls's type.  Unless a very peculiar user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""

#: ../../library/inspect.rst:520
msgid "Bind the *args* and *kwds* to the argument names of the Python function or method *func*, as if it was called with them. For bound methods, bind also the first argument (typically named ``self``) to the associated instance. A dict is returned, mapping the argument names (including the names of the ``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. In case of invoking *func* incorrectly, i.e. whenever ``func(*args, **kwds)`` would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example::"
msgstr ""

#: ../../library/inspect.rst:547
msgid "The interpreter stack"
msgstr ""

#: ../../library/inspect.rst:549
msgid "When the following functions return \"frame records,\" each record is a tuple of six items: the frame object, the filename, the line number of the current line, the function name, a list of lines of context from the source code, and the index of the current line within that list."
msgstr ""

#: ../../library/inspect.rst:556
msgid "Keeping references to frame objects, as found in the first element of the frame records these functions return, can cause your program to create reference cycles.  Once a reference cycle has been created, the lifespan of all objects which can be accessed from the objects which form the cycle can become much longer even if Python's optional cycle detector is enabled.  If such cycles must be created, it is important to ensure they are explicitly broken to avoid the delayed destruction of objects and increased memory consumption which occurs."
msgstr ""

#: ../../library/inspect.rst:564
msgid "Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a :keyword:`finally` clause.  This is also important if the cycle detector was disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""

#: ../../library/inspect.rst:576
msgid "The optional *context* argument supported by most of these functions specifies the number of lines of context to return, which are centered around the current line."
msgstr ""

#: ../../library/inspect.rst:583
msgid "Get information about a frame or traceback object.  A 5-tuple is returned, the last five elements of the frame's frame record."
msgstr ""

#: ../../library/inspect.rst:586
msgid "Returns a :term:`named tuple` ``Traceback(filename, lineno, function, code_context, index)``."
msgstr ""

#: ../../library/inspect.rst:593
msgid "Get a list of frame records for a frame and all outer frames.  These frames represent the calls that lead to the creation of *frame*. The first entry in the returned list represents *frame*; the last entry represents the outermost call on *frame*'s stack."
msgstr ""

#: ../../library/inspect.rst:601
msgid "Get a list of frame records for a traceback's frame and all inner frames.  These frames represent calls made as a consequence of *frame*.  The first entry in the list represents *traceback*; the last entry represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:609
msgid "Return the frame object for the caller's stack frame."
msgstr ""

#: ../../library/inspect.rst:613
msgid "This function relies on Python stack frame support in the interpreter, which isn't guaranteed to exist in all implementations of Python.  If running in an implementation without Python stack frame support this function returns ``None``."
msgstr ""

#: ../../library/inspect.rst:621
msgid "Return a list of frame records for the caller's stack.  The first entry in the returned list represents the caller; the last entry represents the outermost call on the stack."
msgstr ""

#: ../../library/inspect.rst:628
msgid "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in.  The first entry in the list represents the caller; the last entry represents where the exception was raised."
msgstr ""

