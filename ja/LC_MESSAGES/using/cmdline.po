# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2015-2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-01 17:54+0900\n"
"PO-Revision-Date: 2016-10-10 12:02+0000\n"
"Last-Translator: 秘湯 <xwhhsprings@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr "コマンドラインと環境"

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr "CPython インタプリタはコマンドラインと環境を読み取って様々な設定を行ないます。"

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See "
":ref:`implementations` for further resources."
msgstr "他の実装のコマンドラインスキームは CPython とは異なります。さらなる情報は :ref:`implementations` を参照してください。"

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr "コマンドライン"

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr "Python を起動するとき、以下のうち任意のオプションを指定できます::"

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr "もちろん、もっとも一般的な利用方法は、単純にスクリプトを起動することです::"

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr "インターフェイスオプション"

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr "インタプリタのインターフェイスは UNIX シェルのものに似ていますが、より多くの起動方法を提供しています:"

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr "tty デバイスに接続された標準入力とともに起動された場合、 EOF (end-of-file 文字。 UNIX では :kbd:`Ctrl-D` で、Windows では :kbd:`Ctrl-Z, Enter` で入力可能) を受け取るまで、コマンドを受け取り、それを実行します。"

#: ../../using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr "ファイル名引数か、標準入力としてファイルを渡された場合、そのファイルからスクリプトを読み込んで実行します。"

#: ../../using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr "ディレクトリ名を引数に受け取った場合、そのディレクトリから適切な名前のスクリプトファイルを読み込んで実行します。"

#: ../../using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr "``-c コマンド`` オプションを利用して起動された場合、 *コマンド* として渡された Python の文を実行します。 *コマンド* の部分には改行で区切られた複数行を指定することもできます。行の先頭の空白文字は Python 文の重要要素です！"

#: ../../using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr "``-m モジュール名`` として Python モジュールパスにあるモジュールを指定された場合、そのモジュールをスクリプトとして実行します。"

#: ../../using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr "非インタラクティブモードでは、入力の全体が実行前にパースされます。"

#: ../../using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr "インタプリタによって消費されるオプションリストが終了したあと、継続する全ての引数は :data:`sys.argv` に渡ります。 -- ただし、添字 0 の先頭要素(``sys.argv[0]``) はプログラムのソース自体を示す文字列です。"

#: ../../using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr "*command* 内の Python コードを実行します。 *command* は改行によって区切られた1行以上の文です。通常のモジュールのコードと同じく、行頭の空白文字は意味を持ちます。"

#: ../../using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-c\"`` and the current directory will be added to the start of "
":data:`sys.path` (allowing modules in that directory to be imported as top "
"level modules)."
msgstr "このオプションが指定された場合、 :data:`sys.argv` の最初の要素は ``\"-c\"`` になり、カレントディレクトリが :data:`sys.path` の先頭に追加されます (そのディレクトリにあるモジュールをトップレベルモジュールとして import 出来るようになります)。"

#: ../../using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as the"
" :mod:`__main__` module."
msgstr ":data:`sys.path` から指定されたモジュール名のモジュールを探し、その内容を :mod:`__main__` モジュールとして実行します。"

#: ../../using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The ``module-name`` should be a valid Python module name, but "
"the implementation may not always enforce this (e.g. it may allow you to use"
" a name that includes a hyphen)."
msgstr "引数は *module* 名なので、拡張子 (``.py``) を含めてはいけません。 ``module-name`` は有効な Python のモジュール名であるべきですが、実装がそれを強制しているとは限りません (例えば、ハイフンを名前に含める事を許可するかもしれません)。"

#: ../../using/cmdline.rst:84
msgid ""
"Package names are also permitted. When a package name is supplied instead of"
" a normal module, the interpreter will execute ``<pkg>.__main__`` as the "
"main module. This behaviour is deliberately similar to the handling of "
"directories and zipfiles that are passed to the interpreter as the script "
"argument."
msgstr "パッケージ名を指定することもできます。通常のモジュールの代わりにパッケージ名を指定された場合、インタープリタは ``<pkg>.__main__`` をメインモジュールとして実行します。この動作はインタープリタのスクリプト引数としてディレクトリやzipファイルを指定された時の動作と意図的に似せています。"

#: ../../using/cmdline.rst:92
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr "このオプションはビルトインモジュールや C で書かれた拡張モジュールには利用できません。 Python モジュールファイルを持っていないからです。しかし、コンパイル済みのモジュールは、たとえ元のソースファイルがなくても利用可能です。"

#: ../../using/cmdline.rst:97
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file. As with the :option:`-c` option, the current "
"directory will be added to the start of :data:`sys.path`."
msgstr "このオプションが指定された場合、 :data:`sys.argv` の先頭要素はモジュールファイルのフルパスになります。 :option:`-c` オプションのように、カレントディレクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:101
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr "多くの標準ライブラリモジュールにはスクリプトとして実行された時のためのコードがあります。例えば、 :mod:`timeit` モジュールは次のように実行可能です::"

#: ../../using/cmdline.rst:109
msgid "runpy.run_module()"
msgstr "runpy.run_module()"

#: ../../using/cmdline.rst:109 ../../using/cmdline.rst:135
msgid "Equivalent functionality directly available to Python code"
msgstr "Python コードで直接使える等価な機能"

#: ../../using/cmdline.rst:111
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` - モジュールをスクリプトとして実行する"

#: ../../using/cmdline.rst:115
msgid "The named module can now be located inside a package."
msgstr "パッケージ内のモジュールを指定できるようになりました。"

#: ../../using/cmdline.rst:118
msgid ""
"Supply the package name to run a ``__main__`` submodule. sys.argv[0] is now "
"set to ``\"-m\"`` while searching for the module (it was previously "
"incorrectly set to ``\"-c\"``)"
msgstr "パッケージ名を指定したときに ``__main__`` サブモジュールを実行するようにしました。そのモジュールを検索している間の sys.argv[0] は ``\"-m\"`` に設定されるようになりました。 (以前は間違って ``\"-c\"`` が設定されていました)"

#: ../../using/cmdline.rst:126
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is"
" a terminal, :option:`-i` is implied."
msgstr "標準入力 (:data:`sys.stdin`) からコマンドを読み込みます。標準入力がターミナルだった場合、暗黙的に :option:`-i` オプションが指定されます。"

#: ../../using/cmdline.rst:129
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-\"`` and the current directory will be added to the start of "
":data:`sys.path`."
msgstr "このオプションが指定された場合、 :data:`sys.argv` の最初の要素は ``\"-\"`` で、カレントディレクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:134
msgid "runpy.run_path()"
msgstr "runpy.run_path()"

#: ../../using/cmdline.rst:140
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py``"
" file."
msgstr "*script* 内の Python コードを実行します。 *script* は、Python ファイル、 ``__main__.py`` ファイルがあるディレクトリ、 ``__main__.py`` ファイルがある zip ファイルのいずれかの、ファイルシステム上の (絶対または相対) パスでなければなりません。"

#: ../../using/cmdline.rst:145
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr "このオプションが指定された場合、 :data:`sys.argv` の最初の要素はコマンドラインで指定されたスクリプト名になります。"

#: ../../using/cmdline.rst:148
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file"
" is executed as the :mod:`__main__` module."
msgstr "スクリプト名が Python ファイルを直接指定していた場合、そのファイルを含むディレクトリが :data:`sys.path` の先頭に追加され、そのファイルは :mod:`__main__` モジュールとして実行されます。"

#: ../../using/cmdline.rst:152
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr "スクリプト名がディレクトリか zip ファイルを指定していた場合、スクリプト名が :data:`sys.path` に追加され、その中の ``__main__.py`` ファイルが :mod:`__main__` モジュールとして実行されます。"

#: ../../using/cmdline.rst:156
msgid ""
"Directories and zipfiles containing a ``__main__.py`` file at the top level "
"are now considered valid Python scripts."
msgstr "トップレベルに ``__main__.py`` ファイルを持つディレクトリや zip ファイルが有効な Python スクリプトとなりました。"

#: ../../using/cmdline.rst:160
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is"
" an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`."
msgstr "インターフェイスオプションが与えられなかった場合、 :option:`-i` が暗黙的に指定され、 ``sys.argv[0]`` は空白文字列 (``\"\"``)で、カレントディレクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:164
msgid ":ref:`tut-invoking`"
msgstr ":ref:`tut-invoking`"

#: ../../using/cmdline.rst:168
msgid "Generic options"
msgstr "一般オプション"

#: ../../using/cmdline.rst:174
msgid "Print a short description of all command line options."
msgstr "全コマンドラインオプションの短い説明を出力します。"

#: ../../using/cmdline.rst:176
msgid "The ``--help`` variant."
msgstr "``--help`` 形式"

#: ../../using/cmdline.rst:183
msgid "Print the Python version number and exit.  Example output could be::"
msgstr "Python のバージョン番号を表示して終了します。出力の例::"

#: ../../using/cmdline.rst:187
msgid "The ``--version`` variant."
msgstr "``--version`` 形式"

#: ../../using/cmdline.rst:192
msgid "Miscellaneous options"
msgstr "その他のオプション"

#: ../../using/cmdline.rst:196
msgid ""
"If given, Python won't try to write ``.pyc`` or ``.pyo`` files on the import"
" of source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr "Python は import したソースモジュールの ``.pyc`` や ``.pyo`` ファイルの作成を試みません。 :envvar:`PYTHONDONTWRITEBYTECODE` 環境変数も参照してください。"

#: ../../using/cmdline.rst:204
msgid ""
"Turn on parser debugging output (for wizards only, depending on compilation "
"options).  See also :envvar:`PYTHONDEBUG`."
msgstr "パーサーのデバッグ出力を有効にします。(呪文を解する人だけ使ってください。コンパイルオプションに依存します)。 :envvar:`PYTHONDEBUG` も参照してください。"

#: ../../using/cmdline.rst:210
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. "
":envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr "全ての :envvar:`PYTHON*` 環境変数を無視します。例えば、 :envvar:`PYTHONPATH` や :envvar:`PYTHONHOME` などです。"

#: ../../using/cmdline.rst:218
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even"
" when :data:`sys.stdin` does not appear to be a terminal.  The "
":envvar:`PYTHONSTARTUP` file is not read."
msgstr "最初の引数にスクリプトが指定された場合や :option:`-c` オプションが利用された場合、 :data:`sys.stdin` がターミナルに出力されない場合も含めて、スクリプトかコマンドを実行した後にインタラクティブモードに入ります。 :envvar:`PYTHONSTARTUP` ファイルは読み込みません。"

#: ../../using/cmdline.rst:223
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr "このオプションはグローバル変数や、スクリプトが例外を発生させるときにそのスタックトレースを調べるのに便利です。 :envvar:`PYTHONINSPECT` も参照してください。"

#: ../../using/cmdline.rst:229
msgid ""
"Turn on basic optimizations.  This changes the filename extension for "
"compiled (:term:`bytecode`) files from ``.pyc`` to ``.pyo``.  See also "
":envvar:`PYTHONOPTIMIZE`."
msgstr "基本的な最適化を有効にします。コンパイル済み (:term:`bytecode`) ファイルの拡張子を ``.pyc`` から ``.pyo`` に変更します。 :envvar:`PYTHONOPTIMIZE` も参照してください。"

#: ../../using/cmdline.rst:236
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ":option:`-O` の最適化に加えて、ドキュメンテーション文字列の除去も行ないます。"

#: ../../using/cmdline.rst:241
msgid "Division control. The argument must be one of the following:"
msgstr "除算制御。引数は以下のうち1つでなければなりません:"

#: ../../using/cmdline.rst:243
msgid "old"
msgstr "old"

#: ../../using/cmdline.rst:244
msgid "division of int/int and long/long return an int or long (*default*)"
msgstr "int/int と long/long の除算は、 int か long を返します。 (*デフォルト*)"

#: ../../using/cmdline.rst:246
msgid "new"
msgstr "new"

#: ../../using/cmdline.rst:246
msgid ""
"new division semantics, i.e. division of int/int and long/long returns a "
"float"
msgstr "新しい除算方式。 int/int や long/long の除算が float を返します。"

#: ../../using/cmdline.rst:248
msgid "warn"
msgstr "warn"

#: ../../using/cmdline.rst:249
msgid "old division semantics with a warning for int/int and long/long"
msgstr "古い除算方式で、 int/int や long/long 除算に警告を表示します。"

#: ../../using/cmdline.rst:251
msgid "warnall"
msgstr "warnall"

#: ../../using/cmdline.rst:251
msgid ""
"old division semantics with a warning for all uses of the division operator"
msgstr "古い除算方式で、全ての除算演算子に対して警告を表示します。"

#: ../../using/cmdline.rst:255
msgid "Tools/scripts/fixdiv.py"
msgstr ":file:`Tools/scripts/fixdiv.py`"

#: ../../using/cmdline.rst:255
msgid "for a use of ``warnall``"
msgstr "``warnall`` を使っています."

#: ../../using/cmdline.rst:257
msgid ":pep:`238` -- Changing the division operator"
msgstr ":pep:`238` -- Changing the division operator"

#: ../../using/cmdline.rst:262
msgid ""
"Turn on hash randomization, so that the :meth:`__hash__` values of str, "
"bytes and datetime objects are \"salted\" with an unpredictable random "
"value. Although they remain constant within an individual Python process, "
"they are not predictable between repeated invocations of Python."
msgstr "ハッシュのランダム化をします。文字列、バイト列、datetime オブジェクトの :meth:`__hash__` 値は予測不可能なランダム値で \"ソルト化\" されます。 ハッシュ値は単独の Python プロセス内では定数であり続けますが、Python を繰り返し起動する毎に、予測できなくなります。"

#: ../../using/cmdline.rst:267
msgid ""
"This is intended to provide protection against a denial-of-service caused by"
" carefully-chosen inputs that exploit the worst case performance of a dict "
"construction, O(n^2) complexity.  See "
"http://www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr "これは、慎重に選ばれた入力で辞書挿入の最悪性能 O(n^2) 複雑性を悪用することで引き起こされるサービス妨害 (denial-of-service) に対する保護を目的とするものです。詳細は http://www.ocert.org/advisories/ocert-2011-003.html を参照してください。"

#: ../../using/cmdline.rst:272
msgid ""
"Changing hash values affects the order in which keys are retrieved from a "
"dict.  Although Python has never made guarantees about this ordering (and it"
" typically varies between 32-bit and 64-bit builds), enough real-world code "
"implicitly relies on this non-guaranteed behavior that the randomization is "
"disabled by default."
msgstr "ハッシュ値の変更は辞書からキーを取り出す順序に影響します。  Python はこの順序付けを保証していませんが (そして通常 32-bit と 64-bit の間でも異なります)、たくさんの実世界でのコードが、ランダム化がデフォルトで無効というこの保障されない振る舞いに、暗黙で依存しています。"

#: ../../using/cmdline.rst:278
msgid "See also :envvar:`PYTHONHASHSEED`."
msgstr ":envvar:`PYTHONHASHSEED` も参照してください。"

#: ../../using/cmdline.rst:285
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to "
":data:`sys.path`."
msgstr ":data:`user site-packages directory <site.USER_SITE>` を :data:`sys.path` に追加しません。"

#: ../../using/cmdline.rst:292 ../../using/cmdline.rst:586
#: ../../using/cmdline.rst:600
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` -- Per user site-packages directory"

#: ../../using/cmdline.rst:297
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails."
msgstr ":mod:`site` モジュールのインポートを無効にし、そのモジュールで行われている場所独自の :data:`sys.path` 操作を無効にします。"

#: ../../using/cmdline.rst:303
msgid ""
"Issue a warning when a source file mixes tabs and spaces for indentation in "
"a way that makes it depend on the worth of a tab expressed in spaces.  Issue"
" an error when the option is given twice (:option:`-tt`)."
msgstr "ソースファイルが、タブ幅に依存して意味が変わるような方法でタブ文字とスペースを混ぜて含んでいる場合に警告を発生させます。このオプションを2重にする (:option:`-tt`) とエラーになります。"

#: ../../using/cmdline.rst:310
msgid ""
"Force stdin, stdout and stderr to be totally unbuffered.  On systems where "
"it matters, also put stdin, stdout and stderr in binary mode."
msgstr "stdin, stdout, stderr のバッファを強制的に無効にします。関係するシステムでは、 stdin, stdout, stderr をバイナリモードにします。"

#: ../../using/cmdline.rst:313
msgid ""
"Note that there is internal buffering in :meth:`file.readlines` and :ref"
":`bltin-file-objects` (``for line in sys.stdin``) which is not influenced by"
" this option.  To work around this, you will want to use "
":meth:`file.readline` inside a ``while 1:`` loop."
msgstr ":meth:`file.readlines` や :ref:`bltin-file-objects` (``for line in sys.stdin``) はこのオプションに影響されない内部バッファリングをしています。これを回避したい場合は、 ``while 1:`` ループの中で :meth:`file.readline` します。"

#: ../../using/cmdline.rst:318
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ":envvar:`PYTHONUNBUFFERED` も参照してください。"

#: ../../using/cmdline.rst:323
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice "
"(:option:`-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr "モジュールが初期化されるたびに、それがどこ(ファイル名やビルトインモジュール) からロードされたのかを示すメッセージを出力します。 二重に指定された場合(:option:`-vv`)は、モジュールを検索するときにチェックされた各ファイルに対してメッセージを出力します。また、終了時のモジュールクリーンアップに関する情報も提供します。 :envvar:`PYTHONVERBOSE` も参照してください。"

#: ../../using/cmdline.rst:332
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the following"
" form::"
msgstr "警告制御。 Python の警告機構はデフォルトでは警告メッセージを :data:`sys.stderr` に出力します。典型的な警告メッセージは次のような形式です::"

#: ../../using/cmdline.rst:338
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr "デフォルトでは、各警告は発生したソース行ごとに一度だけ表示されます。このオプションは、警告をどれくらいの頻度で表示するかを制御します。"

#: ../../using/cmdline.rst:341
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more than"
" one option, the action for the last matching option is performed.  Invalid "
":option:`-W` options are ignored (though, a warning message is printed about"
" invalid options when the first warning is issued)."
msgstr "複数の :option:`-W` オプションを指定することができます。警告が1つ以上のオプションとマッチしたときは、最後にマッチしたオプションのアクションが有効になります。不正な :option:`-W` オプションは無視されます (最初の警告が発生したときに、不正なオプションに対する警告メッセージが表示されます)。"

#: ../../using/cmdline.rst:346
msgid ""
"Starting from Python 2.7, :exc:`DeprecationWarning` and its descendants are "
"ignored by default.  The :option:`-Wd` option can be used to re-enable them."
msgstr "Python 2.7 から、 :exc:`DeprecationWarning` とその子クラスはデフォルトで無視されます。 :option:`-Wd` オプションを指定して有効にすることができます。"

#: ../../using/cmdline.rst:350
msgid ""
"Warnings can also be controlled from within a Python program using the "
":mod:`warnings` module."
msgstr "警告は Python プログラムの中から :mod:`warnings` モジュールを利用して制御することができます。"

#: ../../using/cmdline.rst:353
msgid ""
"The simplest form of argument is one of the following action strings (or a "
"unique abbreviation) by themselves:"
msgstr "引数の一番シンプルな形は、以下のアクション文字列(かそのユニークな短縮形) を単体で利用するものです。"

#: ../../using/cmdline.rst:356
msgid "ignore"
msgstr "ignore"

#: ../../using/cmdline.rst:357
msgid "Ignore all warnings."
msgstr "全ての警告を無視する。"

#: ../../using/cmdline.rst:359
msgid "default"
msgstr "デフォルト値"

#: ../../using/cmdline.rst:359
msgid ""
"Explicitly request the default behavior (printing each warning once per "
"source line)."
msgstr "明示的にデフォルトの動作(ソース行ごとに1度警告を表示する)を要求する。"

#: ../../using/cmdline.rst:363
msgid "all"
msgstr "all"

#: ../../using/cmdline.rst:362
msgid ""
"Print a warning each time it occurs (this may generate many messages if a "
"warning is triggered repeatedly for the same source line, such as inside a "
"loop)."
msgstr "警告が発生するたびに表示する (これは、ループの中などで同じソース行により繰り返し警告が発生された場合に、大量のメッセージを表示します)。"

#: ../../using/cmdline.rst:365
msgid "module"
msgstr "モジュール"

#: ../../using/cmdline.rst:366
msgid "Print each warning only the first time it occurs in each module."
msgstr "各モジュールで最初に発生した警告を表示する。"

#: ../../using/cmdline.rst:367
msgid "once"
msgstr "once"

#: ../../using/cmdline.rst:368
msgid "Print each warning only the first time it occurs in the program."
msgstr "プログラムで最初に発生した警告だけを表示する。"

#: ../../using/cmdline.rst:370
msgid "error"
msgstr "error"

#: ../../using/cmdline.rst:370
msgid "Raise an exception instead of printing a warning message."
msgstr "警告メッセージを表示する代わりに例外を発生させる。"

#: ../../using/cmdline.rst:372
msgid "The full form of argument is::"
msgstr "引数の完全形は次のようになります::"

#: ../../using/cmdline.rst:376
msgid ""
"Here, *action* is as explained above but only applies to messages that match"
" the remaining fields.  Empty fields match all values; trailing empty fields"
" may be omitted.  The *message* field matches the start of the warning "
"message printed; this match is case-insensitive.  The *category* field "
"matches the warning category.  This must be a class name; the match tests "
"whether the actual warning category of the message is a subclass of the "
"specified warning category.  The full class name must be given.  The "
"*module* field matches the (fully-qualified) module name; this match is "
"case-sensitive.  The *line* field matches the line number, where zero "
"matches all line numbers and is thus equivalent to an omitted line number."
msgstr "ここで、 *action* は上で説明されたものですが、残りのフィールドにマッチしたメッセージにだけ適用されます。空のフィールドは全ての値にマッチします。空のフィールドの後ろは除外されます。 *message* フィールドは表示される警告メッセージの先頭に、大文字小文字を無視してマッチします。 *category* フィールドは警告カテゴリにマッチします。これはクラス名でなければなりません。 *category* のマッチは、メッセージの実際の警告カテゴリーが指定された警告カテゴリーのサブクラスかどうかをチェックします。完全なクラス名を指定しなければなりません。 *module* フィールドは、(完全正規形(fully-qualified)の) モジュール名に対してマッチします。このマッチは大文字小文字を区別します。 *line* フィールドは行番号にマッチします。 0 は全ての行番号にマッチし、省略した時と同じです。"

#: ../../using/cmdline.rst:388
msgid ":mod:`warnings` -- the warnings module"
msgstr ":mod:`warnings` -- 警告モジュール"

#: ../../using/cmdline.rst:390
msgid ":pep:`230` -- Warning framework"
msgstr ":pep:`230` -- Warning framework"

#: ../../using/cmdline.rst:392
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ":envvar:`PYTHONWARNINGS`"

#: ../../using/cmdline.rst:397
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of "
"``#!cmd``.  This is intended for a DOS specific hack only."
msgstr "Unix 以外の形式の ``#!cmd`` を使うために、ソースの最初の行をスキップします。これは、DOS専用のハックのみを目的としています。"

#: ../../using/cmdline.rst:400
msgid "The line numbers in error messages will be off by one."
msgstr "エラーメッセージ内の行番号は -1 されます。"

#: ../../using/cmdline.rst:404
msgid ""
"Warn about Python 3.x possible incompatibilities by emitting a "
":exc:`DeprecationWarning` for features that are removed or significantly "
"changed in Python 3."
msgstr "Python 3 で削除されたか大きな変更があった機能についての潜在的 Python 3.x 非互換についての警告 :exc:`DeprecationWarning`  を発生させます。"

#: ../../using/cmdline.rst:411
msgid "Options you shouldn't use"
msgstr "使うべきでないオプション"

#: ../../using/cmdline.rst:415
msgid "Reserved for use by Jython_."
msgstr "Jython_ のために予約されています。"

#: ../../using/cmdline.rst:421
msgid ""
"Turns all string literals into unicodes globally.  Do not be tempted to use "
"this option as it will probably break your world.  It also produces ``.pyc``"
" files with a different magic number than normal.  Instead, you can enable "
"unicode literals on a per-module basis by using::"
msgstr "全ての文字列リテラルを、全部 unicode にします。このオプションはあなたの世界を破壊してしまうかもしれないので、このオプションを使おうとしないでください。これは、通常とは違うマジックナンバーを使って ``.pyc`` ファイルを生成します。ファイルの先頭に次のように書いて、このオプションの代わりにモジュール単位で unicode リテラルを有効にできます。 ::"

#: ../../using/cmdline.rst:428
msgid "at the top of the file.  See :mod:`__future__` for details."
msgstr "詳細は :mod:`__future__` を参照してください。"

#: ../../using/cmdline.rst:432
msgid ""
"Reserved for alternative implementations of Python to use for their own "
"purposes."
msgstr "別の Python の実装が独自の目的で利用するために予約されています。"

#: ../../using/cmdline.rst:438
msgid "Environment variables"
msgstr "環境変数"

#: ../../using/cmdline.rst:440
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr "以下の環境変数は Python の挙動に影響します。環境変数は -E 以外のコマンドラインスイッチの前に処理されます。衝突したときにコマンドラインスイッチが環境変数をオーバーライドするのは慣例です。"

#: ../../using/cmdline.rst:447
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and "
":file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and "
":file:`{exec_prefix}` are installation-dependent directories, both "
"defaulting to :file:`/usr/local`."
msgstr "標準 Python ライブラリの場所を変更します。デフォルトでは、ライブラリは :file:`{prefix}/lib/python{version}` と :file:`{exec_prefix}/lib/python{version}` から検索されます。ここで、 :file:`{prefix}` と :file:`{exec_prefix}` はインストール依存のディレクトリで、両方共デフォルトでは :file:`/usr/local` です。"

#: ../../using/cmdline.rst:453
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to "
":file:`{prefix}:{exec_prefix}`."
msgstr ":envvar:`PYTHONHOME` が1つのディレクトリに設定されている場合、その値は :file:`{prefix}` と :file:`{exec_prefix}` の両方を置き換えます。それらに別々の値を指定したい場合は、 :envvar:`PYTHONHOME` を :file:`{prefix}:{exec_prefix}` のように指定します。"

#: ../../using/cmdline.rst:460
msgid ""
"Augment the default search path for module files.  The format is the same as"
" the shell's :envvar:`PATH`: one or more directory pathnames separated by "
":data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr "モジュールファイルのデフォルトの検索パスを追加します。この環境変数のフォーマットはシェルの :envvar:`PATH` と同じで、 :data:`os.pathsep` (Unix ならコロン、 Windows ならセミコロン) で区切られた1つ以上のディレクトリパスです。存在しないディレクトリは警告なしに無視されます。"

#: ../../using/cmdline.rst:465
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr "通常のディレクトリに加えて、 :envvar:`PYTHONPATH` のエントリはピュアPython モジュール(ソース形式でもコンパイルされた形式でも) を含む zip ファイルを参照することもできます。拡張モジュールは zip ファイルの中から import することはできません。"

#: ../../using/cmdline.rst:469
msgid ""
"The default search path is installation dependent, but generally begins with"
" :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  It "
"is *always* appended to :envvar:`PYTHONPATH`."
msgstr "デフォルトの検索パスはインストール依存ですが、通常は :file:`{prefix}/lib/python{version}` で始まります。 (上の :envvar:`PYTHONHOME` を参照してください。) これは *常に* :envvar:`PYTHONPATH` に追加されます。"

#: ../../using/cmdline.rst:473
msgid ""
"An additional directory will be inserted in the search path in front of "
":envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as"
" the variable :data:`sys.path`."
msgstr "上の :ref:`using-on-interface-options` で説明されているように、追加の検索パスディレクトリが :envvar:`PYTHONPATH` の手前に追加されます。検索パスは Python プログラムから :data:`sys.path` 変数として操作することができます。"

#: ../../using/cmdline.rst:481
msgid ""
"If this is the name of a readable file, the Python commands in that file are"
" executed before the first prompt is displayed in interactive mode.  The "
"file is executed in the same namespace where interactive commands are "
"executed so that objects defined or imported in it can be used without "
"qualification in the interactive session.  You can also change the prompts "
":data:`sys.ps1` and :data:`sys.ps2` in this file."
msgstr "もし読込み可能ファイルの名前であれば、インタラクティブモードで最初のプロンプトを表示する前にそのファイル内の Python コマンドを実行します。このファイルはインタラクティブコマンドが実行されるのと同じ名前空間の中で実行されるので、このファイル内で定義されたり import されたオブジェクトはインタラクティブセッションから制限無しに利用することができます。このファイルで :data:`sys.ps1` と :data:`sys.ps2` を変更してプロンプトを変更することもできます。"

#: ../../using/cmdline.rst:491
msgid ""
"Set this to a non-empty string to cause the :mod:`time` module to require "
"dates specified as strings to include 4-digit years, otherwise 2-digit years"
" are converted based on rules described in the :mod:`time` module "
"documentation."
msgstr "この変数に空でない文字列を設定すると、 :mod:`time` モジュールが文字列で指定される日付に4桁の年を含むことを要求するようになります。そうでなければ、2桁の年は :mod:`time` モジュールのドキュメントに書かれているルールで変換されます。"

#: ../../using/cmdline.rst:499
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-O` option.  If set to an integer, it is equivalent to specifying "
":option:`-O` multiple times."
msgstr "この変数に空でない文字列を設定するのは :option:`-O` オプションを指定するのと等価です。整数を設定した場合、 :option:`-O` を複数回指定したのと同じになります。"

#: ../../using/cmdline.rst:506
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-d` option.  If set to an integer, it is equivalent to specifying "
":option:`-d` multiple times."
msgstr "この変数に空でない文字列を設定するのは :option:`-d` オプションを指定するのと等価です。整数を指定した場合、 :option:`-d` を複数回指定したのと同じになります。"

#: ../../using/cmdline.rst:513
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-i` option."
msgstr "この変数に空でない文字列を設定するのは :option:`-i` オプションを指定するのと等価です。"

#: ../../using/cmdline.rst:516
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr "この変数は Python コードから :data:`os.environ` を使って変更して、プログラム終了時のインスペクトモードを強制することができます。"

#: ../../using/cmdline.rst:522
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-u` option."
msgstr "この変数に空でない文字列を設定するのは :option:`-u` オプションを指定するのと等価です。"

#: ../../using/cmdline.rst:528
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-v` option.  If set to an integer, it is equivalent to specifying "
":option:`-v` multiple times."
msgstr "この変数に空でない文字列を設定するのは :option:`-v` オプションを指定するのと等価です。整数を設定した場合、 :option:`-v` を複数回指定したのと同じになります。"

#: ../../using/cmdline.rst:535
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows, OS X, OS/2, and RiscOS."
msgstr "この環境変数が設定されていると、 Python は :keyword:`import` 文で大文字/小文字を区別しません。 これは Windows, OS X, OS/2, RiscOS でのみ動作します。"

#: ../../using/cmdline.rst:541
msgid ""
"If this is set, Python won't try to write ``.pyc`` or ``.pyo`` files on the "
"import of source modules.  This is equivalent to specifying the :option:`-B`"
" option."
msgstr "この環境変数が設定されていると、 Python はソースモジュールの import 時に ``.pyc``, ``.pyo`` ファイルを生成しません。これは :option:`-B` オプションを指定したのと等価です。"

#: ../../using/cmdline.rst:549
msgid ""
"If this variable is set to ``random``, the effect is the same as specifying "
"the :option:`-R` option: a random value is used to seed the hashes of str, "
"bytes and datetime objects."
msgstr "この変数が ``random`` に設定された場合  :option:`-R` を指定するのと同じ効果が得られます: 乱数値が str、bytes ならびに datetime オブジェクトのハッシュのシードに使われます。"

#: ../../using/cmdline.rst:553
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ":envvar:`PYTHONHASHSEED` が整数値に設定された場合、その値はハッシュランダム化が扱う型の hash() 生成の固定シードに使われます。"

#: ../../using/cmdline.rst:557
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr "その目的は再現性のあるハッシュを可能にすることです。例えばインタープリタ自身の自己テストや Python プロセスのクラスタでハッシュ値を共有するのに用います。"

#: ../../using/cmdline.rst:561
msgid ""
"The integer must be a decimal number in the range [0,4294967295]. Specifying"
" the value 0 will lead to the same hash values as when hash randomization is"
" disabled."
msgstr "整数は [0,4294967295] の十進数でなければなりません。0 を指定するとハッシュはハッシュランダム化を無効にしたのと同じ値になります。"

#: ../../using/cmdline.rst:570
msgid ""
"Overrides the encoding used for stdin/stdout/stderr, in the syntax "
"``encodingname:errorhandler``.  The ``:errorhandler`` part is optional and "
"has the same meaning as in :func:`str.encode`."
msgstr "stdin/stdout/stderr のエンコーディングを強制します。シンタックスは ``encodingname:errorhandler`` です。 ``:errorhandler`` の部分はオプションで、 :func:`str.encode` の引数と同じ意味です。"

#: ../../using/cmdline.rst:579
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr "この環境変数が設定されている場合、 Python は :data:`ユーザ site-packages ディレクトリ <site.USER_SITE>` を :data:`sys.path` に追加しません。"

#: ../../using/cmdline.rst:591
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory "
"<site.USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-"
"user>` for ``python setup.py install --user``."
msgstr ":data:`user base directory <site.USER_BASE>` を設定します。これは ``python setup.py install --user`` 時に :data:`user site-packages directory <site.USER_SITE>` と :ref:`Distutils installation paths <inst-alt-install-user>` のパスを計算するのに使われます。 "

#: ../../using/cmdline.rst:605
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac OS "
"X."
msgstr "この環境変数が設定された場合、 ``sys.argv[0]`` に、C ランタイムから取得した値の代わりにこの環境変数の値が設定されます。Mac OS X でのみ動作します。"

#: ../../using/cmdline.rst:611
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times."
msgstr "これは :option:`-W` オプションと等価です。カンマ区切りの文字列を設定するのは :option:`-W` を複数回指定するのと等価です。"

#: ../../using/cmdline.rst:617
msgid "Debug-mode variables"
msgstr "デバッグモード変数"

#: ../../using/cmdline.rst:619
msgid ""
"Setting these variables only has an effect in a debug build of Python, that "
"is, if Python was configured with the ``--with-pydebug`` build option."
msgstr "以下の環境変数は、``--with-pydebug`` ビルドオプションを指定して構成されたデバッグビルド版の Python でのみ効果があります。"

#: ../../using/cmdline.rst:624
msgid "If set, Python will print threading debug info."
msgstr "設定された場合、 Python はスレッドデバッグ情報を表示します。"

#: ../../using/cmdline.rst:626
msgid "Previously, this variable was called ``THREADDEBUG``."
msgstr "以前は、この変数は ``THREADDEBUG`` という名前でした。"

#: ../../using/cmdline.rst:631
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr "設定された場合、 Python はインタプリタのシャットダウン後に残っているオブジェクトとリファレンスカウントをダンプします。"

#: ../../using/cmdline.rst:637
msgid ""
"If set, Python will print memory allocation statistics every time a new "
"object arena is created, and on shutdown."
msgstr "設定された場合、 Python は、新しいオブジェクトアリーナを作成するときと、シャットダウン時に、メモリアロケーション統計情報を表示します。"
