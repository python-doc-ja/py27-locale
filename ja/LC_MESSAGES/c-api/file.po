# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# 
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2017-02-19 15:37+0000\n"
"Last-Translator: cocoatomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "ファイルオブジェクト"

#: ../../c-api/file.rst:10
msgid ""
"Python's built-in file objects are implemented entirely on the "
":c:type:`FILE\\*` support from the C standard library.  This is an "
"implementation detail and may change in future releases of Python."
msgstr "Python の組み込みファイルオブジェクトは、全て標準 C ライブラリの :c:type:`FILE\\*` サポートの上に実装されています。以下の詳細説明は一実装に関するもので、将来の Python のリリースで変更されるかもしれません。"

#: ../../c-api/file.rst:17
msgid "This subtype of :c:type:`PyObject` represents a Python file object."
msgstr "この :c:type:`PyObject` のサブタイプは Python のファイル型オブジェクトを表現します。"

#: ../../c-api/file.rst:24
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python file type.  "
"This is exposed to Python programs as ``file`` and ``types.FileType``."
msgstr "この :c:type:`PyTypeObject` のインスタンスは Python のファイル型を表現します。このオブジェクトは :class:`file` および ``types.FileType`` として Python プログラムで公開されています。"

#: ../../c-api/file.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFileObject` or a subtype of "
":c:type:`PyFileObject`."
msgstr "引数が :c:type:`PyFileObject` か :c:type:`PyFileObject` のサブタイプのときに真を返します。"

#: ../../c-api/file.rst:33
msgid "Allowed subtypes to be accepted."
msgstr "サブタイプを引数にとれるようになりました."

#: ../../c-api/file.rst:39
msgid ""
"Return true if its argument is a :c:type:`PyFileObject`, but not a subtype "
"of :c:type:`PyFileObject`."
msgstr "引数が :c:type:`PyFileObject` 型で、かつ :c:type:`PyFileObject` 型のサブタイプでないときに真を返します。"

#: ../../c-api/file.rst:49
msgid ""
"On success, return a new file object that is opened on the file given by "
"*filename*, with a file mode given by *mode*, where *mode* has the same "
"semantics as the standard C routine :c:func:`fopen`.  On failure, return "
"*NULL*."
msgstr "成功すると、 *filename* に指定した名前のファイルを *mode* に指定したファイルモードで開いて得た新たなファイルオブジェクトを返します。 *mode* のセマンティクスは標準 C ルーチン :c:func:`fopen` と同じです。失敗すると *NULL* を返します。"

#: ../../c-api/file.rst:56
msgid ""
"Create a new :c:type:`PyFileObject` from the already-open standard C file "
"pointer, *fp*.  The function *close* will be called when the file should be "
"closed.  Return *NULL* and close the file using *close* on failure. *close* "
"is optional and can be set to *NULL*."
msgstr "すでに開かれている標準 C ファイルポインタ *fp* から新たな :c:type:`PyFileObject` を生成します。この関数で生成したファイルオブジェクトは、閉じる際に *close* に指定した関数を呼び出します。失敗すると *close* を使ってファイルをクローズし、 *NULL* を返します。 *close* の指定は任意で、 *NULL* にもできます。(---訳注: 失敗時に *close* を呼び出すのは `issue #7732 <http://bugs.python.org/issue7732>`_ に関係した仕様です。今ここで説明している「失敗時」はコードを読む限り PyString_FromString の失敗時だけです、今のところ。 ---)"

#: ../../c-api/file.rst:64
msgid "Return the file object associated with *p* as a :c:type:`FILE\\*`."
msgstr "*p* に関連付けられたファイルオブジェクトを :c:type:`FILE\\*` で返します。"

#: ../../c-api/file.rst:66
msgid ""
"If the caller will ever use the returned :c:type:`FILE\\*` object while the "
":term:`GIL` is released it must also call the :c:func:`PyFile_IncUseCount` "
"and :c:func:`PyFile_DecUseCount` functions described below as appropriate."
msgstr "呼び出し側が :term:`GIL` を解放している間もこの関数が返した :c:type:`FILE\\*` オブジェクトを使うのであれば、以下に解説されている :c:func:`PyFile_IncUseCount` と :c:func:`PyFile_DecUseCount` 関数を適切に呼び出さなければなりません。"

#: ../../c-api/file.rst:73
msgid ""
"Increments the PyFileObject's internal use count to indicate that the "
"underlying :c:type:`FILE\\*` is being used. This prevents Python from "
"calling f_close() on it from another thread. Callers of this must call "
":c:func:`PyFile_DecUseCount` when they are finished with the "
":c:type:`FILE\\*`.  Otherwise the file object will never be closed by "
"Python."
msgstr "PyFileObject 内部の、 :c:type:`FILE\\*` が使用中であることを示す使用数カウントをインクリメントします。これは、別のスレッドで使用中の :c:type:`FILE\\*` に対して Python が fclose() を呼び出すことを防ぎます。この関数の呼び出し側は、 :c:type:`FILE\\*` を使い終わったときに必ず :c:func:`PyFile_DecUseCount` を呼び出さなければなりません。そうしなければ、 Python はそのファイルオブジェクトを永遠に閉じません。"

#: ../../c-api/file.rst:80
msgid "The :term:`GIL` must be held while calling this function."
msgstr "この関数を呼び出すときは、 :term:`GIL` を取得していなければなりません。"

#: ../../c-api/file.rst:82
msgid ""
"The suggested use is to call this after :c:func:`PyFile_AsFile` and before "
"you release the GIL::"
msgstr "例えば、 :c:func:`PyFile_AsFile` を呼び出した後、GILを解放する前にこの関数を呼び出します。 ::"

#: ../../c-api/file.rst:99
msgid ""
"Decrements the PyFileObject's internal unlocked_count member to indicate "
"that the caller is done with its own use of the :c:type:`FILE\\*`. This may "
"only be called to undo a prior call to :c:func:`PyFile_IncUseCount`."
msgstr "PyFileObject 内部の、 :c:type:`FILE\\*` が使用中であることを示す unlocked_count メンバーをデクリメントして、呼び出し元が :c:type:`FILE\\*` を使い終わったことを示します。これは、先に行った :c:func:`PyFile_IncUseCount` の呼び出しを取り消すためだけに呼び出されるでしょう。"

#: ../../c-api/file.rst:103
msgid ""
"The :term:`GIL` must be held while calling this function (see the example "
"above)."
msgstr "この関数を呼び出すときは、 :term:`GIL` を取得していなければなりません。 (上の例を参照してください)"

#: ../../c-api/file.rst:113
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a "
":meth:`~io.IOBase.readline` method.  If *n* is ``0``, exactly one line is "
"read, regardless of the length of the line.  If *n* is greater than ``0``, "
"no more than *n* bytes will be read from the file; a partial line can be "
"returned.  In both cases, an empty string is returned if the end of the file"
" is reached immediately.  If *n* is less than ``0``, however, one line is "
"read regardless of length, but :exc:`EOFError` is raised if the end of the "
"file is reached immediately."
msgstr "``p.readline([n])`` と同じで、この関数はオブジェクト *p* の各行を読み出します。 *p* はファイルオブジェクトか、 :meth:`~io.IOBase.readline` メソッドを持つ何らかのオブジェクトでかまいません。 *n* が ``0`` の場合、行の長さに関係なく正確に 1 行だけ読み出します。 *n* が ``0`` より大きければ、 *n* バイト以上のデータは読み出しません; 従って、行の一部だけが返される場合があります。 どちらの場合でも、読み出し後すぐにファイルの終端に到達した場合には空文字列を 返します。 *n* が ``0`` より小さければ、長さに関わらず 1 行だけを 読み出しますが、すぐにファイルの終端に到達した場合には :exc:`EOFError` を送出します。"

#: ../../c-api/file.rst:126
msgid "Return the name of the file specified by *p* as a string object."
msgstr "*p* に指定したファイルの名前を文字列オブジェクトで返します。"

#: ../../c-api/file.rst:133
msgid ""
"Available on systems with :c:func:`setvbuf` only.  This should only be "
"called immediately after file object creation."
msgstr ":c:func:`setvbuf` があるシステムでのみ利用できます。この関数を呼び出してよいのはファイルオブジェクトの生成直後のみです。"

#: ../../c-api/file.rst:139
msgid ""
"Set the file's encoding for Unicode output to *enc*. Return ``1`` on success"
" and ``0`` on failure."
msgstr ""

#: ../../c-api/file.rst:147
msgid ""
"Set the file's encoding for Unicode output to *enc*, and its error mode to "
"*err*. Return ``1`` on success and ``0`` on failure."
msgstr ""

#: ../../c-api/file.rst:157
msgid ""
"This function exists for internal use by the interpreter.  Set the "
":attr:`softspace` attribute of *p* to *newflag* and return the previous "
"value. *p* does not have to be a file object for this function to work "
"properly; any object is supported (thought its only interesting if the "
":attr:`softspace` attribute can be set).  This function clears any errors, "
"and will return ``0`` as the previous value if the attribute either does not"
" exist or if there were errors in retrieving it.  There is no way to detect "
"errors from this function, but doing so should not be needed."
msgstr "この関数はインタプリタの内部的な利用のために存在します。この関数は *p* の :attr:`softspace` 属性を *newflag* に設定し、以前の設定値を返します。この関数を正しく動作させるために、 *p* がファイルオブジェクトである必然性はありません; 任意のオブジェクトをサポートします (:attr:`softspace` 属性が設定されているかどうかのみが問題だと思ってください)。この関数は全てのエラーを解消し、属性値が存在しない場合や属性値を取得する際にエラーが生じると、 ``0`` を以前の値として返します。この関数からはエラーを検出できませんが、そもそもそういう必要はありません。"

#: ../../c-api/file.rst:171
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written"
" instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on failure;"
" the appropriate exception will be set."
msgstr "オブジェクト *obj* をファイルオブジェクト *p* に書き込みます。 *flags* がサポートするフラグは :const:`Py_PRINT_RAW` だけです; このフラグを指定すると、オブジェクトに :func:`repr` ではなく :func:`str` を適用した結果をファイルに書き出します。成功した場合には ``0`` を返し、失敗すると ``-1`` を返して適切な例外をセットします。"

#: ../../c-api/file.rst:179
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr "文字列 *s* をファイルオブジェクト *p* に書き出します。成功した場合には ``0`` を返し、失敗すると ``-1`` を返して適切な例外をセットします。"
