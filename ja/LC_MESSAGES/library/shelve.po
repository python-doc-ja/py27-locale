# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# 
# Translators:
# cocoatomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2017-09-22 17:56+0000\n"
"Last-Translator: cocoatomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/shelve.rst:2
msgid ":mod:`shelve` --- Python object persistence"
msgstr ":mod:`shelve` --- Python オブジェクトの永続化"

#: ../../library/shelve.rst:10
msgid "**Source code:** :source:`Lib/shelve.py`"
msgstr "**ソースコード:** :source:`Lib/shelve.py`"

#: ../../library/shelve.rst:14
msgid ""
"A \"shelf\" is a persistent, dictionary-like object.  The difference with "
"\"dbm\" databases is that the values (not the keys!) in a shelf can be "
"essentially arbitrary Python objects --- anything that the :mod:`pickle` "
"module can handle. This includes most class instances, recursive data types,"
" and objects containing lots of shared  sub-objects.  The keys are ordinary "
"strings."
msgstr "\"シェルフ (shelf, 棚)\" は辞書に似た永続性を持つオブジェクトです。 \"dbm\" データベースとの違いは、シェルフの値 (キーではありません！) は実質上どんな Python オブジェクトにも --- :mod:`pickle` モジュールが扱えるなら何でも --- できるということです。これにはほとんどのクラスインスタンス、再帰的なデータ型、沢山の共有されたサブオブジェクトを含むオブジェクトが含まれます。キーは通常の文字列です。"

#: ../../library/shelve.rst:23
msgid ""
"Open a persistent dictionary.  The filename specified is the base filename "
"for the underlying database.  As a side-effect, an extension may be added to"
" the filename and more than one file may be created.  By default, the "
"underlying database file is opened for reading and writing.  The optional "
"*flag* parameter has the same interpretation as the *flag* parameter of "
":func:`anydbm.open`."
msgstr "永続的な辞書を開きます。指定された *filename* は、根底にあるデータベースの基本ファイル名となります。副作用として、 *filename* には拡張子がつけられる場合があり、ひとつ以上のファイルが生成される可能性もあります。デフォルトでは、根底にあるデータベースファイルは読み書き可能なように開かれます。オプションの *flag* パラメータは :func:`anydbm.open` における *flag* パラメータと同様に解釈されます。"

#: ../../library/shelve.rst:29
msgid ""
"By default, version 0 pickles are used to serialize values.  The version of "
"the pickle protocol can be specified with the *protocol* parameter."
msgstr "デフォルトでは、値を整列化する際にはバージョン 0 の pickle 化が用いられます。pickle 化プロトコルのバージョンは *protocol* パラメータで指定することができます。pickle 化プロトコルについては :mod:`pickle` のドキュメントを参照してください。"

#: ../../library/shelve.rst:32 ../../library/shelve.rst:118
msgid "The *protocol* parameter was added."
msgstr "*protocol* パラメータが追加されました。"

#: ../../library/shelve.rst:35
msgid ""
"Because of Python semantics, a shelf cannot know when a mutable persistent-"
"dictionary entry is modified.  By default modified objects are written "
"*only* when assigned to the shelf (see :ref:`shelve-example`).  If the "
"optional *writeback* parameter is set to ``True``, all entries accessed are "
"also cached in memory, and written back on :meth:`~Shelf.sync` and "
":meth:`~Shelf.close`; this can make it handier to mutate mutable entries in "
"the persistent dictionary, but, if many entries are accessed, it can consume"
" vast amounts of memory for the cache, and it can make the close operation "
"very slow since all accessed entries are written back (there is no way to "
"determine which accessed entries are mutable, nor which ones were actually "
"mutated)."
msgstr "Python の意味論により、シェルフには永続的な辞書の可変エントリがいつ変更されたかを知る術がありません。\nデフォルトでは、変更されたオブジェクトはシェルフに代入されたとき *だけ* 書き込まれます (:ref:`shelve-example` 参照)。\nオプションの *writeback* パラメータが  ``True`` に設定されている場合は、アクセスされたすべてのエントリはメモリ上にキャッシュされ、 :meth:`~Shelf.sync` および :meth:`~Shelf.close` を呼び出した際に書き戻されます;\nこの機能は永続的な辞書上の可変の要素に対する変更を容易にしますが、多数のエントリがアクセスされた場合、膨大な量のメモリがキャッシュのために消費され、アクセスされた全てのエントリを書き戻す (アクセスされたエントリが可変であるか、あるいは実際に変更されたかを決定する方法は存在しないのです) ために、ファイルを閉じる操作が非常に低速になります。"

#: ../../library/shelve.rst:47
msgid ""
"Like file objects, shelve objects should be closed explicitly to ensure that"
" the persistent data is flushed to disk."
msgstr "ファイルオブジェクト同様に、shelve オブジェクトは永続データが確実にディスクにフラッシュされるように、明示的にクローズすべきです。"

#: ../../library/shelve.rst:52
msgid ""
"Because the :mod:`shelve` module is backed by :mod:`pickle`, it is insecure "
"to load a shelf from an untrusted source.  Like with pickle, loading a shelf"
" can execute arbitrary code."
msgstr ":mod:`shelve` モジュールは裏で :mod:`pickle` を使っているので、信頼できないソースからシェルフを読み込むのは危険です。 pickle と同じく、 shelf の読み込みでも任意のコードを実行できるからです。"

#: ../../library/shelve.rst:56
msgid ""
"Shelf objects support most of the methods supported by dictionaries.  This "
"eases the transition from dictionary based scripts to those requiring "
"persistent storage."
msgstr "シェルフオブジェクトは辞書がサポートするほとんどのメソッドをサポートしています。これにより、辞書ベースのスクリプトから永続的な記憶媒体を必要とするスクリプトに容易に移行できるようになります。"

#: ../../library/shelve.rst:60
msgid ""
"Note, the Python 3 transition methods (:meth:`~dict.viewkeys`, "
":meth:`~dict.viewvalues`, and :meth:`~dict.viewitems`) are not supported."
msgstr "Python 3 への移行用メソッド (:meth:`~dict.viewkeys`, :meth:`~dict.viewvalues`, :meth:`~dict.viewitems`) はサポートされていないことに注意してください。"

#: ../../library/shelve.rst:63
msgid "Two additional methods are supported:"
msgstr "追加でサポートされるメソッドが二つあります:"

#: ../../library/shelve.rst:67
msgid ""
"Write back all entries in the cache if the shelf was opened with *writeback*"
" set to :const:`True`.  Also empty the cache and synchronize the persistent "
"dictionary on disk, if feasible.  This is called automatically when the "
"shelf is closed with :meth:`close`."
msgstr "シェルフが *writeback* を :const:`True` にセットして開かれている場合に、キャッシュ中の全てのエントリを書き戻します。また可能な場合は、キャッシュを空にしてディスク上の永続的な辞書を同期します。このメソッドはシェルフを :meth:`close` によって閉じるとき自動的に呼び出されます。"

#: ../../library/shelve.rst:74
msgid ""
"Synchronize and close the persistent *dict* object.  Operations on a closed "
"shelf will fail with a :exc:`ValueError`."
msgstr "永続的な *辞書* オブジェクトを同期して閉じます。既に閉じられているシェルフに対して呼び出すと :exc:`ValueError` を出し失敗します。"

#: ../../library/shelve.rst:80
msgid ""
"`Persistent dictionary recipe "
"<https://code.activestate.com/recipes/576642/>`_ with widely supported "
"storage formats and having the speed of native dictionaries."
msgstr "通常の辞書に近い速度をもち、いろいろなストレージフォーマットに対応した、 `永続化辞書のレシピ <https://code.activestate.com/recipes/576642/>`_ 。"

#: ../../library/shelve.rst:86
msgid "Restrictions"
msgstr "制限事項"

#: ../../library/shelve.rst:93
msgid ""
"The choice of which database package will be used (such as :mod:`dbm`, "
":mod:`gdbm` or :mod:`bsddb`) depends on which interface is available.  "
"Therefore it is not safe to open the database directly using :mod:`dbm`.  "
"The database is also (unfortunately) subject to the limitations of "
":mod:`dbm`, if it is used --- this means that (the pickled representation "
"of) the objects stored in the database should be fairly small, and in rare "
"cases key collisions may cause the database to refuse updates."
msgstr "どのデータベースパッケージが使われるか (例えば :mod:`dbm` 、 :mod:`gdbm` 、:mod:`bsddb`) は、どのインタフェースが利用可能かに依存します。従って、データベースを :mod:`dbm`  を使って直接開く方法は安全ではありません。データベースはまた、 :mod:`dbm` が使われた場合 (不幸なことに) その制約に縛られます --- これはデータベースに記録されたオブジェクト (の pickle 化された表現) はかなり小さくなければならず、キー衝突が生じた場合に、稀にデータベースを更新することができなくなることを意味します。"

#: ../../library/shelve.rst:101
msgid ""
"The :mod:`shelve` module does not support *concurrent* read/write access to "
"shelved objects.  (Multiple simultaneous read accesses are safe.)  When a "
"program has a shelf open for writing, no other program should have it open "
"for reading or writing.  Unix file locking can be used to solve this, but "
"this differs across Unix versions and requires knowledge about the database "
"implementation used."
msgstr ":mod:`shelve` モジュールは、シェルフに置かれたオブジェクトの *並列した* 読み出し/書き込みアクセスをサポートしません (複数の同時読み出しアクセスは安全です)。あるプログラムが書き込みのために開かれたシェルフを持っているとき、他のプログラムはそのシェルフを読み書きのために開いてはいけません。この問題を解決するために Unix のファイルロック機構を使うことができますが、この機構は Unix のバージョン間で異なり、使われているデータベースの実装について知識が必要となります。"

#: ../../library/shelve.rst:111
msgid ""
"A subclass of :class:`UserDict.DictMixin` which stores pickled values in the"
" *dict* object."
msgstr ":class:`UserDict.DictMixin` のサブクラスで、pickle 化された値を *dict* オブジェクトに保存します。"

#: ../../library/shelve.rst:114
msgid ""
"By default, version 0 pickles are used to serialize values.  The version of "
"the pickle protocol can be specified with the *protocol* parameter. See the "
":mod:`pickle` documentation for a discussion of the pickle protocols."
msgstr "デフォルトでは、値を整列化する際にはバージョン 0 の pickle 化が用いられます。pickle 化プロトコルのバージョンは *protocol* パラメータで指定することができます。pickle 化プロトコルについては :mod:`pickle` のドキュメントを参照してください。"

#: ../../library/shelve.rst:121
msgid ""
"If the *writeback* parameter is ``True``, the object will hold a cache of "
"all entries accessed and write them back to the *dict* at sync and close "
"times. This allows natural operations on mutable entries, but can consume "
"much more memory and make sync and close take a long time."
msgstr "*writeback* パラメータが ``True`` に設定されていれば、アクセスされたすべてのエントリはメモリ上にキャッシュされ、ファイルを閉じる際に *dict* に書き戻されます; この機能により、可変のエントリに対して自然な操作が可能になりますが、さらに多くのメモリを消費し、辞書をファイルと同期して閉じる際に長い時間がかかるようになります。"

#: ../../library/shelve.rst:129
msgid ""
"A subclass of :class:`Shelf` which exposes :meth:`first`, :meth:`!next`, "
":meth:`previous`, :meth:`last` and :meth:`set_location` which are available "
"in the :mod:`bsddb` module but not in other database modules.  The *dict* "
"object passed to the constructor must support those methods.  This is "
"generally accomplished by calling one of :func:`bsddb.hashopen`, "
":func:`bsddb.btopen` or :func:`bsddb.rnopen`.  The optional *protocol* and "
"*writeback* parameters have the same interpretation as for the "
":class:`Shelf` class."
msgstr ":class:`Shelf` のサブクラスで、 :meth:`first`, :meth:`!next`, :meth:`previous`, :meth:`last`, :meth:`set_location` メソッドを公開しています。これらのメソッドは :mod:`bsddb` モジュールでは利用可能ですが、他のデータベースモジュールでは利用できません。コンストラクタに渡された *dict* オブジェクトは上記のメソッドをサポートしていなくてはなりません。通常は、 :func:`bsddb.hashopen`, :func:`bsddb.btopen` または :func:`bsddb.rnopen` のいずれかを呼び出して得られるオブジェクトが条件を満たしています。オプションの *protocol* および *writeback* パラメタは :class:`Shelf` クラスにおけるパラメタと同様に解釈されます。"

#: ../../library/shelve.rst:140
msgid ""
"A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-"
"like object.  The underlying file will be opened using :func:`anydbm.open`."
"  By default, the file will be created and opened for both read and write.  "
"The optional *flag* parameter has the same interpretation as for the "
":func:`.open` function.  The optional *protocol* and *writeback* parameters "
"have the same interpretation as for the :class:`Shelf` class."
msgstr ":class:`Shelf` のサブクラスで、辞書に似たオブジェクトの代わりに *filename* を受理します。根底にあるファイルは :func:`anydbm.open` を使って開かれます。デフォルトでは、ファイルは読み書き可能な状態で開かれます。オプションの *flag* パラメータは :func:`.open` 関数におけるパラメータと同様に解釈されます。オプションの *protocol* および *writeback* パラメータは :class:`Shelf` クラスにおけるパラメータと同様に解釈されます。"

#: ../../library/shelve.rst:151
msgid "Example"
msgstr "例"

#: ../../library/shelve.rst:153
msgid ""
"To summarize the interface (``key`` is a string, ``data`` is an arbitrary "
"object)::"
msgstr "インタフェースは以下のコードに集約されています (``key`` は文字列で、``data`` は任意のオブジェクトです)::"

#: ../../library/shelve.rst:189
msgid "Module :mod:`anydbm`"
msgstr ":mod:`anydbm` モジュール"

#: ../../library/shelve.rst:189
msgid "Generic interface to ``dbm``\\ -style databases."
msgstr "``dbm`` スタイルの汎用的なインタフェース"

#: ../../library/shelve.rst:192
msgid "Module :mod:`bsddb`"
msgstr ":mod:`bsddb` モジュール"

#: ../../library/shelve.rst:192
msgid "BSD ``db`` database interface."
msgstr "BSD ``db`` データベースインタフェース。"

#: ../../library/shelve.rst:196
msgid "Module :mod:`dbhash`"
msgstr ":mod:`dbhash` モジュール"

#: ../../library/shelve.rst:195
msgid ""
"Thin layer around the :mod:`bsddb` which provides an :func:`~dbhash.open` "
"function like the other database modules."
msgstr ":mod:`bsddb` をラップする薄いレイヤで、他のデータベースモジュールのように関数 :func:`~dbhash.open` を提供しています。"

#: ../../library/shelve.rst:199
msgid "Module :mod:`dbm`"
msgstr ":mod:`dbm` モジュール"

#: ../../library/shelve.rst:199
msgid "Standard Unix database interface."
msgstr "標準の Unix データベースインタフェース。"

#: ../../library/shelve.rst:202
msgid "Module :mod:`dumbdbm`"
msgstr ":mod:`dumbdbm` モジュール"

#: ../../library/shelve.rst:202
msgid "Portable implementation of the ``dbm`` interface."
msgstr "``dbm`` インタフェースの移植性のある実装。"

#: ../../library/shelve.rst:205
msgid "Module :mod:`gdbm`"
msgstr ":mod:`gdbm` モジュール"

#: ../../library/shelve.rst:205
msgid "GNU database interface, based on the ``dbm`` interface."
msgstr "``dbm`` インタフェースに基づいた GNU データベースインタフェース。"

#: ../../library/shelve.rst:208
msgid "Module :mod:`pickle`"
msgstr ":mod:`pickle` モジュール"

#: ../../library/shelve.rst:208
msgid "Object serialization used by :mod:`shelve`."
msgstr ":mod:`shelve` によって使われるオブジェクト整列化機構。"

#: ../../library/shelve.rst:210
msgid "Module :mod:`cPickle`"
msgstr ":mod:`cPickle` モジュール"

#: ../../library/shelve.rst:211
msgid "High-performance version of :mod:`pickle`."
msgstr ":mod:`pickle` の高速版。"
