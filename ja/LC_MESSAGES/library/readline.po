# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# Hiroaki Itoh <xwhhsprings@gmail.com>, 2015-2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-01 17:54+0900\n"
"PO-Revision-Date: 2016-01-29 13:19+0000\n"
"Last-Translator: Hiroaki Itoh <xwhhsprings@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/readline.rst:2
msgid ":mod:`readline` --- GNU readline interface"
msgstr ":mod:`readline` --- GNU readline のインタフェース"

#: ../../library/readline.rst:10
msgid ""
"The :mod:`readline` module defines a number of functions to facilitate "
"completion and reading/writing of history files from the Python interpreter."
" This module can be used directly or via the :mod:`rlcompleter` module.  "
"Settings made using  this module affect the behaviour of both the "
"interpreter's interactive prompt  and the prompts offered by the "
":func:`raw_input` and :func:`input` built-in functions."
msgstr ":mod:`readline` モジュールでは、補完をしやすくしたり、ヒストリファイルを Python インタプリタから読み書きできるようにするためのいくつかの関数を定義しています。このモジュールは直接使うことも :mod:`rlcompleter` モジュールを介して使うこともできます。このモジュールで利用される設定はインタプリタの対話プロンプトの振舞い、組み込みの :func:`raw_input` , :func:`input` 関数の振舞いに影響します。"

#: ../../library/readline.rst:19
msgid ""
"On MacOS X the :mod:`readline` module can be implemented using the "
"``libedit`` library instead of GNU readline."
msgstr "MacOS X では :mod:`readline` モジュールは GNU readline ではなく ``libedit`` ライブラリを使って実装されていることがあります。"

#: ../../library/readline.rst:22
msgid ""
"The configuration file for ``libedit`` is different from that of GNU "
"readline. If you programmatically load configuration strings you can check "
"for the text \"libedit\" in :const:`readline.__doc__` to differentiate "
"between GNU readline and libedit."
msgstr "``libedit`` の設定ファイルは GNU readline のものとは異なります。もし設定文字列をプログラムからロードしているなら、 GNU readline と libedit を区別するために \"libedit\" という文字列が :const:`readline.__doc__` に含まれているかどうかチェックしてください。"

#: ../../library/readline.rst:28
msgid "The :mod:`readline` module defines the following functions:"
msgstr ":mod:`readline` モジュールでは以下の関数を定義しています:"

#: ../../library/readline.rst:33
msgid "Parse and execute single line of a readline init file."
msgstr "readline 初期化ファイルの一行を解析して実行します。"

#: ../../library/readline.rst:38
msgid "Return the current contents of the line buffer."
msgstr "行バッファの現在の内容を返します。"

#: ../../library/readline.rst:43
msgid "Insert text into the command line."
msgstr "コマンドラインにテキストを挿入します。"

#: ../../library/readline.rst:48
msgid ""
"Parse a readline initialization file. The default filename is the last "
"filename used."
msgstr "readline 初期化ファイルを解析します。標準のファイル名は最後に使われたファイル名です。"

#: ../../library/readline.rst:54
msgid ""
"Load a readline history file. The default filename is :file:`~/.history`."
msgstr "readline 履歴ファイルを読み出します。標準のファイル名は :file:`~/.history` です。"

#: ../../library/readline.rst:59
msgid ""
"Save a readline history file. The default filename is :file:`~/.history`."
msgstr "readline 履歴ファイルを保存します。標準のファイル名は :file:`~/.history` です。"

#: ../../library/readline.rst:64
msgid ""
"Clear the current history.  (Note: this function is not available if the "
"installed version of GNU readline doesn't support it.)"
msgstr "現在の履歴をクリアします。(注意:インストールされている GNU readline がサポートしていない場合、この関数は利用できません)"

#: ../../library/readline.rst:72
msgid ""
"Return the desired length of the history file.  Negative values imply "
"unlimited history file size."
msgstr "履歴ファイルに求める長さを返します。負の値は履歴ファイルのサイズに制限がないことを示します。"

#: ../../library/readline.rst:78
msgid ""
"Set the number of lines to save in the history file. "
":func:`write_history_file` uses this value to truncate the history file when"
" saving.  Negative values imply unlimited history file size."
msgstr "履歴ファイルに保存する行数を設定します。:func:`write_history_file` は保存時に履歴ファイルを切り詰めるためにこの値を使います。負の値は履歴ファイルのサイズを制限しないことを示します。"

#: ../../library/readline.rst:85
msgid ""
"Return the number of lines currently in the history.  (This is different "
"from :func:`get_history_length`, which returns the maximum number of lines "
"that will be written to a history file.)"
msgstr "履歴の現在の行数を返します。(この関数は :func:`get_history_length` と異なります。 :func:`get_history_length` は履歴ファイルに書き出される最大行数を返します。)"

#: ../../library/readline.rst:94
msgid "Return the current contents of history item at *index*."
msgstr "履歴の現在の内容から *index* 番目の項目を返します。"

#: ../../library/readline.rst:101
msgid "Remove history item specified by its position from the history."
msgstr "履歴から位置指定した項目を削除します。"

#: ../../library/readline.rst:108
msgid "Replace history item specified by its position with the given line."
msgstr "位置指定した履歴項目を指定した line で置き換えます。"

#: ../../library/readline.rst:115
msgid ""
"Change what's displayed on the screen to reflect the current contents of the"
" line buffer."
msgstr "行バッファの現在の内容を反映して画面の表示を更新します。"

#: ../../library/readline.rst:123
msgid ""
"Set or remove the startup_hook function.  If *function* is specified, it "
"will be used as the new startup_hook function; if omitted or ``None``, any "
"hook function already installed is removed.  The startup_hook function is "
"called with no arguments just before readline prints the first prompt."
msgstr "startup_hook 関数を設定または削除します。*function* が指定された場合、新たな startup_hook 関数として用いられます; 省略された場合や ``None`` の場合、現在インストールされている全フック関数は削除されます。startup_hook 関数は readline が最初のプロンプトを出力する直前に引数なしで呼び出されます。"

#: ../../library/readline.rst:131
msgid ""
"Set or remove the pre_input_hook function.  If *function* is specified, it "
"will be used as the new pre_input_hook function; if omitted or ``None``, any"
" hook function already installed is removed.  The pre_input_hook function is"
" called with no arguments after the first prompt has been printed and just "
"before readline starts reading input characters."
msgstr "pre_input_hook 関数を設定または削除します。*function* が指定された場合、新たな pre_input_hook 関数として用いられます;  省略された場合や ``None`` の場合、現在インストールされているフック関数は削除されます。pre_input_hook 関数は readline が最初のプロンプトを出力した後で、かつ readline が入力された文字を読み込み始める直前に引数なしで呼び出されます。"

#: ../../library/readline.rst:140
msgid ""
"Set or remove the completer function.  If *function* is specified, it will "
"be used as the new completer function; if omitted or ``None``, any completer"
" function already installed is removed.  The completer function is called as"
" ``function(text, state)``, for *state* in ``0``, ``1``, ``2``, ..., until "
"it returns a non-string value.  It should return the next possible "
"completion starting with *text*."
msgstr "completer 関数を設定または削除します。*function* が指定された場合、新たな completer 関数として用いられます;  省略された場合や ``None`` の場合、現在インストールされている completer 関数は削除されます。completer 関数は ``function(text, state)`` の形式で、関数が文字列でない値を返すまで *state* を ``0``, ``1``, ``2``, ..., にして呼び出します。この関数は *text* から始まる補完結果として次に来そうなものを返さなければなりません。"

#: ../../library/readline.rst:150
msgid ""
"Get the completer function, or ``None`` if no completer function has been "
"set."
msgstr "completer 関数を取得します。completer 関数が設定されていなければ ``None`` を返します。"

#: ../../library/readline.rst:157
msgid "Get the type of completion being attempted."
msgstr "試行中の補完のタイプを取得します。"

#: ../../library/readline.rst:163
msgid "Get the beginning index of the readline tab-completion scope."
msgstr "readline タブ補完スコープの先頭のインデックスを取得します。"

#: ../../library/readline.rst:168
msgid "Get the ending index of the readline tab-completion scope."
msgstr "readline タブ補完スコープの末尾のインデックスを取得します。"

#: ../../library/readline.rst:173
msgid "Set the readline word delimiters for tab-completion."
msgstr "タブ補完のための readline 単語区切り文字を設定します。"

#: ../../library/readline.rst:178
msgid "Get the readline word delimiters for tab-completion."
msgstr "タブ補完のための readline 単語区切り文字を取得します。"

#: ../../library/readline.rst:182
msgid ""
"Set or remove the completion display function.  If *function* is specified, "
"it will be used as the new completion display function; if omitted or "
"``None``, any completion display function already installed is removed.  The"
" completion display function is called as ``function(substitution, "
"[matches], longest_match_length)`` once each time matches need to be "
"displayed."
msgstr "補完表示関数を設定あるいは削除します。*function* が指定された場合、それが新しい補完表示関数として利用されます。省略された場合や``None`` の場合、既に設定されていた補完表示関数が削除されます。補完表示関数は、マッチの表示が必要になるたびに、``function(substitution, [matches], longest_match_length)`` という形で呼び出されます。"

#: ../../library/readline.rst:193
msgid "Append a line to the history buffer, as if it was the last line typed."
msgstr "1 行を履歴バッファに追加し、最後に打ち込まれた行のようにします。"

#: ../../library/readline.rst:197
msgid "Module rlcompleter"
msgstr ":mod:`rlcompleter` モジュール"

#: ../../library/readline.rst:198
msgid "Completion of Python identifiers at the interactive prompt."
msgstr "対話的プロンプトで Python 識別子を補完する機能。"

#: ../../library/readline.rst:204
msgid "Example"
msgstr "例"

#: ../../library/readline.rst:206
msgid ""
"The following example demonstrates how to use the :mod:`readline` module's "
"history reading and writing functions to automatically load and save a "
"history file named :file:`.pyhist` from the user's home directory.  The code"
" below would normally be executed automatically during interactive sessions "
"from the user's :envvar:`PYTHONSTARTUP` file. ::"
msgstr "以下の例では、ユーザのホームディレクトリにある :file:`.pyhist` という名前のヒストリファイルを自動的に読み書きするために、 :mod:`readline` モジュールによるヒストリの読み書き関数をどのように使うかを例示しています。以下のソースコードは通常、対話セッションの中で :envvar:`PYTHONSTARTUP` ファイルから読み込まれ自動的に実行されることになります。 ::"

#: ../../library/readline.rst:223
msgid ""
"The following example extends the :class:`code.InteractiveConsole` class to "
"support history save/restore. ::"
msgstr "次の例では :class:`code.InteractiveConsole` クラスを拡張し、履歴の保存・復旧をサポートします。 ::"
