# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-01 17:54+0900\n"
"PO-Revision-Date: 2016-09-05 04:20+0000\n"
"Last-Translator: Hiroaki Itoh <xwhhsprings@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/urllib2.rst:2
msgid ":mod:`urllib2` --- extensible library for opening URLs"
msgstr ":mod:`urllib2` --- URL を開くための拡張可能なライブラリ"

#: ../../library/urllib2.rst:11
msgid ""
"The :mod:`urllib2` module has been split across several modules in Python 3 "
"named :mod:`urllib.request` and :mod:`urllib.error`. The :term:`2to3` tool "
"will automatically adapt imports when converting your sources to Python 3."
msgstr ":mod:`urllib2` モジュールは、Python 3 で :mod:`urllib.request`, :mod:`urllib.error` に分割されました。 :term:`2to3` ツールが自動的にソースコードのimportを修正します。"

#: ../../library/urllib2.rst:17
msgid ""
"The :mod:`urllib2` module defines functions and classes which help in "
"opening URLs (mostly HTTP) in a complex world --- basic and digest "
"authentication, redirections, cookies and more."
msgstr ":mod:`urllib2` モジュールは基本的な認証、暗号化認証、リダイレクション、クッキー、その他の介在する複雑なアクセス環境において (大抵は HTTP で)  URL を開くための関数とクラスを定義します。"

#: ../../library/urllib2.rst:23
msgid ""
"The `Requests package <http://requests.readthedocs.org/>`_ is recommended "
"for a higher-level http client interface."
msgstr "より高いレベルの http クライアントインターフェイスとしては、 `Requests package <http://requests.readthedocs.org/>`_ がお奨めです。"

#: ../../library/urllib2.rst:27
msgid "The :mod:`urllib2` module defines the following functions:"
msgstr ":mod:`urllib2` モジュールでは以下の関数を定義しています:"

#: ../../library/urllib2.rst:32
msgid ""
"Open the URL *url*, which can be either a string or a :class:`Request` "
"object."
msgstr "URL *url* を開きます。 *url* は文字列でも :class:`Request` オブジェクトでもかまいません。"

#: ../../library/urllib2.rst:34
msgid ""
"*data* may be a string specifying additional data to send to the server, or "
"``None`` if no such data is needed.  Currently HTTP requests are the only "
"ones that use *data*; the HTTP request will be a POST instead of a GET when "
"the *data* parameter is provided.  *data* should be a buffer in the standard"
" :mimetype:`application/x-www-form-urlencoded` format.  The "
":func:`urllib.urlencode` function takes a mapping or sequence of 2-tuples "
"and returns a string in this format. urllib2 module sends HTTP/1.1 requests "
"with ``Connection:close`` header included."
msgstr "*data* はサーバに送信する追加のデータを示す文字列か、そのようなデータが無ければ *None* を指定します。現時点でHTTPリクエストは *data* をサポートする唯一のリクエスト形式です; *data* パラメタが指定が指定された場合、HTTP リクエストは GET でなく POST になります。 *data* は標準的な :mimetype:`application/x-www-form-urlencoded` 形式のバッファでなくてはなりません。 :func:`urllib.urlencode` 関数はマップ型か2タプルのシーケンスを取り、この形式の文字列を返します。 urllib2 モジュールは HTTP/1.1 リクエストを `Connection:close` ヘッダ付きで送信します。"

#: ../../library/urllib2.rst:43
msgid ""
"The optional *timeout* parameter specifies a timeout in seconds for blocking"
" operations like the connection attempt (if not specified, the global "
"default timeout setting will be used).  This actually only works for HTTP, "
"HTTPS and FTP connections."
msgstr "オプションの *timeout* 引数は、接続開始などのブロックする操作におけるタイムアウト時間を秒数で指定します。 (指定されなかった場合、グローバルのデフォルトタイムアウト時間が利用されます) この引数は、 HTTP, HTTPS, FTP 接続でのみ有効です。"

#: ../../library/urllib2.rst:48
msgid ""
"If *context* is specified, it must be a :class:`ssl.SSLContext` instance "
"describing the various SSL options. See :class:`~httplib.HTTPSConnection` "
"for more details."
msgstr "*context* を指定する場合、 :class:`ssl.SSLContext` インスタンスでなければなりません。それはさまざまな SSL オプションを記述しています。詳細は :class:`~httplib.HTTPSConnection` を参照してください。"

#: ../../library/urllib2.rst:52
msgid ""
"The optional *cafile* and *capath* parameters specify a set of trusted CA "
"certificates for HTTPS requests.  *cafile* should point to a single file "
"containing a bundle of CA certificates, whereas *capath* should point to a "
"directory of hashed certificate files.  More information can be found in "
":meth:`ssl.SSLContext.load_verify_locations`."
msgstr "任意のパラメーター *cafile* および *capath* には HTTPS リクエストのための CA 証明書のセットを指定します。*cafile* には CA 証明書のリストを含む 1 個のファイルを指定し、*capath* にはハッシュ化された証明書ファイルが格納されたディレクトリを指定しなければなりません。より詳しい情報は :meth:`ssl.SSLContext.load_verify_locations` を参照してください。"

#: ../../library/urllib2.rst:58
msgid "The *cadefault* parameter is ignored."
msgstr "*cadefault* パラメータは無視されます。"

#: ../../library/urllib2.rst:60
msgid ""
"This function returns a file-like object with three additional methods:"
msgstr "この関数は以下の 3 つのメソッドを持つファイル類似のオブジェクトを返します:"

#: ../../library/urllib2.rst:62
msgid ""
":meth:`geturl` --- return the URL of the resource retrieved, commonly used "
"to determine if a redirect was followed"
msgstr ":meth:`geturl` --- 取得されたリソースの URL を返します。 主に、リダイレクトが発生したかどうかを確認するために利用します。"

#: ../../library/urllib2.rst:65
msgid ""
":meth:`info` --- return the meta-information of the page, such as headers, "
"in the form of an :class:`mimetools.Message` instance (see `Quick Reference "
"to HTTP Headers <http://www.cs.tut.fi/~jkorpela/http.html>`_)"
msgstr ":meth:`info` --- 取得されたページのヘッダーなどのメタ情報を、 :class:`mimetools.Message` インスタンスとして返します。 (`Quick Reference to HTTP Headers <http://www.cs.tut.fi/~jkorpela/http.html>`_ を参照してください)"

#: ../../library/urllib2.rst:69
msgid ":meth:`getcode` --- return the HTTP status code of the response."
msgstr ":meth:`getcode` --- レスポンスの HTTP ステータスコードを返します。"

#: ../../library/urllib2.rst:71
msgid "Raises :exc:`URLError` on errors."
msgstr "エラーが発生した場合 :exc:`URLError` を送出します。"

#: ../../library/urllib2.rst:73
msgid ""
"Note that ``None`` may be returned if no handler handles the request (though"
" the default installed global :class:`OpenerDirector` uses "
":class:`UnknownHandler` to ensure this never happens)."
msgstr "どのハンドラもリクエストを処理しなかった場合には ``None`` を返すことがあるので注意してください (デフォルトでインストールされる グローバルハンドラの :class:`OpenerDirector` は、 :class:`UnknownHandler` を使って上記の問題が起きないようにしています)。"

#: ../../library/urllib2.rst:77
msgid ""
"In addition, if proxy settings are detected (for example, when a ``*_proxy``"
" environment variable like :envvar:`http_proxy` is set), "
":class:`ProxyHandler` is default installed and makes sure the requests are "
"handled through the proxy."
msgstr "さらに、プロキシ設定が検出された場合(例えば :envvar:`http_proxy` のような ``*_proxy`` 環境変数がセットされているなど)には :class:`ProxyHandler` がデフォルトでインストールされ、これがプロキシを通してリクエストを処理するようにしています。"

#: ../../library/urllib2.rst:82 ../../library/urllib2.rst:483
msgid "*timeout* was added."
msgstr "*timeout* 引数が追加されました。"

#: ../../library/urllib2.rst:85
msgid "*cafile*, *capath*, *cadefault*, and *context* were added."
msgstr "*cafile*, *capath*, *cadefault*, *context* が追加されました。"

#: ../../library/urllib2.rst:91
msgid ""
"Install an :class:`OpenerDirector` instance as the default global opener. "
"Installing an opener is only necessary if you want urlopen to use that "
"opener; otherwise, simply call :meth:`OpenerDirector.open` instead of "
":func:`urlopen`. The code does not check for a real :class:`OpenerDirector`,"
" and any class with the appropriate interface will work."
msgstr "指定された :class:`OpenerDirector` のインスタンスを、デフォルトで利用されるグローバルの opener としてインストールします。 opener のインストールは、 urlopen にその opener を使って欲しいとき以外必要ありません。普段は単に :func:`urlopen` の代わりに :meth:`OpenerDirector.open` を利用してください。 この関数は引数が本当に :class:`OpenerDirector` のインスタンスであるかどうかはチェックしません。適切なインタフェースを持った任意のクラスを利用することができます。"

#: ../../library/urllib2.rst:100
msgid ""
"Return an :class:`OpenerDirector` instance, which chains the handlers in the"
" order given. *handler*\\s can be either instances of :class:`BaseHandler`, "
"or subclasses of :class:`BaseHandler` (in which case it must be possible to "
"call the constructor without any parameters).  Instances of the following "
"classes will be in front of the *handler*\\s, unless the *handler*\\s "
"contain them, instances of them or subclasses of them: :class:`ProxyHandler`"
" (if proxy settings are detected), :class:`UnknownHandler`, "
":class:`HTTPHandler`, :class:`HTTPDefaultErrorHandler`, "
":class:`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`, "
":class:`HTTPErrorProcessor`."
msgstr "与えられた順番に URL ハンドラを連鎖させる :class:`OpenerDirector`  のインスタンスを返します。 *handler* は :class:`BaseHandler` または :class:`BaseHandler` のサブクラスのインスタンスのどちらかです (どちらの場合も、コンストラクトは引数無しで呼び出せるようになっていなければなりません) 。クラス  :class:`ProxyHandler` (proxy 設定が検出された場合), :class:`UnknownHandler`, :class:`HTTPHandler`, :class:`HTTPDefaultErrorHandler`, :class:`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`, :class:`HTTPErrorProcessor` については、そのクラスのインスタンスか、そのサブクラスのインスタンスが *handler*  に含まれていない限り、 *handler* よりも先に連鎖します。"

#: ../../library/urllib2.rst:111
msgid ""
"If the Python installation has SSL support (i.e., if the :mod:`ssl` module "
"can be imported), :class:`HTTPSHandler` will also be added."
msgstr "Python が SSL をサポートするように設定してインストールされている場合 (すなわち、 :mod:`ssl` モジュールを import できる場合) :class:`HTTPSHandler` も追加されます。"

#: ../../library/urllib2.rst:114
msgid ""
"Beginning in Python 2.3, a :class:`BaseHandler` subclass may also change its"
" :attr:`handler_order` attribute to modify its position in the handlers "
"list."
msgstr "Python 2.3 からは、 :class:`BaseHandler` サブクラスでも  :attr:`handler_order` メンバ変数を変更して、ハンドラリスト内での場所を変更できるようになりました。"

#: ../../library/urllib2.rst:118
msgid "The following exceptions are raised as appropriate:"
msgstr "状況に応じて、以下の例外が送出されます:"

#: ../../library/urllib2.rst:123
msgid ""
"The handlers raise this exception (or derived exceptions) when they run into"
" a problem.  It is a subclass of :exc:`IOError`."
msgstr "ハンドラが何らかの問題に遭遇した場合、この例外 (またはこの例外から派生した例外)を送出します。この例外は :exc:`IOError` のサブクラスです。"

#: ../../library/urllib2.rst:128
msgid ""
"The reason for this error.  It can be a message string or another exception "
"instance (:exc:`socket.error` for remote URLs, :exc:`OSError` for local "
"URLs)."
msgstr "このエラーの原因。メッセージ文字列か、他の例外のインスタンス(リモートURLの場合は :exc:`socket.error`, ローカルURLの場合は :exc:`OSError`)。"

#: ../../library/urllib2.rst:135
msgid ""
"Though being an exception (a subclass of :exc:`URLError`), an "
":exc:`HTTPError` can also function as a non-exceptional file-like return "
"value (the same thing that :func:`urlopen` returns).  This is useful when "
"handling exotic HTTP errors, such as requests for authentication."
msgstr "これは例外(:exc:`URLError` のサブクラス)ですが、このオブジェクトは例外でないファイル類似のオブジェクトとして返り値に使うことができます (:func:`urlopen` が返すのと同じものです)。 この機能は、例えばサーバからの認証リクエストのように、変わった HTTP エラーを処理するのに役立ちます。"

#: ../../library/urllib2.rst:142
msgid ""
"An HTTP status code as defined in `RFC 2616 "
"<http://www.faqs.org/rfcs/rfc2616.html>`_. This numeric value corresponds to"
" a value found in the dictionary of codes as found in "
":attr:`BaseHTTPServer.BaseHTTPRequestHandler.responses`."
msgstr "`RFC 2616 <http://www.faqs.org/rfcs/rfc2616.html>`_ に定義されているHTTPステータスコード。 この数値型の値は、 :attr:`BaseHTTPServer.BaseHTTPRequestHandler.responses` の辞書に登録されているコードに対応します。"

#: ../../library/urllib2.rst:148
msgid ""
"The reason for this error.  It can be a message string or another exception "
"instance."
msgstr "このエラーの理由。メッセージ文字列あるいは他の例外インスタンスです。"

#: ../../library/urllib2.rst:151
msgid "The following classes are provided:"
msgstr "以下のクラスが提供されています:"

#: ../../library/urllib2.rst:156
msgid "This class is an abstraction of a URL request."
msgstr "このクラスは URL リクエストを抽象化したものです。"

#: ../../library/urllib2.rst:158
msgid "*url* should be a string containing a valid URL."
msgstr "*url* は有効な URL を指す文字列でなくてはなりません。"

#: ../../library/urllib2.rst:160
msgid ""
"*data* may be a string specifying additional data to send to the server, or "
"``None`` if no such data is needed.  Currently HTTP requests are the only "
"ones that use *data*; the HTTP request will be a POST instead of a GET when "
"the *data* parameter is provided.  *data* should be a buffer in the standard"
" :mimetype:`application/x-www-form-urlencoded` format.  The "
":func:`urllib.urlencode` function takes a mapping or sequence of 2-tuples "
"and returns a string in this format."
msgstr "*data* はサーバに送信する追加のデータを示す文字列か、そのようなデータが無ければ *None* を指定します。現時点でHTTP リクエストは *data* をサポートする唯一のリクエスト形式です; *data* パラメタが指定が指定された場合、HTTP リクエストは GET でなく POST になります。 *data* は標準的な :mimetype:`application/x-www-form-urlencoded` 形式のバッファでなくてはなりません。 :func:`urllib.urlencode` 関数はマップ型か2タプルのシーケンスを取り、この形式の文字列を返します。"

#: ../../library/urllib2.rst:168
msgid ""
"*headers* should be a dictionary, and will be treated as if "
":meth:`add_header` was called with each key and value as arguments.  This is"
" often used to \"spoof\" the ``User-Agent`` header, which is used by a "
"browser to identify itself -- some HTTP servers only allow requests coming "
"from common browsers as opposed to scripts.  For example, Mozilla Firefox "
"may identify itself as ``\"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 "
"Firefox/2.0.0.11\"``, while :mod:`urllib2`'s default user agent string is "
"``\"Python-urllib/2.6\"`` (on Python 2.6)."
msgstr "*headers* は辞書でなくてはなりません。この辞書は :meth:`add_header` を辞書のキーおよび値を引数として呼び出した時と 同じように扱われます。 この引数はよく、ブラウザが何であるかを特定する ``User-Agent`` ヘッダを偽装するために用いられます。 幾つかのHTTPサーバーが、スクリプトからのアクセスを禁止するために、一般的なブラウザの ``User-Agent`` ヘッダーしか許可しないからです。 例えば、 Mozilla Firefox は ``User-Agent`` に ``\"Mozilla/5. (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11\"`` のように設定し、 :mod:`urllib2` はデフォルトで ``\"Python-urllib/2.6\"`` (Python 2.6の場合)と設定します。"

#: ../../library/urllib2.rst:176
msgid ""
"The final two arguments are only of interest for correct handling of third-"
"party HTTP cookies:"
msgstr "最後の二つの引数は、サードパーティの HTTP クッキーを正しく扱いたい場合にのみ関係してきます:"

#: ../../library/urllib2.rst:179
msgid ""
"*origin_req_host* should be the request-host of the origin transaction, as "
"defined by :rfc:`2965`.  It defaults to ``cookielib.request_host(self)``.  "
"This is the host name or IP address of the original request that was "
"initiated by the user.  For example, if the request is for an image in an "
"HTML document, this should be the request-host of the request for the page "
"containing the image."
msgstr "*origin_req_host* は、 :rfc:`2965` で定義されている元のトランザクションにおけるリクエストホスト (request-host of the origin transaction) です。デフォルトの値は ``cookielib.request_host(self)`` です。 この値は、ユーザによって開始された元々のリクエストにおけるホスト名や IP アドレスです。例えば、もしリクエストがある HTML ドキュメント内の画像を指していれば、この値は画像を含んでいるページへのリクエストにおけるリクエストホストになるはずです。"

#: ../../library/urllib2.rst:185
msgid ""
"*unverifiable* should indicate whether the request is unverifiable, as "
"defined by RFC 2965.  It defaults to ``False``.  An unverifiable request is "
"one whose URL the user did not have the option to approve.  For example, if "
"the request is for an image in an HTML document, and the user had no option "
"to approve the automatic fetching of the image, this should be true."
msgstr "*unverifiable* は、 :rfc:`2965` の定義において、該当するリクエストが証明不能 (unverifiable) であるかどうかを示します。デフォルトの値は ``False`` です。証明不能なリクエストとは、ユーザが受け入れの可否を選択できないような URL を持つリクエストのことです。例えば、リクエストが HTML ドキュメント中の画像であり、ユーザがこの画像を自動的に取得するか どうかを選択できない場合には、証明不能フラグは True になります。"

#: ../../library/urllib2.rst:194
msgid ""
"The :class:`OpenerDirector` class opens URLs via :class:`BaseHandler`\\ s "
"chained together. It manages the chaining of handlers, and recovery from "
"errors."
msgstr ":class:`OpenerDirector` クラスは、 :class:`BaseHandler` の連鎖的に呼び出して URL を開きます。このクラスはハンドラをどのように連鎖させるか、またどのようにエラーをリカバリするかを管理します。"

#: ../../library/urllib2.rst:200
msgid ""
"This is the base class for all registered handlers --- and handles only the "
"simple mechanics of registration."
msgstr "このクラスはハンドラ連鎖に登録される全てのハンドラがベースとしているクラスです -- このクラスでは登録のための単純なメカニズムだけを扱います。"

#: ../../library/urllib2.rst:206
msgid ""
"A class which defines a default handler for HTTP error responses; all "
"responses are turned into :exc:`HTTPError` exceptions."
msgstr "HTTP エラー応答のための標準のハンドラを定義します; 全てのレスポンスに対して、例外 :exc:`HTTPError` を送出します。"

#: ../../library/urllib2.rst:212
msgid "A class to handle redirections."
msgstr "リダイレクションを扱うクラスです。"

#: ../../library/urllib2.rst:217
msgid "A class to handle HTTP Cookies."
msgstr "HTTP Cookie を扱うためのクラスです。"

#: ../../library/urllib2.rst:222
msgid ""
"Cause requests to go through a proxy. If *proxies* is given, it must be a "
"dictionary mapping protocol names to URLs of proxies. The default is to read"
" the list of proxies from the environment variables "
":envvar:`<protocol>_proxy`.  If no proxy environment variables are set, then"
" in a Windows environment proxy settings are obtained from the registry's "
"Internet Settings section, and in a Mac OS X environment proxy information "
"is retrieved from the OS X System Configuration Framework."
msgstr "このクラスはプロキシを通過してリクエストを送らせます。引数 *proxies* を与える場合、プロトコル名からプロキシの URL へ対応付ける辞書でなくてはなりません。標準では、プロキシのリストを環境変数 :envvar:`<protocol>_proxy`  から読み出します。プロキシ環境変数が設定されていない場合は、 Windows 環境では、 レジストリのインターネット設定セクションからプロキシ設定を手に入れ、 Mac OS X 環境では、 OS X システム設定フレームワーク (System Configuration Framework) からプロキシ情報を取得します。"

#: ../../library/urllib2.rst:230
msgid "To disable autodetected proxy pass an empty dictionary."
msgstr "自動検出されたproxyを無効にするには、空の辞書を渡してください。"

#: ../../library/urllib2.rst:235
msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings."
msgstr "``(realm, uri) -> (user, password)`` の対応付けデータベースを保持します。"

#: ../../library/urllib2.rst:240
msgid ""
"Keep a database of  ``(realm, uri) -> (user, password)`` mappings. A realm "
"of ``None`` is considered a catch-all realm, which is searched if no other "
"realm fits."
msgstr "``(realm, uri) -> (user, password)``  の対応付けデータベースを保持します。レルム ``None`` はその他諸々のレルムを表し、他のレルムが該当しない場合に検索されます。"

#: ../../library/urllib2.rst:247 ../../library/urllib2.rst:272
msgid ""
"This is a mixin class that helps with HTTP authentication, both to the "
"remote host and to a proxy. *password_mgr*, if given, should be something "
"that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref"
":`http-password-mgr` for information on the interface that must be "
"supported."
msgstr "このクラスはHTTP 認証を補助するための混ぜ込みクラス (mixin class) です。遠隔ホストとプロキシの両方に対応しています。 *password_mgr* を与える場合、 :class:`HTTPPasswordMgr` と互換性がなければなりません; 互換性のためにサポートしなければならないインタフェースについての情報はセクション :ref:`http-password-mgr` を参照してください。"

#: ../../library/urllib2.rst:256 ../../library/urllib2.rst:281
msgid ""
"Handle authentication with the remote host. *password_mgr*, if given, should"
" be something that is compatible with :class:`HTTPPasswordMgr`; refer to "
"section :ref:`http-password-mgr` for information on the interface that must "
"be supported."
msgstr "遠隔ホストとの間での認証を扱います。 *password_mgr* を与える場合、 :class:`HTTPPasswordMgr` と互換性が なければなりません;  互換性のためにサポートしなければならないインタフェースについての情報はセクション :ref:`http-password-mgr` を参照してください。"

#: ../../library/urllib2.rst:264 ../../library/urllib2.rst:289
msgid ""
"Handle authentication with the proxy. *password_mgr*, if given, should be "
"something that is compatible with :class:`HTTPPasswordMgr`; refer to section"
" :ref:`http-password-mgr` for information on the interface that must be "
"supported."
msgstr "プロキシとの間での認証を扱います。 *password_mgr* を与える場合、 :class:`HTTPPasswordMgr` と互換性が なければなりません;  互換性のためにサポートしなければならないインタフェースについての情報はセクション :ref:`http-password-mgr` を参照してください。"

#: ../../library/urllib2.rst:297
msgid "A class to handle opening of HTTP URLs."
msgstr "HTTP の URL を開きます。"

#: ../../library/urllib2.rst:302
msgid ""
"A class to handle opening of HTTPS URLs. *context* has the same meaning as "
"for :class:`httplib.HTTPSConnection`."
msgstr "HTTPS の URL のオープンを処理するクラスです。 *context* は :class:`httplib.HTTPSConnection` のものと同じです。"

#: ../../library/urllib2.rst:305
msgid "*context* added."
msgstr "*context* が追加されました。"

#: ../../library/urllib2.rst:311
msgid "Open local files."
msgstr "ローカルファイルを開きます。"

#: ../../library/urllib2.rst:316
msgid "Open FTP URLs."
msgstr "FTP の URL を開きます。"

#: ../../library/urllib2.rst:321
msgid ""
"Open FTP URLs, keeping a cache of open FTP connections to minimize delays."
msgstr "FTP の URL を開きます。遅延を最小限にするために、開かれている FTP  接続に対するキャッシュを保持します。"

#: ../../library/urllib2.rst:326
msgid "A catch-all class to handle unknown URLs."
msgstr "その他諸々のためのクラスで、未知のプロトコルの URL を開きます。"

#: ../../library/urllib2.rst:331 ../../library/urllib2.rst:931
msgid "Process HTTP error responses."
msgstr "HTTP エラー応答の処理をします。"

#: ../../library/urllib2.rst:337
msgid "Request Objects"
msgstr "Request オブジェクト"

#: ../../library/urllib2.rst:339
msgid ""
"The following methods describe all of :class:`Request`'s public interface, "
"and so all must be overridden in subclasses."
msgstr "以下のメソッドは :class:`Request` の全ての公開インタフェースを記述します。 従ってサブクラスではこれら全てのメソッドをオーバライドしなければなりません。"

#: ../../library/urllib2.rst:345
msgid ""
"Set the :class:`Request` data to *data*.  This is ignored by all handlers "
"except HTTP handlers --- and there it should be a byte string, and will "
"change the request to be ``POST`` rather than ``GET``."
msgstr ":class:`Request` のデータを *data* に設定します。この値は HTTP  ハンドラ以外のハンドラでは無視されます。HTTP ハンドラでは、データはバイト文字列でなくてはなりません。このメソッドを使うとリクエストの形式が ``GET`` から ``POST`` に変更されます。"

#: ../../library/urllib2.rst:352
msgid ""
"Return a string indicating the HTTP request method.  This is only meaningful"
" for HTTP requests, and currently always returns ``'GET'`` or ``'POST'``."
msgstr "HTTP リクエストメソッドを示す文字列を返します。このメソッドは HTTP リクエストだけに対して意味があり、現状では常に ``'GET'`` か ``'POST'`` のいずれかの値を返します。"

#: ../../library/urllib2.rst:358
msgid "Return whether the instance has a non-\\ ``None`` data."
msgstr "インスタンスが ``None`` でないデータを持つかどうかを返します。"

#: ../../library/urllib2.rst:363
msgid "Return the instance's data."
msgstr "インスタンスのデータを返します。"

#: ../../library/urllib2.rst:368
msgid ""
"Add another header to the request.  Headers are currently ignored by all "
"handlers except HTTP handlers, where they are added to the list of headers "
"sent to the server.  Note that there cannot be more than one header with the"
" same name, and later calls will overwrite previous calls in case the *key* "
"collides. Currently, this is no loss of HTTP functionality, since all "
"headers which have meaning when used more than once have a (header-specific)"
" way of gaining the same functionality using only one header."
msgstr "リクエストに新たなヘッダを追加します。ヘッダは HTTP ハンドラ以外のハンドラでは無視されます。HTTP ハンドラでは、引数はサーバに送信される ヘッダのリストに追加されます。同じ名前を持つヘッダを 2 つ以上持つことはできず、 *key* の衝突が生じた場合、後で追加したヘッダが前に 追加したヘッダを上書きします。現時点では、この機能は HTTP の機能を損ねることはありません。というのは、複数回呼び出したときに意味を 持つようなヘッダには、どれもただ一つのヘッダを使って同じ機能を果たすための (ヘッダ特有の) 方法があるからです。"

#: ../../library/urllib2.rst:379
msgid "Add a header that will not be added to a redirected request."
msgstr "リダイレクトされたリクエストには追加されないヘッダを追加します。"

#: ../../library/urllib2.rst:386
msgid ""
"Return whether the instance has the named header (checks both regular and "
"unredirected)."
msgstr "インスタンスが名前つきヘッダであるかどうかを (通常のヘッダと非リダイレクトヘッダの両方を調べて) 返します。"

#: ../../library/urllib2.rst:394
msgid "Return the URL given in the constructor."
msgstr "コンストラクタで与えられた URL を返します。"

#: ../../library/urllib2.rst:399
msgid "Return the type of the URL --- also known as the scheme."
msgstr "URL のタイプ --- いわゆるスキーム (scheme) --- を返します。"

#: ../../library/urllib2.rst:404
msgid "Return the host to which a connection will be made."
msgstr "接続を行う先のホスト名を返します。"

#: ../../library/urllib2.rst:409
msgid ""
"Return the selector --- the part of the URL that is sent to the server."
msgstr "セレクタ --- サーバに送られる URL の一部分 --- を返します。"

#: ../../library/urllib2.rst:414
msgid ""
"Return the value of the given header. If the header is not present, return "
"the default value."
msgstr "指定されたヘッダの値を返します。ヘッダがない場合は、 *default* の値を返します。"

#: ../../library/urllib2.rst:420
msgid ""
"Return a list of tuples (header_name, header_value) of the Request headers."
msgstr "リクエストヘッダの値を、タプル (header_name, header_value) のリストで返します。"

#: ../../library/urllib2.rst:425
msgid ""
"Prepare the request by connecting to a proxy server. The *host* and *type* "
"will replace those of the instance, and the instance's selector will be the "
"original URL given in the constructor."
msgstr "リクエストがプロキシサーバを経由するように準備します。 *host* および *type* はインスタンスのもとの設定と置き換えられ ます。インスタンスのセレクタはコンストラクタに与えたもともとの URL になります。"

#: ../../library/urllib2.rst:432
msgid ""
"Return the request-host of the origin transaction, as defined by "
":rfc:`2965`. See the documentation for the :class:`Request` constructor."
msgstr ":rfc:`2965` の定義よる、始原トランザクションのリクエストホストを返します。 :class:`Request` コンストラクタのドキュメントを 参照してください。"

#: ../../library/urllib2.rst:438
msgid ""
"Return whether the request is unverifiable, as defined by RFC 2965. See the "
"documentation for the :class:`Request` constructor."
msgstr "リクエストが :rfc:`2965` の定義における証明不能リクエストであるかどうかを返します。 :class:`Request` コンストラクタのドキュメントを参照してください。"

#: ../../library/urllib2.rst:445
msgid "OpenerDirector Objects"
msgstr "OpenerDirector オブジェクト"

#: ../../library/urllib2.rst:447
msgid ":class:`OpenerDirector` instances have the following methods:"
msgstr ":class:`OpenerDirector` インスタンスは以下のメソッドを持っています:"

#: ../../library/urllib2.rst:452
msgid ""
"*handler* should be an instance of :class:`BaseHandler`.  The following "
"methods are searched, and added to the possible chains (note that HTTP "
"errors are a special case)."
msgstr "*handler* は :class:`BaseHandler` のインスタンスでなければなりません。以下のメソッドを使った検索が行われ、URL を取り扱うことが可能なハンドラの連鎖が追加されます (HTTP エラーは特別扱いされているので注意してください)。"

#: ../../library/urllib2.rst:456
msgid ""
":samp:`{protocol}_open` --- signal that the handler knows how to open "
"*protocol* URLs."
msgstr ":samp:`{protocol}_open` --- ハンドラが *protocol* の URL を開く方法を知っているかどうかを調べます。"

#: ../../library/urllib2.rst:459
msgid ""
":samp:`http_error_{type}` --- signal that the handler knows how to handle "
"HTTP errors with HTTP error code *type*."
msgstr ":samp:`http_error_{type}` --- ハンドラが HTTP エラーコード *type* の処理方法を知っていることを示すシグナルです。"

#: ../../library/urllib2.rst:462
msgid ""
":samp:`{protocol}_error` --- signal that the handler knows how to handle "
"errors from (non-\\ ``http``) *protocol*."
msgstr ":samp:`{protocol}_error` --- ハンドラが (``http`` でない) *protocol* のエラー を処理する方法を知っていることを示すシグナルです。"

#: ../../library/urllib2.rst:465
msgid ""
":samp:`{protocol}_request` --- signal that the handler knows how to pre-"
"process *protocol* requests."
msgstr ":samp:`{protocol}_request` --- ハンドラが *protocol* リクエストのプリプロセス方法 を知っていることを示すシグナルです。"

#: ../../library/urllib2.rst:468
msgid ""
":samp:`{protocol}_response` --- signal that the handler knows how to post-"
"process *protocol* responses."
msgstr ":samp:`{protocol}_response` --- ハンドラが *protocol* リクエストのポストプロセス方法 を知っていることを示すシグナルです。"

#: ../../library/urllib2.rst:474
msgid ""
"Open the given *url* (which can be a request object or a string), optionally"
" passing the given *data*. Arguments, return values and exceptions raised "
"are the same as those of :func:`urlopen` (which simply calls the "
":meth:`open` method on the currently installed global "
":class:`OpenerDirector`).  The optional *timeout* parameter specifies a "
"timeout in seconds for blocking operations like the connection attempt (if "
"not specified, the global default timeout setting will be used). The timeout"
" feature actually works only for HTTP, HTTPS and FTP connections)."
msgstr "与えられた *url* (リクエストオブジェクトでも文字列でもかまいません) を開きます。オプションとして *data* を与えることができます。 引数、返り値、および送出される例外は :func:`urlopen` と同じです (:func:`urlopen` の場合、標準でインストールされている グローバルな :class:`OpenerDirector` の :meth:`open` メソッドを呼び出します) 。 オプションの *timeout* 引数は、接続開始のようなブロックする処理におけるタイムアウト時間を 秒数で指定します。(指定しなかった場合は、グローバルのデフォルト設定が利用されます) タイムアウト機能は、 HTTP, HTTPS, FTP 接続でのみ有効です。"

#: ../../library/urllib2.rst:489
msgid ""
"Handle an error of the given protocol.  This will call the registered error "
"handlers for the given protocol with the given arguments (which are protocol"
" specific).  The HTTP protocol is a special case which uses the HTTP "
"response code to determine the specific error handler; refer to the "
":meth:`http_error_\\*` methods of the handler classes."
msgstr "与えられたプロトコルにおけるエラーを処理します。このメソッドは与えられたプロトコルにおける登録済みのエラーハンドラを (プロトコル固有の) 引数で呼び出します。 HTTP プロトコルは特殊なケースで、特定のエラーハンドラを選び出すのに HTTP レスポンスコードを使います; ハンドラクラスの :meth:`http_error_\\*` メソッドを参照してください。"

#: ../../library/urllib2.rst:495
msgid ""
"Return values and exceptions raised are the same as those of "
":func:`urlopen`."
msgstr "返り値および送出される例外は :func:`urlopen` と同じものです。"

#: ../../library/urllib2.rst:497
msgid "OpenerDirector objects open URLs in three stages:"
msgstr "OpenerDirector オブジェクトは、以下の 3 つのステージに分けて URL を開きます:"

#: ../../library/urllib2.rst:499
msgid ""
"The order in which these methods are called within each stage is determined "
"by sorting the handler instances."
msgstr "各ステージで OpenerDirector オブジェクトのメソッドがどのような順で呼び出されるかは、ハンドラインスタンスの並び方で決まります。"

#: ../../library/urllib2.rst:502
msgid ""
"Every handler with a method named like :samp:`{protocol}_request` has that "
"method called to pre-process the request."
msgstr ":samp:`{protocol}_request` 形式のメソッドを持つ全てのハンドラに対してそのメソッドを呼び出し、リクエストの プリプロセスを行います。"

#: ../../library/urllib2.rst:505
msgid ""
"Handlers with a method named like :samp:`{protocol}_open` are called to "
"handle the request. This stage ends when a handler either returns a non-\\ "
":const:`None` value (ie. a response), or raises an exception (usually "
":exc:`URLError`). Exceptions are allowed to propagate."
msgstr ":samp:`{protocol}_open` 形式のメソッドを持つハンドラを呼び出し、リクエストを処理します。 このステージは、ハンドラが :const:`None` でない値 (すなわちレスポンス) を返すか、例外 (通常は :exc:`URLError`) を送出した時点で終了します。例外は伝播 (propagate) できます。"

#: ../../library/urllib2.rst:510
msgid ""
"In fact, the above algorithm is first tried for methods named "
":meth:`default_open`.  If all such methods return :const:`None`, the "
"algorithm is repeated for methods named like :samp:`{protocol}_open`.  If "
"all such methods return :const:`None`, the algorithm is repeated for methods"
" named :meth:`unknown_open`."
msgstr "実際には、上のアルゴリズムではまず :meth:`default_open` という名前のメソッドを呼び出します。このメソッドが全て :const:`None` を返す場合、同じアルゴリズムを繰り返して、今度は :samp:`{protocol}_open` 形式のメソッドを試します。メソッドが全て :const:`None` を返すと、さらに同じアルゴリズムを繰り返して :meth:`unknown_open` を呼び出します。"

#: ../../library/urllib2.rst:516
msgid ""
"Note that the implementation of these methods may involve calls of the "
"parent :class:`OpenerDirector` instance's :meth:`~OpenerDirector.open` and "
":meth:`~OpenerDirector.error` methods."
msgstr "これらのメソッドの実装には、親となる :class:`OpenerDirector` インスタンスの :meth:`~OpenDirector.open` や :meth:`~OpenDirector.error` といったメソッド呼び出しが入る場合があるので注意してください。"

#: ../../library/urllib2.rst:520
msgid ""
"Every handler with a method named like :samp:`{protocol}_response` has that "
"method called to post-process the response."
msgstr ":samp:`{protocol}_response` 形式のメソッドを持つ全てのハンドラに対してそのメソッドを呼び出し、リクエストの ポストプロセスを行います。"

#: ../../library/urllib2.rst:527
msgid "BaseHandler Objects"
msgstr "BaseHandler オブジェクト"

#: ../../library/urllib2.rst:529
msgid ""
":class:`BaseHandler` objects provide a couple of methods that are directly "
"useful, and others that are meant to be used by derived classes.  These are "
"intended for direct use:"
msgstr ":class:`BaseHandler` オブジェクトは直接的に役に立つ 2 つのメソッドと、その他として派生クラスで使われることを想定したメソッドを 提供します。以下は直接的に使うためのメソッドです:"

#: ../../library/urllib2.rst:536
msgid "Add a director as parent."
msgstr "親オブジェクトとして、 ``director`` を追加します。"

#: ../../library/urllib2.rst:541
msgid "Remove any parents."
msgstr "全ての親オブジェクトを削除します。"

#: ../../library/urllib2.rst:543
msgid ""
"The following attributes and methods should only be used by classes derived "
"from :class:`BaseHandler`."
msgstr "以下の属性およびメソッドは :class:`BaseHandler` から派生したクラスでのみ使われます:"

#: ../../library/urllib2.rst:548
msgid ""
"The convention has been adopted that subclasses defining "
":meth:`protocol_request` or :meth:`protocol_response` methods are named "
":class:`\\*Processor`; all others are named :class:`\\*Handler`."
msgstr "慣習的に、 :meth:`protocol_request` や :meth:`protocol_response` といったメソッドを定義している サブクラスは :class:`\\ *Processor` と名づけ、その他は :class:`\\* Handler` と名づけることになっています"

#: ../../library/urllib2.rst:555
msgid ""
"A valid :class:`OpenerDirector`, which can be used to open using a different"
" protocol, or handle errors."
msgstr "有効な :class:`OpenerDirector` です。この値は違うプロトコルを使って URL を開く場合やエラーを処理する際に使われます。"

#: ../../library/urllib2.rst:561
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to catch all URLs."
msgstr "このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかし、全ての URL をキャッチさせたいなら、サブクラスで定義する 必要があります。"

#: ../../library/urllib2.rst:564
msgid ""
"This method, if implemented, will be called by the parent "
":class:`OpenerDirector`.  It should return a file-like object as described "
"in the return value of the :meth:`open` of :class:`OpenerDirector`, or "
"``None``. It should raise :exc:`URLError`, unless a truly exceptional thing "
"happens (for example, :exc:`MemoryError` should not be mapped to "
":exc:`URLError`)."
msgstr "このメソッドが定義されていた場合、 :class:`OpenerDirector` から呼び出されます。このメソッドは :class:`OpenerDirector` のメソッド :meth:`open` が返す値について記述されているようなファイル類似の オブジェクトか、 ``None`` を返さなくてはなりません。このメソッドが送出する例外は、真に例外的なことが起きない限り、 :exc:`URLError` を送出しなければなりません (例えば、 :exc:`MemoryError` を :exc:`URLError` をマップしてはいけません)。"

#: ../../library/urllib2.rst:570
msgid "This method will be called before any protocol-specific open method."
msgstr "このメソッドはプロトコル固有のオープンメソッドが呼び出される前に呼び出されます。"

#: ../../library/urllib2.rst:576 ../../library/urllib2.rst:627
#: ../../library/urllib2.rst:640 ../../library/urllib2.rst:729
msgid "(\"protocol\" is to be replaced by the protocol name.)"
msgstr "(\"protocol\" は実際にはプロトコル名です)"

#: ../../library/urllib2.rst:578
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to handle URLs with the given *protocol*."
msgstr "このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかし *protocol* の URL をキャッチしたいなら、サブクラスで定義する必要があります。"

#: ../../library/urllib2.rst:581
msgid ""
"This method, if defined, will be called by the parent "
":class:`OpenerDirector`. Return values should be the same as for  "
":meth:`default_open`."
msgstr "このメソッドが定義されていた場合、 :class:`OpenerDirector` から呼び出されます。戻り値は :meth:`default_open` と同じでなければなりません。"

#: ../../library/urllib2.rst:587
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to catch all URLs with no specific registered handler"
" to open it."
msgstr "このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかし URL を開くための特定のハンドラが登録されていないような URL をキャッチしたいなら、サブクラスで定義する必要があります。"

#: ../../library/urllib2.rst:591
msgid ""
"This method, if implemented, will be called by the :attr:`parent` "
":class:`OpenerDirector`.  Return values should be the same as for "
":meth:`default_open`."
msgstr "このメソッドが定義されていた場合、 :class:`OpenerDirector` から呼び出されます。戻り値は :meth:`default_open` と同じでなければなりません。"

#: ../../library/urllib2.rst:598
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"override it if they intend to provide a catch-all for otherwise unhandled "
"HTTP errors.  It will be called automatically by the  "
":class:`OpenerDirector` getting the error, and should not normally be called"
" in other circumstances."
msgstr "このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかしその他の処理されなかった HTTP エラーを処理する機能をもたせたいなら、サブクラスで定義する必要があります。このメソッドはエラーに遭遇した :class:`OpenerDirector` から自動的に呼び出されます。その他の状況では普通呼び出すべきではありません。"

#: ../../library/urllib2.rst:603
msgid ""
"*req* will be a :class:`Request` object, *fp* will be a file-like object "
"with the HTTP error body, *code* will be the three-digit code of the error, "
"*msg* will be the user-visible explanation of the code and *hdrs* will be a "
"mapping object with the headers of the error."
msgstr "*req* は :class:`Request` オブジェクトで、 *fp* は HTTP エラー本体を読み出せるようなファイル類似のオブジェクトに なります。 *code* は 3 桁の 10 進数からなるエラーコードで、 *msg* ユーザ向けのエラーコード解説です。 *hdrs* は エラー応答のヘッダをマップしたオブジェクトです。"

#: ../../library/urllib2.rst:608
msgid ""
"Return values and exceptions raised should be the same as those of "
":func:`urlopen`."
msgstr "返される値および送出される例外は :func:`urlopen` と同じものでなければなりません。"

#: ../../library/urllib2.rst:614
msgid ""
"*nnn* should be a three-digit HTTP error code.  This method is also not "
"defined in :class:`BaseHandler`, but will be called, if it exists, on an "
"instance of a subclass, when an HTTP error with code *nnn* occurs."
msgstr "*nnn* は 3 桁の 10 進数からなる HTTP エラーコードでなくてはなりません。このメソッドも :class:`BaseHandler` では定義されていませんが、サブクラスのインスタンスで定義されていた場合、エラーコード *nnn* の HTTP エラーが発生した際に呼び出されます。"

#: ../../library/urllib2.rst:618
msgid "Subclasses should override this method to handle specific HTTP errors."
msgstr "特定の HTTP エラーに対する処理を行うためには、このメソッドをサブクラスでオーバライドする必要があります。"

#: ../../library/urllib2.rst:620
msgid ""
"Arguments, return values and exceptions raised should be the same as for "
":meth:`http_error_default`."
msgstr "引数、返される値、および送出される例外は :meth:`http_error_default` と同じものでなければなりません。"

#: ../../library/urllib2.rst:629
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to pre-process requests of the given *protocol*."
msgstr "このメソッドは :class:`BaseHandler` では *定義されていません* が、サブクラスで特定の *protocol* のリクエストのプリプロセスを行いたい場合には定義する必要があります。"

#: ../../library/urllib2.rst:632
msgid ""
"This method, if defined, will be called by the parent "
":class:`OpenerDirector`. *req* will be a :class:`Request` object. The return"
" value should be a :class:`Request` object."
msgstr "このメソッドが定義されていると、親となる :class:`OpenerDirector` から呼び出されます。その際、 *req* は :class:`Request` オブジェクトになります。戻り値は :class:`Request` オブジェクトでなければなりません。"

#: ../../library/urllib2.rst:642
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to post-process responses of the given *protocol*."
msgstr "このメソッドは :class:`BaseHandler` では *定義されていません* が、サブクラスで特定の *protocol* のリクエストのポストプロセスを行いたい場合には定義する必要があります。"

#: ../../library/urllib2.rst:645
msgid ""
"This method, if defined, will be called by the parent "
":class:`OpenerDirector`. *req* will be a :class:`Request` object. *response*"
" will be an object implementing the same interface as the return value of "
":func:`urlopen`.  The return value should implement the same interface as "
"the return value of :func:`urlopen`."
msgstr "このメソッドが定義されていると、親となる :class:`OpenerDirector` から呼び出されます。その際、 *req* は :class:`Request` オブジェクトになります。 *response* は :func:`urlopen` の戻り値と同じインタフェースを 実装したオブジェクトになります。戻り値もまた、 :func:`urlopen` の戻り値と同じインタフェースを実装したオブジェクトでなければなりません。"

#: ../../library/urllib2.rst:655
msgid "HTTPRedirectHandler Objects"
msgstr "HTTPRedirectHandler オブジェクト"

#: ../../library/urllib2.rst:659
msgid ""
"Some HTTP redirections require action from this module's client code.  If "
"this is the case, :exc:`HTTPError` is raised.  See :rfc:`2616` for details "
"of the precise meanings of the various redirection codes."
msgstr "HTTP リダイレクトによっては、このモジュールのクライアントコード側での処理を必要とします。その場合、 :exc:`HTTPError` が送出されます。 様々なリダイレクトコードの厳密な意味に関する詳細は :rfc:`2616` を参照してください。"

#: ../../library/urllib2.rst:666
msgid ""
"Return a :class:`Request` or ``None`` in response to a redirect. This is "
"called by the default implementations of the :meth:`http_error_30\\*` "
"methods when a redirection is received from the server.  If a redirection "
"should take place, return a new :class:`Request` to allow "
":meth:`http_error_30\\*` to perform the redirect to *newurl*.  Otherwise, "
"raise :exc:`HTTPError` if no other handler should try to handle this URL, or"
" return ``None`` if you can't but another handler might."
msgstr "リダイレクトの通知に応じて、 :class:`Request` または ``None`` を返します。このメソッドは ``http_error_30*()`` メソッドにおいて、リダイレクトの通知をサーバから受信した際に、デフォルトの実装として呼び出されます。リダイレクトを起こす場合、新たな :class:`Request` を生成して、 ``http_error_30*()`` が *newurl* へリダイレクトを実行できるようにします。 そうでない場合、他のどのハンドラにもこの URL を処理させたくなければ :exc:`HTTPError` を送出し、 リダイレクト処理を行うことはできないが他のハンドラなら可能かもしれない場合には ``None`` を返します。"

#: ../../library/urllib2.rst:676
msgid ""
"The default implementation of this method does not strictly follow "
":rfc:`2616`, which says that 301 and 302 responses to ``POST`` requests must"
" not be automatically redirected without confirmation by the user.  In "
"reality, browsers do allow automatic redirection of these responses, "
"changing the POST to a ``GET``, and the default implementation reproduces "
"this behavior."
msgstr "このメソッドのデフォルトの実装は、 :rfc:`2616` に厳密に従ったものではありません。 :rfc:`2616` では、 ``POST`` リクエストに対する 301 および 302 応答が、ユーザの承認なく自動的にリダイレクトされてはならないと述べています。現実には、ブラウザは POST を ``GET`` に変更することで、これらの応答に対して自動的にリダイレクトを行えるようにしています。デフォルトの実装でも、この挙動を再現しています。"

#: ../../library/urllib2.rst:685
msgid ""
"Redirect to the ``Location:`` or ``URI:`` URL.  This method is called by the"
" parent :class:`OpenerDirector` when getting an HTTP 'moved permanently' "
"response."
msgstr "``Location:`` か ``URI:`` のURL にリダイレクトします。このメソッドは HTTP  における 'moved permanently' レスポンスを取得した際に 親オブジェクトとなる :class:`OpenerDirector` によって呼び出されます。"

#: ../../library/urllib2.rst:691
msgid ""
"The same as :meth:`http_error_301`, but called for the 'found' response."
msgstr ":meth:`http_error_301` と同じですが、'found' レスポンスに対して呼び出されます。"

#: ../../library/urllib2.rst:696
msgid ""
"The same as :meth:`http_error_301`, but called for the 'see other' response."
msgstr ":meth:`http_error_301` と同じですが、'see other' レスポンスに対して呼び出されます。"

#: ../../library/urllib2.rst:701
msgid ""
"The same as :meth:`http_error_301`, but called for the 'temporary redirect' "
"response."
msgstr ":meth:`http_error_301` と同じですが、'temporary redirect'  レスポンスに対して呼び出されます。"

#: ../../library/urllib2.rst:708
msgid "HTTPCookieProcessor Objects"
msgstr "HTTPCookieProcessor オブジェクト"

#: ../../library/urllib2.rst:712
msgid ":class:`HTTPCookieProcessor` instances have one attribute:"
msgstr ":class:`HTTPCookieProcessor` インスタンスは属性をひとつだけ持ちます:"

#: ../../library/urllib2.rst:717
msgid "The :class:`cookielib.CookieJar` in which cookies are stored."
msgstr "クッキーの入っている :class:`cookielib.CookieJar` オブジェクトです。"

#: ../../library/urllib2.rst:723
msgid "ProxyHandler Objects"
msgstr "ProxyHandler オブジェクト"

#: ../../library/urllib2.rst:731
msgid ""
"The :class:`ProxyHandler` will have a method :samp:`{protocol}_open` for "
"every *protocol* which has a proxy in the *proxies* dictionary given in the "
"constructor.  The method will modify requests to go through the proxy, by "
"calling ``request.set_proxy()``, and call the next handler in the chain to "
"actually execute the protocol."
msgstr ":class:`ProxyHandler` は、コンストラクタで与えた辞書 *proxies* にプロキシが設定されているような *protocol* 全てについて、メソッド  :samp:`{protocol}_open` を持つことになります。このメソッドは ``request.set_proxy()`` を呼び出して、リクエストがプロキシを通過できるように修正します。その後連鎖するハンドラの中から次のハンドラを呼び出して実際にプロトコルを実行します。"

#: ../../library/urllib2.rst:741
msgid "HTTPPasswordMgr Objects"
msgstr "HTTPPasswordMgr オブジェクト"

#: ../../library/urllib2.rst:743
msgid ""
"These methods are available on :class:`HTTPPasswordMgr` and "
":class:`HTTPPasswordMgrWithDefaultRealm` objects."
msgstr "以下のメソッドは :class:`HTTPPasswordMgr` および :class:`HTTPPasswordMgrWithDefaultRealm` オブジェクトで利用できます。"

#: ../../library/urllib2.rst:749
msgid ""
"*uri* can be either a single URI, or a sequence of URIs. *realm*, *user* and"
" *passwd* must be strings. This causes ``(user, passwd)`` to be used as "
"authentication tokens when authentication for *realm* and a super-URI of any"
" of the given URIs is given."
msgstr "*uri* は単一の URI でも複数の URI からなるシーケンスでもかまいません。 *realm* 、 *user* および *passwd* は文字列でなくてはなりません。このメソッドによって、 *realm* と与えられた URI の上位 URI に対して ``(user, passwd)`` が認証トークンとして使われるようになります。"

#: ../../library/urllib2.rst:757
msgid ""
"Get user/password for given realm and URI, if any.  This method will return "
"``(None, None)`` if there is no matching user/password."
msgstr "与えられたレルムおよび URI に対するユーザ名またはパスワードがあればそれを取得します。該当するユーザ名／パスワードが存在しない場合、このメソッドは ``(None, None)`` を返します。"

#: ../../library/urllib2.rst:760
msgid ""
"For :class:`HTTPPasswordMgrWithDefaultRealm` objects, the realm ``None`` "
"will be searched if the given *realm* has no matching user/password."
msgstr ":class:`HTTPPasswordMgrWithDefaultRealm` オブジェクトでは、与えられた *realm* に対して該当するユーザ名/パスワードが存在しない場合、レルム ``None`` が検索されます。"

#: ../../library/urllib2.rst:767
msgid "AbstractBasicAuthHandler Objects"
msgstr "AbstractBasicAuthHandler オブジェクト"

#: ../../library/urllib2.rst:772
msgid ""
"Handle an authentication request by getting a user/password pair, and re-"
"trying the request.  *authreq* should be the name of the header where the "
"information about the realm is included in the request, *host* specifies the"
" URL and path to authenticate for, *req* should be the (failed) "
":class:`Request` object, and *headers* should be the error headers."
msgstr "ユーザ名／パスワードを取得し、再度サーバへのリクエストを試みることで、サーバからの認証リクエストを処理します。 *authreq* はリクエストにおいて レルムに関する情報が含まれているヘッダの名前、 *host* は認証を行う対象の URL とパスを指定します、 *req* は (失敗した) :class:`Request` オブジェクト、そして *headers* はエラーヘッダでなくてはなりません。"

#: ../../library/urllib2.rst:778
msgid ""
"*host* is either an authority (e.g. ``\"python.org\"``) or a URL containing "
"an authority component (e.g. ``\"http://python.org/\"``). In either case, "
"the authority must not contain a userinfo component (so, ``\"python.org\"`` "
"and ``\"python.org:80\"`` are fine, ``\"joe:password@python.org\"`` is not)."
msgstr "*host* は、オーソリティ (例 ``\"python.org\"``) か、オーソリティコンポーネントを含む URL (例 ``\"http://python.org\"``) です。どちらの場合も、オーソリティはユーザ情報コンポーネントを含んではいけません (なので、 ``\"python.org\"`` や ``\"python.org:80\"`` は正しく、 ``\"joe:password@python.org\"`` は不正です) 。"

#: ../../library/urllib2.rst:787
msgid "HTTPBasicAuthHandler Objects"
msgstr "HTTPBasicAuthHandler オブジェクト"

#: ../../library/urllib2.rst:792 ../../library/urllib2.rst:803
#: ../../library/urllib2.rst:828 ../../library/urllib2.rst:839
msgid "Retry the request with authentication information, if available."
msgstr "認証情報がある場合、認証情報付きで再度リクエストを試みます。"

#: ../../library/urllib2.rst:798
msgid "ProxyBasicAuthHandler Objects"
msgstr "ProxyBasicAuthHandler オブジェクト"

#: ../../library/urllib2.rst:809
msgid "AbstractDigestAuthHandler Objects"
msgstr "AbstractDigestAuthHandler オブジェクト"

#: ../../library/urllib2.rst:814
msgid ""
"*authreq* should be the name of the header where the information about the "
"realm is included in the request, *host* should be the host to authenticate "
"to, *req* should be the (failed) :class:`Request` object, and *headers* "
"should be the error headers."
msgstr "*authreq* はリクエストにおいてレルムに関する情報が含まれているヘッダの名前、 *host* は認証を行う対象のホスト名、 *req* は  (失敗した) :class:`Request` オブジェクト、そして *headers* はエラーヘッダでなくてはなりません。"

#: ../../library/urllib2.rst:823
msgid "HTTPDigestAuthHandler Objects"
msgstr "HTTPDigestAuthHandler オブジェクト"

#: ../../library/urllib2.rst:834
msgid "ProxyDigestAuthHandler Objects"
msgstr "ProxyDigestAuthHandler オブジェクト"

#: ../../library/urllib2.rst:845
msgid "HTTPHandler Objects"
msgstr "HTTPHandler オブジェクト"

#: ../../library/urllib2.rst:850
msgid ""
"Send an HTTP request, which can be either GET or POST, depending on "
"``req.has_data()``."
msgstr "HTTP リクエストを送ります。 ``req.has_data()`` に応じて、 GET または POST のどちらでも送ることができます。"

#: ../../library/urllib2.rst:857
msgid "HTTPSHandler Objects"
msgstr "HTTPSHandler オブジェクト"

#: ../../library/urllib2.rst:862
msgid ""
"Send an HTTPS request, which can be either GET or POST, depending on "
"``req.has_data()``."
msgstr "HTTPS リクエストを送ります。 ``req.has_data()`` に応じて、 GET または POST のどちらでも送ることができます。"

#: ../../library/urllib2.rst:869
msgid "FileHandler Objects"
msgstr "FileHandler オブジェクト"

#: ../../library/urllib2.rst:874
msgid ""
"Open the file locally, if there is no host name, or the host name is "
"``'localhost'``. Change the protocol to ``ftp`` otherwise, and retry opening"
" it using :attr:`parent`."
msgstr "ホスト名がない場合、またはホスト名が ``'localhost'`` の場合にファイルをローカルでオープンします。そうでない場合、プロトコルを ``ftp`` に切り替え、 :attr:`parent` を使って再度オープンを試みます。"

#: ../../library/urllib2.rst:882
msgid "FTPHandler Objects"
msgstr "FTPHandler オブジェクト"

#: ../../library/urllib2.rst:887
msgid ""
"Open the FTP file indicated by *req*. The login is always done with empty "
"username and password."
msgstr "*req* で表されるファイルを FTP 越しにオープンします。ログインは常に空のユーザネームおよびパスワードで行われます。"

#: ../../library/urllib2.rst:894
msgid "CacheFTPHandler Objects"
msgstr "CacheFTPHandler オブジェクト"

#: ../../library/urllib2.rst:896
msgid ""
":class:`CacheFTPHandler` objects are :class:`FTPHandler` objects with the "
"following additional methods:"
msgstr ":class:`CacheFTPHandler` オブジェクトは :class:`FTPHandler` オブジェクトに以下のメソッドを追加したものです:"

#: ../../library/urllib2.rst:902
msgid "Set timeout of connections to *t* seconds."
msgstr "接続のタイムアウトを *t* 秒に設定します。"

#: ../../library/urllib2.rst:907
msgid "Set maximum number of cached connections to *m*."
msgstr "キャッシュ付き接続の最大接続数を *m* に設定します。"

#: ../../library/urllib2.rst:913
msgid "UnknownHandler Objects"
msgstr "UnknownHandler オブジェクト"

#: ../../library/urllib2.rst:918
msgid "Raise a :exc:`URLError` exception."
msgstr "例外 :exc:`URLError` を送出します。"

#: ../../library/urllib2.rst:924
msgid "HTTPErrorProcessor Objects"
msgstr "HTTPErrorProcessor オブジェクト"

#: ../../library/urllib2.rst:933
msgid "For 200 error codes, the response object is returned immediately."
msgstr "エラーコード 200 の場合、レスポンスオブジェクトを即座に返します。"

#: ../../library/urllib2.rst:935
msgid ""
"For non-200 error codes, this simply passes the job on to the "
":samp:`{protocol}_error_code` handler methods, via "
":meth:`OpenerDirector.error`.  Eventually, "
":class:`urllib2.HTTPDefaultErrorHandler` will raise an :exc:`HTTPError` if "
"no other handler handles the error."
msgstr "200 以外のエラーコードの場合、 :meth:`OpenerDirector.error` を介して :samp:`{protocol}_error_code` メソッドに仕事を引き渡します。最終的にどのハンドラもエラーを処理しなかった 場合、 :class:`urllib2.HTTPDefaultErrorHandler` が :exc:`HTTPError` を送出します。"

#: ../../library/urllib2.rst:943
msgid "Process HTTPS error responses."
msgstr "HTTPS エラー応答の処理をします。"

#: ../../library/urllib2.rst:945
msgid "The behavior is same as :meth:`http_response`."
msgstr "振る舞いは :meth:`http_response` と同じです。"

#: ../../library/urllib2.rst:951
msgid "Examples"
msgstr "例"

#: ../../library/urllib2.rst:953
msgid ""
"This example gets the python.org main page and displays the first 100 bytes "
"of it::"
msgstr "以下の例では、 python.org のメインページを取得して、その最初の 100 バイト分を表示します::"

#: ../../library/urllib2.rst:962
msgid ""
"Here we are sending a data-stream to the stdin of a CGI and reading the data"
" it returns to us. Note that this example will only work when the Python "
"installation supports SSL. ::"
msgstr "今度は CGI の標準入力にデータストリームを送信し、CGI が返すデータを読み出します。この例は Python が SSL をサポートしている場合にのみ 動作することに注意してください。 ::"

#: ../../library/urllib2.rst:973
msgid "The code for the sample CGI used in the above example is::"
msgstr "上の例で使われているサンプルの CGI は以下のようになっています::"

#: ../../library/urllib2.rst:980
msgid "Use of Basic HTTP Authentication::"
msgstr "以下はベーシック HTTP 認証の例です::"

#: ../../library/urllib2.rst:994
msgid ""
":func:`build_opener` provides many handlers by default, including a "
":class:`ProxyHandler`.  By default, :class:`ProxyHandler` uses the "
"environment variables named ``<scheme>_proxy``, where ``<scheme>`` is the "
"URL scheme involved.  For example, the :envvar:`http_proxy` environment "
"variable is read to obtain the HTTP proxy's URL."
msgstr ":func:`build_opener` はデフォルトで沢山のハンドラを提供しており、その中に :class:`ProxyHandler` があります。デフォルトでは、 :class:`ProxyHandler` は ``<scheme>_proxy`` という環境変数を使います。 ここで ``<scheme>`` は URL スキームです。例えば、 HTTP プロキシの URL を得るには、環境変数 :envvar:`http_proxy` を読み出します。"

#: ../../library/urllib2.rst:1000
msgid ""
"This example replaces the default :class:`ProxyHandler` with one that uses "
"programmatically-supplied proxy URLs, and adds proxy authorization support "
"with :class:`ProxyBasicAuthHandler`. ::"
msgstr "この例では、デフォルトの :class:`ProxyHandler` を置き換えてプログラム的に作成したプロキシ URL を使うようにし、 :class:`ProxyBasicAuthHandler` でプロキシ認証サポートを追加します。 ::"

#: ../../library/urllib2.rst:1012
msgid "Adding HTTP headers:"
msgstr "以下は HTTP ヘッダを追加する例です:"

#: ../../library/urllib2.rst:1014
msgid "Use the *headers* argument to the :class:`Request` constructor, or::"
msgstr "*headers* 引数を使って :class:`Request` コンストラクタを呼び出す方法の他に、以下のようにできます::"

#: ../../library/urllib2.rst:1021
msgid ""
":class:`OpenerDirector` automatically adds a :mailheader:`User-Agent` header"
" to every :class:`Request`.  To change this::"
msgstr ":class:`OpenerDirector` は全ての :class:`Request` に :mailheader:`User-Agent` ヘッダを自動的に追加します。これを変更するには以下のようにします::"

#: ../../library/urllib2.rst:1029
msgid ""
"Also, remember that a few standard headers (:mailheader:`Content-Length`, "
":mailheader:`Content-Type` and :mailheader:`Host`) are added when the "
":class:`Request` is passed to :func:`urlopen` (or "
":meth:`OpenerDirector.open`)."
msgstr "また、 :class:`Request` が :func:`urlopen` (や :meth:`OpenerDirector.open`)に渡される際には、いくつかの標準ヘッダ (:mailheader:`Content-Length`, :mailheader:`Content-Type` および :mailheader:`Host`) も追加されることを忘れないでください。"
