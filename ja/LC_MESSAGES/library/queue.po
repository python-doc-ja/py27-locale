# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# cocoatomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-02 22:50+0200\n"
"PO-Revision-Date: 2017-04-11 02:32+0000\n"
"Last-Translator: cocoatomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../Doc/library/queue.rst:2
msgid ":mod:`Queue` --- A synchronized queue class"
msgstr ":mod:`Queue` --- 同期キュークラス"

#: ../Doc/library/queue.rst:8
msgid ""
"The :mod:`Queue` module has been renamed to :mod:`queue` in Python 3.  The "
":term:`2to3` tool will automatically adapt imports when converting your "
"sources to Python 3."
msgstr ":mod:`Queue` モジュールは、Python 3 では :mod:`queue` にリネームされました。 :term:`2to3` ツールが自動的にソースコードの import を修正します。"

#: ../Doc/library/queue.rst:12
msgid "**Source code:** :source:`Lib/Queue.py`"
msgstr "**ソースコード:** :source:`Lib/Queue.py`"

#: ../Doc/library/queue.rst:16
msgid ""
"The :mod:`Queue` module implements multi-producer, multi-consumer queues. It"
" is especially useful in threaded programming when information must be "
"exchanged safely between multiple threads.  The :class:`~Queue.Queue` class "
"in this module implements all the required locking semantics.  It depends on"
" the availability of thread support in Python; see the :mod:`threading` "
"module."
msgstr ":mod:`Queue` モジュールは、複数プロデューサ-複数コンシューマ (multi-producer, multi-consumer) キューを実装します。これは、複数のスレッドの間で情報を安全に交換しなければならないときのマルチスレッドプログラミングで特に有益です。このモジュールの :class:`~Queue.Queue` クラスは、必要なすべてのロックセマンティクスを実装しています。これはPythonのスレッドサポートの状況に依存します。 :mod:`threading` モジュールを参照してください。"

#: ../Doc/library/queue.rst:23
msgid ""
"The module implements three types of queue, which differ only in the order "
"in which the entries are retrieved.  In a FIFO queue, the first tasks added "
"are the first retrieved. In a LIFO queue, the most recently added entry is "
"the first retrieved (operating like a stack).  With a priority queue, the "
"entries are kept sorted (using the :mod:`heapq` module) and the lowest "
"valued entry is retrieved first."
msgstr "このモジュールでは3種類のキューが実装されています。それらはキューから取り出されるエントリの順番だけが違います。 FIFOキューでは、最初に追加されたエントリが最初に取り出されます。 LIFOキューでは、最後に追加されたエントリが最初に取り出されます(スタックのように振る舞います)。 優先順位付きキュー(priority queue)では、エントリは(:mod:`heapq` モジュールを利用して)ソートされ、 最も低い値のエントリが最初に取り出されます。"

#: ../Doc/library/queue.rst:30
msgid "The :mod:`Queue` module defines the following classes and exceptions:"
msgstr ":mod:`Queue` モジュールは以下のクラスと例外を定義します:"

#: ../Doc/library/queue.rst:34
msgid ""
"Constructor for a FIFO queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue.  "
"Insertion will block once this size has been reached, until queue items are "
"consumed.  If *maxsize* is less than or equal to zero, the queue size is "
"infinite."
msgstr "FIFOキューのコンストラクタです。*maxsize* はキューに置くことのできる要素数の上限を設定する整数です。いったんこの大きさに達したら、挿入はキューの要素が消費されるまでブロックされます。もし *maxsize* が0以下であるならば、キューの大きさは無限です。"

#: ../Doc/library/queue.rst:41
msgid ""
"Constructor for a LIFO queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue.  "
"Insertion will block once this size has been reached, until queue items are "
"consumed.  If *maxsize* is less than or equal to zero, the queue size is "
"infinite."
msgstr "LIFOキューのコンストラクタです。*maxsize* はキューに置くことのできる要素数の上限を設定する整数です。いったんこの大きさに達したら、挿入はキューの要素が消費されるまでブロックされます。もし *maxsize* が0以下であるならば、キューの大きさは無限です。"

#: ../Doc/library/queue.rst:50
msgid ""
"Constructor for a priority queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue.  "
"Insertion will block once this size has been reached, until queue items are "
"consumed.  If *maxsize* is less than or equal to zero, the queue size is "
"infinite."
msgstr "優先順位付きキューのコンストラクタです。*maxsize* はキューに置くことのできる要素数の上限を設定する整数です。いったんこの大きさに達したら、挿入はキューの要素が消費されるまでブロックされます。もし *maxsize* が0以下であるならば、キューの大きさは無限です。"

#: ../Doc/library/queue.rst:55
msgid ""
"The lowest valued entries are retrieved first (the lowest valued entry is "
"the one returned by ``sorted(list(entries))[0]``).  A typical pattern for "
"entries is a tuple in the form: ``(priority_number, data)``."
msgstr "最小の値を持つ要素が最初に検索されます (最小の値を持つ値は、``sorted(list(entries))[0]`` によって返されるものです)。典型的な要素のパターンは、``(priority_number, data)`` 形式のタプルです。"

#: ../Doc/library/queue.rst:63
msgid ""
"Exception raised when non-blocking :meth:`~Queue.get` (or "
":meth:`~Queue.get_nowait`) is called on a :class:`~Queue.Queue` object which"
" is empty."
msgstr "空な :class:`~Queue.Queue` オブジェクトで、非ブロックメソッドとして :meth:`~Queue.get` (または :meth:`~Queue.get_nowait`) が呼ばれたとき、送出される例外です。"

#: ../Doc/library/queue.rst:70
msgid ""
"Exception raised when non-blocking :meth:`~Queue.put` (or "
":meth:`~Queue.put_nowait`) is called on a :class:`~Queue.Queue` object which"
" is full."
msgstr ""

#: ../Doc/library/queue.rst:76
msgid ""
":class:`collections.deque` is an alternative implementation of unbounded "
"queues with fast atomic :func:`append` and :func:`popleft` operations that "
"do not require locking."
msgstr ":class:`collections.deque` は、ロックなしで :func:`popleft` や :func:`append` といったアトミック操作が可能なキューの実装です。"

#: ../Doc/library/queue.rst:84
msgid "Queue Objects"
msgstr "キューオブジェクト"

#: ../Doc/library/queue.rst:86
msgid ""
"Queue objects (:class:`~Queue.Queue`, :class:`LifoQueue`, or "
":class:`PriorityQueue`) provide the public methods described below."
msgstr ""

#: ../Doc/library/queue.rst:92
msgid ""
"Return the approximate size of the queue.  Note, qsize() > 0 doesn't "
"guarantee that a subsequent get() will not block, nor will qsize() < maxsize"
" guarantee that put() will not block."
msgstr "キューの近似サイズを返します。ここで、qsize() > 0 は後続の get() がブロックしないことを保証しないこと、また qsize() < maxsize が put() がブロックしないことを保証しないことに注意してください。"

#: ../Doc/library/queue.rst:99
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  If empty() "
"returns ``True`` it doesn't guarantee that a subsequent call to put() will "
"not block.  Similarly, if empty() returns ``False`` it doesn't guarantee "
"that a subsequent call to get() will not block."
msgstr "キューが空の場合は ``True`` を返し、そうでなければ ``False`` を返します。empty() が ``True`` を返しても、後続の put() の呼び出しがブロックしないことは保証されません。同様に、empty() が ``False`` を返しても、後続の get() の呼び出しがブロックしないことは保証されません。"

#: ../Doc/library/queue.rst:107
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  If full() "
"returns ``True`` it doesn't guarantee that a subsequent call to get() will "
"not block.  Similarly, if full() returns ``False`` it doesn't guarantee that"
" a subsequent call to put() will not block."
msgstr "キューが一杯の場合は ``True`` を返し、そうでなければ ``False`` を返します。full() が ``True`` を返しても、後続の get() の呼び出しがブロックしないことは保証されません。同様に、full() が ``False`` を返しても、後続の put() の呼び出しがブロックしないことは保証されません。"

#: ../Doc/library/queue.rst:115
msgid ""
"Put *item* into the queue. If optional args *block* is true and *timeout* is"
" ``None`` (the default), block if necessary until a free slot is available. "
"If *timeout* is a positive number, it blocks at most *timeout* seconds and "
"raises the :exc:`Full` exception if no free slot was available within that "
"time. Otherwise (*block* is false), put an item on the queue if a free slot "
"is immediately available, else raise the :exc:`Full` exception (*timeout* is"
" ignored in that case)."
msgstr "*item* をキューに入れます。\nもしオプション引数 *block* が真で *timeout* が ``None`` (デフォルト) の場合は、必要であればフリースロットが利用可能になるまでブロックします。\n*timeout* が正の数の場合は、最大で *timeout* 秒間ブロックし、その時間内に空きスロットが利用可能にならなければ、例外 :exc:`Full` を送出します。\nそうでない場合 (*block* が偽) は、空きスロットが直ちに利用できるならば、キューにアイテムを置きます。\nできないならば、例外 :exc:`Full` を送出します (この場合 *timeout* は無視されます)。"

#: ../Doc/library/queue.rst:123 ../Doc/library/queue.rst:141
msgid "The *timeout* parameter."
msgstr "*timeout* パラメータが追加されました。"

#: ../Doc/library/queue.rst:129
msgid "Equivalent to ``put(item, False)``."
msgstr "``put(item, False)`` と等価です。"

#: ../Doc/library/queue.rst:134
msgid ""
"Remove and return an item from the queue. If optional args *block* is true "
"and *timeout* is ``None`` (the default), block if necessary until an item is"
" available. If *timeout* is a positive number, it blocks at most *timeout* "
"seconds and raises the :exc:`Empty` exception if no item was available "
"within that time. Otherwise (*block* is false), return an item if one is "
"immediately available, else raise the :exc:`Empty` exception (*timeout* is "
"ignored in that case)."
msgstr "キューからアイテムを取り除き、それを返します。\nオプション引数 *block* が真で *timeout* が ``None`` (デフォルト) の場合は、必要であればアイテムが取り出せるようになるまでブロックします。\nもし *timeout* が正の数の場合は、最大で *timeout* 秒間ブロックし、その時間内でアイテムが取り出せるようにならなければ、例外 :exc:`Empty` を送出します。\nそうでない場合 (*block* が偽) は、直ちにアイテムが取り出せるならば、それを返します。\nできないならば、例外 :exc:`Empty` を送出します (この場合 *timeout* は無視されます)。"

#: ../Doc/library/queue.rst:147
msgid "Equivalent to ``get(False)``."
msgstr "``get(False)`` と等価です。"

#: ../Doc/library/queue.rst:149
msgid ""
"Two methods are offered to support tracking whether enqueued tasks have been"
" fully processed by daemon consumer threads."
msgstr "キューに入れられたタスクが全てコンシューマスレッドに処理されたかどうかを追跡するために 2つのメソッドが提供されます。"

#: ../Doc/library/queue.rst:155
msgid ""
"Indicate that a formerly enqueued task is complete.  Used by queue consumer "
"threads.  For each :meth:`get` used to fetch a task, a subsequent call to "
":meth:`task_done` tells the queue that the processing on the task is "
"complete."
msgstr "過去にキューに入れられたタスクが完了した事を示します。キューのコンシューマスレッドに利用されます。タスクの取り出しに使われた、各 :meth:`get` に対して、それに続く :meth:`task_done` の呼び出しは、取り出したタスクに対する処理が完了した事をキューに教えます。"

#: ../Doc/library/queue.rst:159
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every"
" item that had been :meth:`put` into the queue)."
msgstr ":meth:`join` がブロックされていた場合、全itemが処理された (キューに :meth:`put` された全てのitemに対して :meth:`task_done` が呼び出されたことを意味します) 時に復帰します。"

#: ../Doc/library/queue.rst:163
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items placed"
" in the queue."
msgstr "キューにある要素より多く呼び出された場合 :exc:`ValueError` が発生します。"

#: ../Doc/library/queue.rst:171
msgid "Blocks until all items in the queue have been gotten and processed."
msgstr "キューの中の全アイテムが処理される間でブロックします。"

#: ../Doc/library/queue.rst:173
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls "
":meth:`task_done` to indicate that the item was retrieved and all work on it"
" is complete. When the count of unfinished tasks drops to zero, :meth:`join`"
" unblocks."
msgstr "キューにitemが追加される度に、未完了タスクカウントが増やされます。コンシューマスレッドが :meth:`task_done` を呼び出して、itemを受け取ってそれに対する処理が完了した事を知らせる度に、未完了タスクカウントが減らされます。未完了タスクカウントが0になったときに、 :meth:`join`  のブロックが解除されます。"

#: ../Doc/library/queue.rst:180
msgid "Example of how to wait for enqueued tasks to be completed::"
msgstr "キューに入れたタスクが完了するのを待つ例::"
