# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2017, Python Software Foundation (translated by Python ドキュメント日本語翻訳プロジェクト)
# This file is distributed under the same license as the Python package.
# 
# Translators:
# cocoatomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2017-09-22 17:56+0000\n"
"Last-Translator: cocoatomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/test.rst:3
msgid ":mod:`test` --- Regression tests package for Python"
msgstr ":mod:`test` --- Python 用回帰テストパッケージ"

#: ../../library/test.rst:10
msgid ""
"The :mod:`test` package is meant for internal use by Python only. It is "
"documented for the benefit of the core developers of Python. Any use of this"
" package outside of Python's standard library is discouraged as code "
"mentioned here can change or be removed without notice between releases of "
"Python."
msgstr ":mod:`test` パッケージは、 Python の内部で使用されるためのものです。ドキュメントが書かれたのは Python のコア開発者の利便性を考えてのことです。 Python の標準ライブラリ以外でこのパッケージを使用することは、あまりお勧めできません。ここで触れられているコードは、Python のリリースの間に予告なく変更されたり削除されたりすることがあります。"

#: ../../library/test.rst:17
msgid ""
"The :mod:`test` package contains all regression tests for Python as well as "
"the modules :mod:`test.test_support` and :mod:`test.regrtest`. "
":mod:`test.test_support` is used to enhance your tests while "
":mod:`test.regrtest` drives the testing suite."
msgstr ":mod:`test` パッケージには、Python 用の全ての回帰テストの他に、 :mod:`test.test_support` モジュールと :mod:`test.regrtest` モジュールが入っています。 :mod:`test.test_support` はテストを充実させるために使い、 :mod:`test.regrtest` はテストスイートを実行するのに使います。"

#: ../../library/test.rst:22
msgid ""
"Each module in the :mod:`test` package whose name starts with ``test_`` is a"
" testing suite for a specific module or feature. All new tests should be "
"written using the :mod:`unittest` or :mod:`doctest` module.  Some older "
"tests are written using a \"traditional\" testing style that compares output"
" printed to ``sys.stdout``; this style of test is considered deprecated."
msgstr ":mod:`test` パッケージ内のモジュールのうち、名前が ``test_`` で始まるものは、特定のモジュールや機能に対するテストスイートです。新しいテストはすべて :mod:`unittest` か :mod:`doctest` モジュールを使って書くようにしてください。古いテストのいくつかは、 ``sys.stdout`` への出力を比較する「従来の」テスト形式になっていますが、この形式のテストは廃止予定です。"

#: ../../library/test.rst:32
msgid "Module :mod:`unittest`"
msgstr ":mod:`unittest` モジュール"

#: ../../library/test.rst:32
msgid "Writing PyUnit regression tests."
msgstr "PyUnit 回帰テストを書く。"

#: ../../library/test.rst:34
msgid "Module :mod:`doctest`"
msgstr ":mod:`doctest` モジュール"

#: ../../library/test.rst:35
msgid "Tests embedded in documentation strings."
msgstr "ドキュメンテーション文字列に埋め込まれたテスト。"

#: ../../library/test.rst:41
msgid "Writing Unit Tests for the :mod:`test` package"
msgstr ":mod:`test` パッケージのためのユニットテストを書く"

#: ../../library/test.rst:43
msgid ""
"It is preferred that tests that use the :mod:`unittest` module follow a few "
"guidelines. One is to name the test module by starting it with ``test_`` and"
" end it with the name of the module being tested. The test methods in the "
"test module should start with ``test_`` and end with a description of what "
"the method is testing. This is needed so that the methods are recognized by "
"the test driver as test methods. Also, no documentation string for the "
"method should be included. A comment (such as ``# Tests function returns "
"only True or False``) should be used to provide documentation for test "
"methods. This is done because documentation strings get printed out if they "
"exist and thus what test is being run is not stated."
msgstr ":mod:`unittest` モジュールを使ってテストを書く場合、幾つかのガイドラインに従うことが推奨されます。 1つは、テストモジュールの名前を、 ``test_`` で始め、テスト対象となるモジュール名で終えることです。テストモジュール中のテストメソッドは名前を ``test_`` で始めて、そのメソッドが何をテストしているかという説明で終えます。これはテスト実行プログラムが、そのメソッドをテストメソッドとして認識するために必要です。また、テストメソッドにはドキュメンテーション文字列を入れるべきではありません。コメント（例えば ``# True あるいは False だけを返すテスト関数`` ）を使用して、テストメソッドのドキュメントを記述してください。これは、ドキュメンテーション文字列が存在する場合はその内容が出力されてしまうため、どのテストを実行しているのかをいちいち表示したくないからです。"

#: ../../library/test.rst:54
msgid "A basic boilerplate is often used::"
msgstr "以下のような決まり文句を使います::"

#: ../../library/test.rst:93
msgid ""
"This boilerplate code allows the testing suite to be run by "
":mod:`test.regrtest` as well as on its own as a script."
msgstr "この定型的なコードによって、テストスイートを :mod:`regrtest.py` から起動できると同時に、スクリプト自体からも実行できるようになります。"

#: ../../library/test.rst:96
msgid ""
"The goal for regression testing is to try to break code. This leads to a few"
" guidelines to be followed:"
msgstr "回帰テストの目的はコードを解き明かすことです。そのためには以下のいくつかのガイドラインに従ってください:"

#: ../../library/test.rst:99
msgid ""
"The testing suite should exercise all classes, functions, and constants. "
"This includes not just the external API that is to be presented to the "
"outside world but also \"private\" code."
msgstr "テストスイートから、すべてのクラス、関数および定数を実行するべきです。これには外部に公開される外部APIだけでなく「プライベートな」コードも含みます。"

#: ../../library/test.rst:103
msgid ""
"Whitebox testing (examining the code being tested when the tests are being "
"written) is preferred. Blackbox testing (testing only the published user "
"interface) is not complete enough to make sure all boundary and edge cases "
"are tested."
msgstr "ホワイトボックス・テスト（対象のコードの詳細を元にテストを書くこと）を推奨します。ブラックボックス・テスト（公開されるインタフェース仕様だけをテストすること）は、すべての境界条件を確実にテストするには完全ではありません。"

#: ../../library/test.rst:108
msgid ""
"Make sure all possible values are tested including invalid ones. This makes "
"sure that not only all valid values are acceptable but also that improper "
"values are handled correctly."
msgstr "すべての取りうる値を、無効値も含めてテストするようにしてください。そのようなテストを書くことで、全ての有効値が通るだけでなく、不適切な値が正しく処理されることも確認できます。"

#: ../../library/test.rst:112
msgid ""
"Exhaust as many code paths as possible. Test where branching occurs and thus"
" tailor input to make sure as many different paths through the code are "
"taken."
msgstr "コード内のできる限り多くのパスを網羅してください。分岐するように入力を調整したテストを書くことで、コードの多くのパスをたどることができます。"

#: ../../library/test.rst:115
msgid ""
"Add an explicit test for any bugs discovered for the tested code. This will "
"make sure that the error does not crop up again if the code is changed in "
"the future."
msgstr "テスト対象のコードにバグが発見された場合は、明示的にテスト追加するようにしてください。そのようなテストを追加することで、将来コードを変更した際にエラーが再発することを防止できます。"

#: ../../library/test.rst:119
msgid ""
"Make sure to clean up after your tests (such as close and remove all "
"temporary files)."
msgstr "テストの後始末 (例えば一時ファイルをすべて閉じたり削除したりすること) を必ず行ってください。"

#: ../../library/test.rst:122
msgid ""
"If a test is dependent on a specific condition of the operating system then "
"verify the condition already exists before attempting the test."
msgstr "テストがオペレーティングシステムの特定の状況に依存する場合、テスト開始時に条件を満たしているかを検証してください。"

#: ../../library/test.rst:125
msgid ""
"Import as few modules as possible and do it as soon as possible. This "
"minimizes external dependencies of tests and also minimizes possible "
"anomalous behavior from side-effects of importing a module."
msgstr "import するモジュールをできるかぎり少なくし、可能な限り早期に import を行ってください。そうすることで、てテストの外部依存性を最小限にし、モジュールの import による副作用から生じる変則的な動作を最小限にできます。"

#: ../../library/test.rst:129
msgid ""
"Try to maximize code reuse. On occasion, tests will vary by something as "
"small as what type of input is used. Minimize code duplication by "
"subclassing a basic test class with a class that specifies the input::"
msgstr "できる限りテストコードを再利用するようにしましょう。時として、入力の違いだけを記述すれば良くなるくらい、テストコードを小さくすることができます。例えば以下のように、サブクラスで入力を指定することで、コードの重複を最小化することができます::"

#: ../../library/test.rst:152
msgid "Test Driven Development"
msgstr "Test Driven Development"

#: ../../library/test.rst:153
msgid "A book by Kent Beck on writing tests before code."
msgstr "コードより前にテストを書く方法論に関する Kent Beck の著書。"

#: ../../library/test.rst:159
msgid "Running tests using the command-line interface"
msgstr "コマンドラインインタフェースを利用してテストを実行する"

#: ../../library/test.rst:161
msgid ""
"The :mod:`test.regrtest` module can be run as a script to drive Python's "
"regression test suite, thanks to the :option:`-m` option: :program:`python "
"-m test.regrtest`. Running the script by itself automatically starts running"
" all regression tests in the :mod:`test` package. It does this by finding "
"all modules in the package whose name starts with ``test_``, importing them,"
" and executing the function :func:`test_main` if present. The names of tests"
" to execute may also be passed to the script. Specifying a single regression"
" test (:program:`python -m test.regrtest test_spam`) will minimize output "
"and only print whether the test passed or failed and thus minimize output."
msgstr ":mod:`test.regrtest` はスクリプトとして Python の回帰テストスイートを実行できます。 :option:`-m` オプションを利用して、 :program:`python -m test.regrtest` として実行します。スクリプトを実行すると、自動的に :mod:`test` パッケージ内のすべての回帰テストを実行し始めます。パッケージ内の名前が ``test_`` で始まる全モジュールを見つけ、それをインポートし、もしあるなら関数 :func:`test_main` を実行してテストを行います。実行するテストの名前もスクリプトに渡される可能性があります。単一の回帰テストを指定 (:program:`python -m test.regrtest test_spam`) すると、出力を最小限にします。テストが成功したかあるいは失敗したかだけを出力するので、出力は最小限になります。"

#: ../../library/test.rst:171
msgid ""
"Running :mod:`test.regrtest` directly allows what resources are available "
"for tests to use to be set. You do this by using the ``-u`` command-line "
"option. Specifying ``all`` as the value for the ``-u`` option enables all "
"possible resources: :program:`python -m test.regrtest -uall`. If all but one"
" resource is desired (a more common case), a comma-separated list of "
"resources that are not desired may be listed after ``all``. The command "
":program:`python -m test.regrtest -uall,-audio,-largefile` will run "
":mod:`test.regrtest` with all resources except the ``audio`` and "
"``largefile`` resources. For a list of all resources and more command-line "
"options, run :program:`python -m test.regrtest -h`."
msgstr "直接 :mod:`test.regrtest` を実行すると、テストに利用するリソースを設定できます。これを行うには、 ``-u`` コマンドラインオプションを使います。 ``-u`` のオプションに ``all`` を指定すると、すべてのリソースを有効にします: :program:`python -m test.regrtest -uall` 。(よくある場合ですが) 何か一つを除く全てが必要な場合、カンマで区切った不要なリソースのリストを ``all`` の後に並べます。コマンド :program:`python -m test.regrtest -uall,-audio,-largefile` とすると、 ``audio`` と ``largefile`` リソースを除く全てのリソースを使って :mod:`test.regrtest` を実行します。すべてのリソースのリストと追加のコマンドラインオプションを出力するには、 :program:`python -m test.regrtest -h` を実行してください。"

#: ../../library/test.rst:182
msgid ""
"Some other ways to execute the regression tests depend on what platform the "
"tests are being executed on. On Unix, you can run :program:`make test` at "
"the top-level directory where Python was built. On Windows, executing "
":program:`rt.bat` from your :file:`PCBuild` directory will run all "
"regression tests."
msgstr "テストを実行しようとするプラットフォームによっては、回帰テストを実行する別の方法があります。 Unix では、Python をビルドしたトップレベルディレクトリで :program:`make test` を実行できます。 Windows上では、 :file:`PCBuild` ディレクトリから :program:`rt.bat` を実行すると、すべての回帰テストを実行します。"

#: ../../library/test.rst:190
msgid ":mod:`test.test_support` --- Utility functions for tests"
msgstr ":mod:`test.test_support` --- テストのためのユーティリティ関数"

#: ../../library/test.rst:197
msgid ""
"The :mod:`test.test_support` module has been renamed to :mod:`test.support` "
"in Python 3.x."
msgstr ":mod:`test.test_support` モジュールは、Python 3では :mod:`test.support` にリネームされました。"

#: ../../library/test.rst:200
msgid ""
"The :mod:`test.test_support` module provides support for Python's regression"
" tests."
msgstr ":mod:`test.test_support` モジュールでは、 Python の回帰テストに対するサポートを提供しています。"

#: ../../library/test.rst:203
msgid "This module defines the following exceptions:"
msgstr "このモジュールは次の例外を定義しています:"

#: ../../library/test.rst:208
msgid ""
"Exception to be raised when a test fails. This is deprecated in favor of "
":mod:`unittest`\\ -based tests and :class:`unittest.TestCase`'s assertion "
"methods."
msgstr "テストが失敗したとき送出される例外です。これは、 :mod:`unittest` ベースのテストでは廃止予定で、 :class:`unittest.TestCase` の assertXXX メソッドが推奨されます。"

#: ../../library/test.rst:215
msgid ""
"Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a "
"network connection) is not available. Raised by the :func:`requires` "
"function."
msgstr ":exc:`unittest.SkipTest` のサブクラスです。 (ネットワーク接続のような) リソースが利用できないとき送出されます。 :func:`requires` 関数によって送出されます。"

#: ../../library/test.rst:219
msgid "The :mod:`test.test_support` module defines the following constants:"
msgstr ":mod:`test.test_support` モジュールでは、以下の定数を定義しています:"

#: ../../library/test.rst:224
msgid ""
":const:`True` when verbose output is enabled. Should be checked when more "
"detailed information is desired about a running test. *verbose* is set by "
":mod:`test.regrtest`."
msgstr "冗長な出力が有効な場合は :const:`True` です。実行中のテストについてのより詳細な情報が欲しいときにチェックします。 *verbose* は :mod:`test.regrtest` によって設定されます。"

#: ../../library/test.rst:231
msgid ":const:`True` when Unicode support is available."
msgstr "Unicode サポートが利用可能ならば :const:`True` になります。"

#: ../../library/test.rst:236
msgid ":const:`True` if the running interpreter is Jython."
msgstr "実行中のインタプリタが Jython ならば :const:`True` になります。"

#: ../../library/test.rst:241
msgid ""
"Set to a name that is safe to use as the name of a temporary file.  Any "
"temporary file that is created should be closed and unlinked (removed)."
msgstr "テンポラリファイルの名前として安全に利用できる名前に設定されます。作成した一時ファイルは全て閉じ、unlink (削除) しなければなりません。"

#: ../../library/test.rst:244
msgid "The :mod:`test.test_support` module defines the following functions:"
msgstr ":mod:`test.test_support` モジュールでは、以下の関数を定義しています:"

#: ../../library/test.rst:249
msgid ""
"Remove the module named *module_name* from ``sys.modules`` and delete any "
"byte-compiled files of the module."
msgstr "モジュール名 *module_name* を ``sys.modules`` から取り除き、モジュールのバイトコンパイル済みファイルを全て削除します。"

#: ../../library/test.rst:255
msgid ""
"Return :const:`True` if *resource* is enabled and available. The list of "
"available resources is only set when :mod:`test.regrtest` is executing the "
"tests."
msgstr "*resource* が有効で利用可能ならば :const:`True` を返します。利用可能なリソースのリストは、 :mod:`test.regrtest` がテストを実行している間のみ設定されます。"

#: ../../library/test.rst:262
msgid ""
"Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the "
"argument to :exc:`ResourceDenied` if it is raised. Always returns "
":const:`True` if called by a function whose ``__name__`` is ``'__main__'``. "
"Used when tests are executed by :mod:`test.regrtest`."
msgstr "*resource* が利用できなければ、 :exc:`ResourceDenied` を送出します。その場合、 *msg* は :exc:`ResourceDenied` の引数になります。 ``__name__`` が ``\"__main__\"`` である関数にから呼び出された場合には常に :const:`True` を返します。テストを :mod:`test.regrtest` から実行するときに使われます。"

#: ../../library/test.rst:270
msgid ""
"Return the path to the file named *filename*. If no match is found "
"*filename* is returned. This does not equal a failure since it could be the "
"path to the file."
msgstr "*filename* という名前のファイルへのパスを返します。一致するものが見つからなければ、 *filename* 自体を返します。 *filename* 自体もファイルへのパスでありえるので、 *filename* が返っても失敗ではありません。"

#: ../../library/test.rst:277
msgid ""
"Execute :class:`unittest.TestCase` subclasses passed to the function. The "
"function scans the classes for methods starting with the prefix ``test_`` "
"and executes the tests individually."
msgstr "渡された :class:`unittest.TestCase` サブクラスを実行します。この関数は名前が ``test_`` で始まるメソッドを探して、テストを個別に実行します。"

#: ../../library/test.rst:281
msgid ""
"It is also legal to pass strings as parameters; these should be keys in "
"``sys.modules``. Each associated module will be scanned by "
"``unittest.TestLoader.loadTestsFromModule()``. This is usually seen in the "
"following :func:`test_main` function::"
msgstr "引数に文字列を渡すことも許可されています。その場合、文字列は ``sys.module`` のキーでなければなりません。指定された各モジュールは、 ``unittest.TestLoader.loadTestsFromModule()`` でスキャンされます。この関数は、よく次のような :func:`test_main` 関数の形で利用されます。 ::"

#: ../../library/test.rst:289
msgid "This will run all tests defined in the named module."
msgstr "この関数は、名前で指定されたモジュールの中の全ての定義されたテストを実行します。"

#: ../../library/test.rst:294
msgid ""
"A convenience wrapper for :func:`warnings.catch_warnings()` that makes it "
"easier to test that a warning was correctly raised.  It is approximately "
"equivalent to calling ``warnings.catch_warnings(record=True)`` with "
":meth:`warnings.simplefilter` set to ``always`` and with the option to "
"automatically validate the results that are recorded."
msgstr "warning が正しく発行されているかどうかチェックする、 :func:`warnings.catch_warnings()` を使いやすくするラッパーです。これは、 :meth:`warnings.simplefilter` を ``always`` に設定して、記録された結果を自動的に検証するオプションと共に ``warnings.catch_warnings(record=True)`` を呼ぶのとほぼ同じです。"

#: ../../library/test.rst:300
msgid ""
"``check_warnings`` accepts 2-tuples of the form ``(\"message regexp\", "
"WarningCategory)`` as positional arguments. If one or more *filters* are "
"provided, or if the optional keyword argument *quiet* is :const:`False`, it "
"checks to make sure the warnings are as expected:  each specified filter "
"must match at least one of the warnings raised by the enclosed code or the "
"test fails, and if any warnings are raised that do not match any of the "
"specified filters the test fails.  To disable the first of these checks, set"
" *quiet* to :const:`True`."
msgstr "``check_warnings`` は ``(\"message regexp\", WarningCategory)`` の形をした 2要素タプルをポジション引数として受け取ります。1つ以上の *filters* が与えられた場合や、オプションのキーワード引数 *quiet* が :const:`False` の場合、警告が期待通りであるかどうかをチェックします。指定された各 filter は最低でも1回は囲われたコード内で発生した警告とマッチしなければテストが失敗しますし、指定されたどの filter ともマッチしない警告が発生してもテストが失敗します。前者のチェックを無効にするには、 *quiet* を :const:`True` にします。"

#: ../../library/test.rst:309
msgid "If no arguments are specified, it defaults to::"
msgstr "引数が1つもない場合、デフォルトでは次のようになります::"

#: ../../library/test.rst:313
msgid "In this case all warnings are caught and no errors are raised."
msgstr "この場合、全ての警告は補足され、エラーは発生しません。"

#: ../../library/test.rst:315
msgid ""
"On entry to the context manager, a :class:`WarningRecorder` instance is "
"returned. The underlying warnings list from :func:`~warnings.catch_warnings`"
" is available via the recorder object's :attr:`warnings` attribute.  As a "
"convenience, the attributes of the object representing the most recent "
"warning can also be accessed directly through the recorder object (see "
"example below).  If no warning has been raised, then any of the attributes "
"that would otherwise be expected on an object representing a warning will "
"return :const:`None`."
msgstr "コンテキストマネージャーに入る時、 :class:`WarningRecorder` インスタンスが返されます。このレコーダーオブジェクトの :attr:`warnings` 属性から、 :func:`~warnings.catch_warnings` から得られる警告のリストを取得することができます。便利さのために、レコーダーオブジェクトから直接、一番最近に発生した警告を表すオブジェクトの属性にアクセスできます(以下にある例を参照してください)。警告が1つも発生しなかった場合、それらの全ての属性は :const:`None` を返します。"

#: ../../library/test.rst:324
msgid ""
"The recorder object also has a :meth:`reset` method, which clears the "
"warnings list."
msgstr "レコーダーオブジェクトの :meth:`reset` メソッドは警告リストをクリアします。"

#: ../../library/test.rst:327
msgid "The context manager is designed to be used like this::"
msgstr "コンテキストマネージャーは次のようにして使います::"

#: ../../library/test.rst:334
msgid ""
"In this case if either warning was not raised, or some other warning was "
"raised, :func:`check_warnings` would raise an error."
msgstr "この場合、どちらの警告も発生しなかった場合や、それ以外の警告が発生した場合は、 :func:`check_warnings` はエラーを発生させます。"

#: ../../library/test.rst:337
msgid ""
"When a test needs to look more deeply into the warnings, rather than just "
"checking whether or not they occurred, code like this can be used::"
msgstr "警告が発生したかどうかだけでなく、もっと詳しいチェックが必要な場合は、次のようなコードになります::"

#: ../../library/test.rst:350
msgid ""
"Here all warnings will be caught, and the test code tests the captured "
"warnings directly."
msgstr "全ての警告をキャプチャし、テストコードがその警告を直接テストします。"

#: ../../library/test.rst:354
msgid "New optional arguments *filters* and *quiet*."
msgstr "新しいオプション引数 *filters* と *quiet*"

#: ../../library/test.rst:360
msgid ""
"Similar to :func:`check_warnings`, but for Python 3 compatibility warnings. "
"If ``sys.py3kwarning == 1``, it checks if the warning is effectively raised."
" If ``sys.py3kwarning == 0``, it checks that no warning is raised.  It "
"accepts 2-tuples of the form ``(\"message regexp\", WarningCategory)`` as "
"positional arguments.  When the optional keyword argument *quiet* is "
":const:`True`, it does not fail if a filter catches nothing.  Without "
"arguments, it defaults to::"
msgstr ":func:`check_warnings` と似ていますが、 Python 3 互換性警告のためのものです。 ``sys.py3kwarning == 1`` の時、警告が実際に発生していることをチェックします。 ``sys.py3kwarning == 0`` の時、警告が発生していないことをチェックします。ポジション引数として ``(\"message regexp\", WarningCategory)`` の形をした 2要素タプルを受け取ります。オプション引数 *quiet* が :const:`True` のとき、filter になにもマッチしなくても失敗しません。引数がない場合は次と同じになります::"

#: ../../library/test.rst:375
msgid ""
"This is a context manager that runs the :keyword:`with` statement body using"
" a :class:`StringIO.StringIO` object as sys.stdout.  That object can be "
"retrieved using the ``as`` clause of the :keyword:`with` statement."
msgstr "これは、 :keyword:`with` 文の body で ``sys.stdout`` として :class:`StringIO.StringIO` オブジェクトを利用するコンテキストマネージャーです。このオブジェクトは、 :keyword:`with` 文の ``as`` 節で受け取ることができます。"

#: ../../library/test.rst:379 ../../library/test.rst:424
msgid "Example use::"
msgstr "使用例::"

#: ../../library/test.rst:390
msgid ""
"This function imports and returns the named module. Unlike a normal import, "
"this function raises :exc:`unittest.SkipTest` if the module cannot be "
"imported."
msgstr "この関数は *name* で指定されたモジュールを import して返します。通常の import と異なり、この関数はモジュールを import できなかった場合に :exc:`unittest.SkipTest` 例外を発生させます。"

#: ../../library/test.rst:394 ../../library/test.rst:418
msgid ""
"Module and package deprecation messages are suppressed during this import if"
" *deprecated* is :const:`True`."
msgstr "*deprecated* が :const:`True` の場合、 import 中はモジュールとパッケージの廃止メッセージが抑制されます。"

#: ../../library/test.rst:402
msgid ""
"This function imports and returns a fresh copy of the named Python module by"
" removing the named module from ``sys.modules`` before doing the import. "
"Note that unlike :func:`reload`, the original module is not affected by this"
" operation."
msgstr "この関数は、 *name* で指定された Python モジュールを、 import 前に ``sys.modules`` から削除することで新規に import してそのコピーを返します。 :func:`reload` 関数と違い、もとのモジュールはこの操作によって影響をうけません。"

#: ../../library/test.rst:407
msgid ""
"*fresh* is an iterable of additional module names that are also removed from"
" the ``sys.modules`` cache before doing the import."
msgstr "*fresh* は、同じように import 前に ``sys.modules`` から削除されるモジュール名の iterable です。"

#: ../../library/test.rst:410
msgid ""
"*blocked* is an iterable of module names that are replaced with :const:`0` "
"in the module cache during the import to ensure that attempts to import them"
" raise :exc:`ImportError`."
msgstr "*blocked* もモジュール名の iterable で、 import 中にモジュールキャッシュ内でその名前を :const:`0` に置き換えることで、そのモジュールを import しようとすると :exc:`ImportError` を発生させます。"

#: ../../library/test.rst:414
msgid ""
"The named module and any modules named in the *fresh* and *blocked* "
"parameters are saved before starting the import and then reinserted into "
"``sys.modules`` when the fresh import is complete."
msgstr "指定されたモジュールと *fresh* や *blocked* 引数内のモジュール名は import 前に保存され、 fresh import が完了したら ``sys.modules`` に戻されます。"

#: ../../library/test.rst:421
msgid ""
"This function will raise :exc:`unittest.SkipTest` if the named module cannot"
" be imported."
msgstr "この関数はモジュールを import できなかった場合に :exc:`unittest.SkipTest` 例外を送出します。"

#: ../../library/test.rst:436
msgid "The :mod:`test.test_support` module defines the following classes:"
msgstr ":mod:`test.test_support` モジュールは以下のクラスを定義しています。"

#: ../../library/test.rst:440
msgid ""
"Instances are a context manager that raises :exc:`ResourceDenied` if the "
"specified exception type is raised.  Any keyword arguments are treated as "
"attribute/value pairs to be compared against any exception raised within the"
" :keyword:`with` statement.  Only if all pairs match properly against "
"attributes on the exception is :exc:`ResourceDenied` raised."
msgstr "このクラスのインスタンスはコンテキストマネージャーで、指定された型の例外が発生した場合に :exc:`ResourceDenied` 例外を発生させます。キーワード引数は全て、 :keyword:`with` 文の中で発生した全ての例外の属性名/属性値と比較されます。全てのキーワード引数が例外の属性に一致した場合に、 :exc:`ResourceDenied` 例外が発生します。"

#: ../../library/test.rst:449
msgid ""
"Class used to temporarily set or unset environment variables.  Instances can"
" be used as a context manager and have a complete dictionary interface for "
"querying/modifying the underlying ``os.environ``. After exit from the "
"context manager all changes to environment variables done through this "
"instance will be rolled back."
msgstr "一時的に環境変数をセット・アンセットするためのクラスです。このクラスのインスタンスはコンテキストマネージャーとして利用されます。また、 ``os.environ`` に対する参照・更新を行う完全な辞書のインタフェースを持ちます。コンテキストマネージャーが終了した時、このインスタンス経由で環境変数へ行った全ての変更はロールバックされます。"

#: ../../library/test.rst:456
msgid "Added dictionary interface."
msgstr "辞書のインタフェースを追加しました。"

#: ../../library/test.rst:462
msgid ""
"Temporarily set the environment variable ``envvar`` to the value of "
"``value``."
msgstr "一時的に、 ``envvar`` を ``value`` にセットします。"

#: ../../library/test.rst:468
msgid "Temporarily unset the environment variable ``envvar``."
msgstr "一時的に ``envvar`` をアンセットします。"

#: ../../library/test.rst:473
msgid ""
"Class used to record warnings for unit tests. See documentation of "
":func:`check_warnings` above for more details."
msgstr "ユニットテスト時に warning を記録するためのクラスです。上の、 :func:`check_warnings` のドキュメントを参照してください。"
